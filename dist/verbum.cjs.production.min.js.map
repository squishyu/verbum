{"version":3,"file":"verbum.cjs.production.min.js","sources":["../src/nodes/EmojiNode.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/ui/EquationEditor.tsx","../src/ui/KatexRenderer.tsx","../src/nodes/EquationNode.tsx","../src/ui/ImageResizer.tsx","../src/nodes/ExcalidrawNode/ExcalidrawImage.tsx","../src/utils/join-classes.ts","../src/ui/Button.tsx","../src/ui/Modal.tsx","../src/nodes/ExcalidrawNode/ExcalidrawModal.tsx","../src/nodes/ExcalidrawNode/index.tsx","../src/nodes/ImageNode.tsx","../src/nodes/KeywordNode.ts","../src/nodes/MentionNode.ts","../src/nodes/PollNode.tsx","../src/shared/src/canUseDOM.ts","../src/shared/src/useLayoutEffect.ts","../src/collaboration.ts","../src/context/SharedHistoryContext.tsx","../src/themes/PlaygroundEditorTheme.ts","../src/themes/StickyEditorTheme.ts","../src/ui/ContentEditable.tsx","../src/ui/Placeholder.tsx","../src/nodes/StickyNode.tsx","../src/nodes/TweetNode.tsx","../src/nodes/TypeaheadNode.ts","../src/nodes/YouTubeNode.tsx","../src/nodes/PlaygroundNodes.ts","../src/locale/index.tsx","../src/appSettings.ts","../src/context/SettingsContext.tsx","../src/hooks/useModal.tsx","../src/plugins/MarkdownTransformers.ts","../src/hooks/useReport.ts","../src/plugins/SpeechToTextPlugin.ts","../src/plugins/ActionsPlugin.tsx","../src/plugins/AutoLinkPlugin.tsx","../src/plugins/CommentPlugin.tsx","../src/plugins/CharacterStylesPopupPlugin.tsx","../src/plugins/ClickableLinkPlugin.ts","../src/plugins/CodeHighlightPlugin.ts","../src/plugins/KeywordsPlugin.ts","../src/plugins/ListMaxIndentLevelPlugin.ts","../src/plugins/MarkdownShortcutPlugin.tsx","../src/plugins/TabFocusPlugin.tsx","../src/context/EditorContext.tsx","../src/utils/node.util.ts","../src/context/ToolbarContext.tsx","../src/ui/DropDown.tsx","../src/plugins/ToolbarPlugin/components/AlignDropdown.tsx","../src/ui/TextInput.tsx","../src/ui/FileInput.tsx","../src/plugins/ImagesPlugin.ts","../src/plugins/EquationsPlugin.ts","../src/plugins/ExcalidrawPlugin.ts","../src/plugins/PollPlugin.ts","../src/plugins/TwitterPlugin.ts","../src/plugins/YouTubePlugin.ts","../src/ui/KatexEquationAlterer.tsx","../src/plugins/TableCellResizer.tsx","../src/plugins/TableActionMenuPlugin.tsx","../src/plugins/HorizontalRulePlugin.ts","../src/plugins/ToolbarPlugin/components/InsertDropdown.tsx","../src/shared/src/environment.ts","../src/plugins/ToolbarPlugin/components/UndoButton.tsx","../src/plugins/ToolbarPlugin/components/RedoButton.tsx","../src/ui/Select.tsx","../src/plugins/ToolbarPlugin/components/CodeLanguageDropdown.tsx","../src/plugins/ToolbarPlugin/components/BlockFormatDropdown.tsx","../src/ui/Divider.tsx","../src/plugins/ToolbarPlugin/ToolbarPlugin.tsx","../src/plugins/MentionsPlugin.tsx","../src/ui/ColorPicker.tsx","../src/ui/LinkPreview.tsx","../src/plugins/ToolbarPlugin/components/FloatingLinkEditor.tsx","../src/plugins/ToolbarPlugin/components/FontFamilyDropdown.tsx","../src/plugins/ToolbarPlugin/components/FontSizeDropdown.tsx","../src/nodes/ImageComponent.tsx","../src/plugins/ToolbarPlugin/components/BackgroundColorPicker.tsx","../src/plugins/ToolbarPlugin/components/BoldButton.tsx","../src/plugins/ToolbarPlugin/components/CodeFormatButton.tsx","../src/Editor.tsx","../src/EditorComposer.tsx","../src/plugins/ToolbarPlugin/components/InsertLinkButton.tsx","../src/plugins/ToolbarPlugin/components/ItalicButton.tsx","../src/plugins/ToolbarPlugin/components/TextColorPicker.tsx","../src/plugins/ToolbarPlugin/components/TextFormatDropdown.tsx","../src/plugins/ToolbarPlugin/components/UnderlineButton.tsx"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport React from 'react';\n\nimport type { EditorConfig, LexicalNode, NodeKey } from 'lexical';\n\nimport SerializedTextNode from 'lexical';\n\nimport { Spread } from 'globals';\nimport { TextNode } from 'lexical';\n\nexport type SerializedEmojiNode = Spread<\n  {\n    className: string;\n    type: 'emoji';\n  },\n  typeof SerializedTextNode\n>;\n\nlet __className: string = 'EmojiNode';\nexport class EmojiNode extends TextNode {\n  static getType(): string {\n    return 'emoji';\n  }\n\n  static clone(node: EmojiNode): EmojiNode {\n    return new EmojiNode(__className, node.__text, node.__key);\n  }\n\n  constructor(className: string, text: string, key?: NodeKey) {\n    super(text, key);\n    __className = className;\n  }\n\n  createDOM(config: EditorConfig): HTMLElement {\n    const dom = document.createElement('span');\n    const inner = super.createDOM(config);\n    dom.className = __className;\n    inner.className = 'emoji-inner';\n    dom.appendChild(inner);\n    return dom;\n  }\n\n  updateDOM(\n    prevNode: TextNode,\n    dom: HTMLElement,\n    config: EditorConfig\n  ): boolean {\n    const inner = dom.firstChild;\n    if (inner === null) {\n      return true;\n    }\n    super.updateDOM(prevNode, inner as HTMLElement, config);\n    return false;\n  }\n\n  static importJSON(serializedNode: SerializedEmojiNode): EmojiNode {\n    const node = $createEmojiNode(\n      serializedNode.className,\n      serializedNode.text\n    );\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n\n  exportJSON(): SerializedEmojiNode {\n    return {\n      ...super.exportJSON(),\n      className: this.getClassName(),\n      type: 'emoji',\n    };\n  }\n\n  getClassName(): string {\n    const self = this.getLatest();\n    return self.__className;\n  }\n}\n\nexport function $isEmojiNode(\n  node: LexicalNode | null | undefined\n): node is EmojiNode {\n  return node instanceof EmojiNode;\n}\n\nexport function $createEmojiNode(\n  className: string,\n  emojiText: string\n): EmojiNode {\n  return new EmojiNode(className, emojiText).setMode('token');\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport './EquationEditor.css';\n\nimport * as React from 'react';\nimport { ChangeEvent, RefObject } from 'react';\n\ntype BaseEquationEditorProps = {\n  equation: string;\n  inline: boolean;\n  inputRef: { current: null | HTMLInputElement | HTMLTextAreaElement };\n  setEquation: (string) => void;\n};\n\nexport default function EquationEditor({\n  equation,\n  setEquation,\n  inline,\n  inputRef,\n}: BaseEquationEditorProps): JSX.Element {\n  const onChange = (event) => {\n    setEquation(event.target.value);\n  };\n\n  const props = {\n    equation,\n    inputRef,\n    onChange,\n  };\n\n  return inline ? (\n    <InlineEquationEditor\n      {...props}\n      inputRef={inputRef as RefObject<HTMLInputElement>}\n    />\n  ) : (\n    <BlockEquationEditor\n      {...props}\n      inputRef={inputRef as RefObject<HTMLTextAreaElement>}\n    />\n  );\n}\n\ntype EquationEditorImplProps = {\n  equation: string;\n  inputRef: { current: null | HTMLInputElement };\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nfunction InlineEquationEditor({\n  equation,\n  onChange,\n  inputRef,\n}: EquationEditorImplProps): JSX.Element {\n  return (\n    <span className=\"EquationEditor_inputBackground\">\n      <span className=\"EquationEditor_dollarSign\">$</span>\n      <input\n        className=\"EquationEditor_inlineEditor\"\n        value={equation}\n        onChange={onChange}\n        autoFocus={true}\n        ref={inputRef}\n      />\n      <span className=\"EquationEditor_dollarSign\">$</span>\n    </span>\n  );\n}\n\ntype BlockEquationEditorImplProps = {\n  equation: string;\n  inputRef: { current: null | HTMLTextAreaElement };\n  onChange: (event: ChangeEvent<HTMLTextAreaElement>) => void;\n};\n\nfunction BlockEquationEditor({\n  equation,\n  onChange,\n  inputRef,\n}: BlockEquationEditorImplProps): JSX.Element {\n  return (\n    <div className=\"EquationEditor_inputBackground\">\n      <span className=\"EquationEditor_dollarSign\">{'$$\\n'}</span>\n      <textarea\n        className=\"EquationEditor_blockEditor\"\n        value={equation}\n        onChange={onChange}\n        ref={inputRef}\n      />\n      <span className=\"EquationEditor_dollarSign\">{'\\n$$'}</span>\n    </div>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport katex from 'katex';\nimport * as React from 'react';\nimport { useEffect, useRef } from 'react';\n\nexport default function KatexRenderer({\n  equation,\n  inline,\n  onClick,\n}: Readonly<{\n  equation: string;\n  inline: boolean;\n  onClick: () => void;\n}>): JSX.Element {\n  const katexElementRef = useRef(null);\n\n  useEffect(() => {\n    const katexElement = katexElementRef.current;\n\n    if (katexElement !== null) {\n      katex.render(equation, katexElement, {\n        displayMode: !inline, // true === block display //\n        errorColor: '#cc0000',\n        output: 'html',\n        strict: 'warn',\n        throwOnError: false,\n        trust: false,\n      });\n    }\n  }, [equation, inline]);\n\n  return (\n    // We use spacers either side to ensure Android doesn't try and compose from the\n    // inner text from Katex. There didn't seem to be any other way of making this work,\n    // without having a physical space.\n    <>\n      <span className=\"spacer\"> </span>\n      <span\n        role=\"button\"\n        tabIndex={-1}\n        onClick={onClick}\n        ref={katexElementRef}\n      />\n      <span className=\"spacer\"> </span>\n    </>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {\n  EditorConfig,\n  LexicalNode,\n  NodeKey,\n  SerializedLexicalNode,\n} from 'lexical';\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { mergeRegister } from '@lexical/utils';\nimport {\n  $getNodeByKey,\n  COMMAND_PRIORITY_HIGH,\n  DecoratorNode,\n  KEY_ESCAPE_COMMAND,\n  SELECTION_CHANGE_COMMAND,\n} from 'lexical';\nimport { Spread } from 'libdefs/globals';\nimport * as React from 'react';\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\nimport EquationEditor from '../ui/EquationEditor';\nimport KatexRenderer from '../ui/KatexRenderer';\n\ntype EquationComponentProps = {\n  equation: string;\n  inline: boolean;\n  nodeKey: NodeKey;\n};\n\nfunction EquationComponent({\n  equation,\n  inline,\n  nodeKey,\n}: EquationComponentProps): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n  const [equationValue, setEquationValue] = useState(equation);\n  const [showEquationEditor, setShowEquationEditor] = useState<boolean>(false);\n  const inputRef = useRef(null);\n\n  const onHide = useCallback(\n    (restoreSelection?: boolean) => {\n      setShowEquationEditor(false);\n      editor.update(() => {\n        const node = $getNodeByKey(nodeKey);\n        if ($isEquationNode(node)) {\n          node.setEquation(equationValue);\n          if (restoreSelection) {\n            node.selectNext(0, 0);\n          }\n        }\n      });\n    },\n    [editor, equationValue, nodeKey]\n  );\n\n  useEffect(() => {\n    if (showEquationEditor) {\n      return mergeRegister(\n        editor.registerCommand(\n          SELECTION_CHANGE_COMMAND,\n          (payload) => {\n            const activeElement = document.activeElement;\n            const inputElem = inputRef.current;\n            if (inputElem !== activeElement) {\n              onHide();\n            }\n            return false;\n          },\n          COMMAND_PRIORITY_HIGH\n        ),\n        editor.registerCommand(\n          KEY_ESCAPE_COMMAND,\n          (payload) => {\n            const activeElement = document.activeElement;\n            const inputElem = inputRef.current;\n            if (inputElem === activeElement) {\n              onHide(true);\n              return true;\n            }\n            return false;\n          },\n          COMMAND_PRIORITY_HIGH\n        )\n      );\n    }\n  }, [editor, onHide, showEquationEditor]);\n\n  return (\n    <>\n      {showEquationEditor ? (\n        <EquationEditor\n          equation={equationValue}\n          setEquation={setEquationValue}\n          inline={inline}\n          inputRef={inputRef}\n        />\n      ) : (\n        <KatexRenderer\n          equation={equationValue}\n          inline={inline}\n          onClick={() => {\n            setShowEquationEditor(true);\n          }}\n        />\n      )}\n    </>\n  );\n}\n\nexport type SerializedEquationNode = Spread<\n  {\n    type: 'equation';\n    equation: string;\n    inline: boolean;\n  },\n  SerializedLexicalNode\n>;\n\nexport class EquationNode extends DecoratorNode<JSX.Element> {\n  __equation: string;\n  __inline: boolean;\n\n  static getType(): string {\n    return 'equation';\n  }\n\n  static clone(node: EquationNode): EquationNode {\n    return new EquationNode(node.__equation, node.__inline, node.__key);\n  }\n\n  constructor(equation: string, inline?: boolean, key?: NodeKey) {\n    super(key);\n    this.__equation = equation;\n    this.__inline = inline ?? false;\n  }\n\n  static importJSON(serializedNode: SerializedEquationNode): EquationNode {\n    const node = $createEquationNode(\n      serializedNode.equation,\n      serializedNode.inline\n    );\n    return node;\n  }\n\n  exportJSON(): SerializedEquationNode {\n    return {\n      equation: this.getEquation(),\n      inline: this.__inline,\n      type: 'equation',\n      version: 1,\n    };\n  }\n\n  createDOM(_config: EditorConfig): HTMLElement {\n    return document.createElement(this.__inline ? 'span' : 'div');\n  }\n\n  updateDOM(prevNode: EquationNode): boolean {\n    // If the inline property changes, replace the element\n    return this.__inline !== prevNode.__inline;\n  }\n\n  getEquation(): string {\n    return this.__equation;\n  }\n\n  setEquation(equation: string): void {\n    const writable = this.getWritable();\n    writable.__equation = equation;\n  }\n\n  decorate(): JSX.Element {\n    return (\n      <EquationComponent\n        equation={this.__equation}\n        inline={this.__inline}\n        nodeKey={this.__key}\n      />\n    );\n  }\n}\n\nexport function $createEquationNode(\n  equation = '',\n  inline = false\n): EquationNode {\n  const equationNode = new EquationNode(equation, inline);\n  return equationNode;\n}\n\nexport function $isEquationNode(\n  node: LexicalNode | null | undefined\n): node is EquationNode {\n  return node instanceof EquationNode;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { LexicalEditor } from 'lexical';\n\nimport * as React from 'react';\nimport { useRef } from 'react';\n\nfunction clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\nconst Direction = {\n  east: 1 << 0,\n  north: 1 << 3,\n  south: 1 << 1,\n  west: 1 << 2,\n};\n\nexport default function ImageResizer({\n  onResizeStart,\n  onResizeEnd,\n  imageRef,\n  maxWidth,\n  editor,\n  showCaption,\n  setShowCaption,\n}: {\n  editor: LexicalEditor;\n  imageRef: { current: null | HTMLElement };\n  maxWidth?: number;\n  onResizeEnd: (width: 'inherit' | number, height: 'inherit' | number) => void;\n  onResizeStart: () => void;\n  setShowCaption: (boolean) => void;\n  showCaption: boolean;\n}): JSX.Element {\n  const buttonRef = useRef(null);\n  const positioningRef = useRef<{\n    currentHeight: 'inherit' | number;\n    currentWidth: 'inherit' | number;\n    direction: number;\n    isResizing: boolean;\n    ratio: number;\n    startHeight: number;\n    startWidth: number;\n    startX: number;\n    startY: number;\n  }>({\n    currentHeight: 0,\n    currentWidth: 0,\n    direction: 0,\n    isResizing: false,\n    ratio: 0,\n    startHeight: 0,\n    startWidth: 0,\n    startX: 0,\n    startY: 0,\n  });\n  const editorRootElement = editor.getRootElement();\n  // Find max width, accounting for editor padding.\n  const maxWidthContainer = maxWidth\n    ? maxWidth\n    : editorRootElement !== null\n    ? editorRootElement.getBoundingClientRect().width - 20\n    : 100;\n  const maxHeightContainer =\n    editorRootElement !== null\n      ? editorRootElement.getBoundingClientRect().height - 20\n      : 100;\n\n  const minWidth = 100;\n  const minHeight = 100;\n\n  const setStartCursor = (direction: number) => {\n    const ew = direction === Direction.east || direction === Direction.west;\n    const ns = direction === Direction.north || direction === Direction.south;\n    const nwse =\n      (direction & Direction.north && direction & Direction.west) ||\n      (direction & Direction.south && direction & Direction.east);\n\n    const cursorDir = ew ? 'ew' : ns ? 'ns' : nwse ? 'nwse' : 'nesw';\n\n    if (editorRootElement !== null) {\n      editorRootElement.style.setProperty(\n        'cursor',\n        `${cursorDir}-resize`,\n        'important'\n      );\n    }\n    if (document.body !== null) {\n      document.body.style.setProperty(\n        'cursor',\n        `${cursorDir}-resize`,\n        'important'\n      );\n    }\n  };\n\n  const setEndCursor = () => {\n    if (editorRootElement !== null) {\n      editorRootElement.style.setProperty('cursor', 'default');\n    }\n    if (document.body !== null) {\n      document.body.style.setProperty('cursor', 'default');\n    }\n  };\n\n  const handlePointerDown = (\n    event: React.PointerEvent<HTMLDivElement>,\n    direction: number\n  ) => {\n    const image = imageRef.current;\n    if (image !== null) {\n      const { width, height } = image.getBoundingClientRect();\n      const positioning = positioningRef.current;\n      positioning.startWidth = width;\n      positioning.startHeight = height;\n      positioning.ratio = width / height;\n      positioning.currentWidth = width;\n      positioning.currentHeight = height;\n      positioning.startX = event.clientX;\n      positioning.startY = event.clientY;\n      positioning.isResizing = true;\n      positioning.direction = direction;\n\n      setStartCursor(direction);\n      onResizeStart();\n\n      image.style.height = `${height}px`;\n      image.style.width = `${width}px`;\n\n      document.addEventListener('pointermove', handlePointerMove);\n      document.addEventListener('pointerup', handlePointerUp);\n    }\n  };\n  const handlePointerMove = (event: PointerEvent) => {\n    const image = imageRef.current;\n    const positioning = positioningRef.current;\n\n    const isHorizontal =\n      positioning.direction & (Direction.east | Direction.west);\n    const isVertical =\n      positioning.direction & (Direction.south | Direction.north);\n\n    if (image !== null && positioning.isResizing) {\n      // Corner cursor\n      if (isHorizontal && isVertical) {\n        let diff = Math.floor(positioning.startX - event.clientX);\n        diff = positioning.direction & Direction.east ? -diff : diff;\n\n        const width = clamp(\n          positioning.startWidth + diff,\n          minWidth,\n          maxWidthContainer\n        );\n\n        const height = width / positioning.ratio;\n        image.style.width = `${width}px`;\n        image.style.height = `${height}px`;\n        positioning.currentHeight = height;\n        positioning.currentWidth = width;\n      } else if (isVertical) {\n        let diff = Math.floor(positioning.startY - event.clientY);\n        diff = positioning.direction & Direction.south ? -diff : diff;\n\n        const height = clamp(\n          positioning.startHeight + diff,\n          minHeight,\n          maxHeightContainer\n        );\n\n        image.style.height = `${height}px`;\n        positioning.currentHeight = height;\n      } else {\n        let diff = Math.floor(positioning.startX - event.clientX);\n        diff = positioning.direction & Direction.east ? -diff : diff;\n\n        const width = clamp(\n          positioning.startWidth + diff,\n          minWidth,\n          maxWidthContainer\n        );\n\n        image.style.width = `${width}px`;\n        positioning.currentWidth = width;\n      }\n    }\n  };\n  const handlePointerUp = () => {\n    const image = imageRef.current;\n    const positioning = positioningRef.current;\n    if (image !== null && positioning.isResizing) {\n      const width = positioning.currentWidth;\n      const height = positioning.currentHeight;\n      positioning.startWidth = 0;\n      positioning.startHeight = 0;\n      positioning.ratio = 0;\n      positioning.startX = 0;\n      positioning.startY = 0;\n      positioning.currentWidth = 0;\n      positioning.currentHeight = 0;\n      positioning.isResizing = false;\n\n      setEndCursor();\n      onResizeEnd(width, height);\n\n      document.removeEventListener('pointermove', handlePointerMove);\n      document.removeEventListener('pointerup', handlePointerUp);\n    }\n  };\n  return (\n    <>\n      {!showCaption && (\n        <button\n          className=\"image-caption-button\"\n          ref={buttonRef}\n          onClick={() => {\n            setShowCaption(!showCaption);\n          }}\n        >\n          Add Caption\n        </button>\n      )}\n      <div\n        className=\"image-resizer image-resizer-n\"\n        onPointerDown={(event) => {\n          handlePointerDown(event, Direction.north);\n        }}\n      />\n      <div\n        className=\"image-resizer image-resizer-ne\"\n        onPointerDown={(event) => {\n          handlePointerDown(event, Direction.north | Direction.east);\n        }}\n      />\n      <div\n        className=\"image-resizer image-resizer-e\"\n        onPointerDown={(event) => {\n          handlePointerDown(event, Direction.east);\n        }}\n      />\n      <div\n        className=\"image-resizer image-resizer-se\"\n        onPointerDown={(event) => {\n          handlePointerDown(event, Direction.south | Direction.east);\n        }}\n      />\n      <div\n        className=\"image-resizer image-resizer-s\"\n        onPointerDown={(event) => {\n          handlePointerDown(event, Direction.south);\n        }}\n      />\n      <div\n        className=\"image-resizer image-resizer-sw\"\n        onPointerDown={(event) => {\n          handlePointerDown(event, Direction.south | Direction.west);\n        }}\n      />\n      <div\n        className=\"image-resizer image-resizer-w\"\n        onPointerDown={(event) => {\n          handlePointerDown(event, Direction.west);\n        }}\n      />\n      <div\n        className=\"image-resizer image-resizer-nw\"\n        onPointerDown={(event) => {\n          handlePointerDown(event, Direction.north | Direction.west);\n        }}\n      />\n    </>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { exportToSvg } from '@excalidraw/excalidraw';\nimport {\n  ExcalidrawElement,\n  NonDeleted,\n} from '@excalidraw/excalidraw/types/element/types';\nimport { AppState } from '@excalidraw/excalidraw/types/types';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\n\ntype ImageType = 'svg' | 'canvas';\n\ntype Props = {\n  /**\n   * Configures the export setting for SVG/Canvas\n   */\n  appState?: Partial<Omit<AppState, 'offsetTop' | 'offsetLeft'>> | null;\n  /**\n   * The css class applied to image to be rendered\n   */\n  className?: string;\n  /**\n   * The Excalidraw elements to be rendered as an image\n   */\n  elements: NonDeleted<ExcalidrawElement>[];\n  /**\n   * The height of the image to be rendered\n   */\n  height?: number | null;\n  /**\n   * The ref object to be used to render the image\n   */\n  imageContainerRef: { current: null | HTMLDivElement };\n  /**\n   * The type of image to be rendered\n   */\n  imageType?: ImageType;\n  /**\n   * The css class applied to the root element of this component\n   */\n  rootClassName?: string | null;\n  /**\n   * The width of the image to be rendered\n   */\n  width?: number | null;\n};\n\n// exportToSvg has fonts from excalidraw.com\n// We don't want them to be used in open source\nconst removeStyleFromSvg_HACK = (svg) => {\n  const styleTag = svg?.firstElementChild?.firstElementChild;\n\n  // Generated SVG is getting double-sized by height and width attributes\n  // We want to match the real size of the SVG element\n  const viewBox = svg.getAttribute('viewBox');\n  if (viewBox != null) {\n    const viewBoxDimentions = viewBox.split(' ');\n    svg.setAttribute('width', viewBoxDimentions[2]);\n    svg.setAttribute('height', viewBoxDimentions[3]);\n  }\n\n  if (styleTag && styleTag.tagName === 'style') {\n    styleTag.remove();\n  }\n};\n\n/**\n * @explorer-desc\n * A component for rendering Excalidraw elements as a static image\n */\nexport default function ExcalidrawImage({\n  elements,\n  imageContainerRef,\n  appState = null,\n  rootClassName = null,\n}: Props): JSX.Element {\n  const [Svg, setSvg] = useState<Element | null>(null);\n\n  useEffect(() => {\n    const setContent = async () => {\n      const svg: Element = await exportToSvg({\n        appState,\n        elements,\n        files: null,\n      });\n      removeStyleFromSvg_HACK(svg);\n\n      svg.setAttribute('width', '100%');\n      svg.setAttribute('height', '100%');\n      svg.setAttribute('display', 'block');\n\n      setSvg(svg);\n    };\n    setContent();\n  }, [elements, appState]);\n\n  return (\n    <div\n      ref={imageContainerRef}\n      className={rootClassName ?? ''}\n      dangerouslySetInnerHTML={{ __html: Svg?.outerHTML ?? '' }}\n    />\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nexport default function joinClasses(...args) {\n  return args.filter(Boolean).join(' ');\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport './Button.css';\n\nimport * as React from 'react';\n\nimport joinClasses from '../utils/join-classes';\n\nexport default function Button({\n  'data-test-id': dataTestId,\n  children,\n  className,\n  onClick,\n  disabled,\n  small,\n  title,\n}: {\n  'data-test-id'?: string;\n  children: JSX.Element | string | (JSX.Element | string)[];\n  className?: string;\n  disabled?: boolean;\n  onClick: () => void;\n  small?: boolean;\n  title?: string;\n}): JSX.Element {\n  return (\n    <button\n      disabled={disabled}\n      className={joinClasses(\n        'Button__root',\n        disabled && 'Button__disabled',\n        small && 'Button__small',\n        className\n      )}\n      onClick={onClick}\n      title={title}\n      aria-label={title}\n      {...(dataTestId && { 'data-test-id': dataTestId })}\n    >\n      {children}\n    </button>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport './Modal.css';\n\nimport * as React from 'react';\nimport { useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\n\nfunction PortalImpl({\n  onClose,\n  children,\n  title,\n  closeOnClickOutside,\n}: {\n  children: JSX.Element | string | (JSX.Element | string)[];\n  closeOnClickOutside: boolean;\n  onClose: () => void;\n  title: string;\n}) {\n  const modalRef = useRef<HTMLDivElement>();\n\n  useEffect(() => {\n    if (modalRef.current !== null) {\n      modalRef.current.focus();\n    }\n  }, []);\n\n  useEffect(() => {\n    let modalOverlayElement = null;\n    const handler = (event) => {\n      if (event.keyCode === 27) {\n        onClose();\n      }\n    };\n    const clickOutsideHandler = (event: MouseEvent) => {\n      const target = event.target;\n      if (\n        modalRef.current !== null &&\n        !modalRef.current.contains(target as Node) &&\n        closeOnClickOutside\n      ) {\n        onClose();\n      }\n    };\n    if (modalRef.current !== null) {\n      modalOverlayElement = modalRef.current?.parentElement;\n      if (modalOverlayElement !== null) {\n        modalOverlayElement?.addEventListener('click', clickOutsideHandler);\n      }\n    }\n\n    window.addEventListener('keydown', handler);\n\n    return () => {\n      window.removeEventListener('keydown', handler);\n      if (modalOverlayElement !== null) {\n        modalOverlayElement?.removeEventListener('click', clickOutsideHandler);\n      }\n    };\n  }, [closeOnClickOutside, onClose]);\n\n  return (\n    <div className=\"Modal__overlay\" role=\"dialog\">\n      <div className=\"Modal__modal\" tabIndex={-1} ref={modalRef}>\n        <h2 className=\"Modal__title\">{title}</h2>\n        <button\n          className=\"Modal__closeButton\"\n          aria-label=\"Close modal\"\n          type=\"button\"\n          onClick={onClose}\n        >\n          X\n        </button>\n        <div className=\"Modal__content\">{children}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default function Modal({\n  onClose,\n  children,\n  title,\n  closeOnClickOutside = false,\n}: {\n  children: JSX.Element | string | (JSX.Element | string)[];\n  closeOnClickOutside?: boolean;\n  onClose: () => void;\n  title: string;\n}): JSX.Element {\n  return createPortal(\n    <PortalImpl\n      onClose={onClose}\n      title={title}\n      closeOnClickOutside={closeOnClickOutside}\n    >\n      {children}\n    </PortalImpl>,\n    document.body\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport './ExcalidrawModal.css';\n\nimport { Excalidraw } from '@excalidraw/excalidraw';\nimport _default from '@excalidraw/excalidraw';\nimport * as React from 'react';\nimport { ReactPortal, useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport { ExcalidrawElement } from '@excalidraw/excalidraw/types/element/types';\nimport { useTranslation } from 'react-i18next';\n\nexport type ExcalidrawElementFragment = {\n  isDeleted?: boolean;\n};\n\ntype Props = {\n  closeOnClickOutside?: boolean;\n  /**\n   * The initial set of elements to draw into the scene\n   */\n  initialElements: ReadonlyArray<ExcalidrawElementFragment>;\n  /**\n   * Controls the visibility of the modal\n   */\n  isShown?: boolean;\n  /**\n   * Completely remove Excalidraw component\n   */\n  onDelete: () => boolean;\n  /**\n   * Handle modal closing\n   */\n  onHide: () => void;\n  /**\n   * Callback when the save button is clicked\n   */\n  onSave: (elements: ReadonlyArray<ExcalidrawElementFragment>) => void;\n};\n\n/**\n * @explorer-desc\n * A component which renders a modal with Excalidraw (a painting app)\n * which can be used to export an editable image\n */\nexport default function ExcalidrawModal({\n  closeOnClickOutside = false,\n  onSave,\n  initialElements,\n  isShown = false,\n  onHide,\n  onDelete,\n}: Props): ReactPortal | null {\n  const excalidrawRef = useRef(null);\n  const excaliDrawModelRef = useRef(null);\n  const [discardModalOpen, setDiscardModalOpen] = useState(false);\n  const [elements, setElements] =\n    useState<ReadonlyArray<ExcalidrawElementFragment>>(initialElements);\n  const { t } = useTranslation(['action']);\n\n  useEffect(() => {\n    if (excaliDrawModelRef.current !== null) {\n      excaliDrawModelRef.current.focus();\n    }\n  }, []);\n\n  useEffect(() => {\n    let modalOverlayElement = null;\n    const clickOutsideHandler = (event: MouseEvent) => {\n      const target = event.target;\n      if (\n        excaliDrawModelRef.current !== null &&\n        !excaliDrawModelRef.current.contains(target) &&\n        closeOnClickOutside\n      ) {\n        onDelete();\n      }\n    };\n    if (excaliDrawModelRef.current !== null) {\n      modalOverlayElement = excaliDrawModelRef.current?.parentElement;\n      if (modalOverlayElement !== null) {\n        modalOverlayElement?.addEventListener('click', clickOutsideHandler);\n      }\n    }\n\n    return () => {\n      if (modalOverlayElement !== null) {\n        modalOverlayElement?.removeEventListener('click', clickOutsideHandler);\n      }\n    };\n  }, [closeOnClickOutside, onDelete]);\n\n  const save = () => {\n    if (elements.filter((el) => !el.isDeleted).length > 0) {\n      onSave(elements);\n    } else {\n      // delete node if the scene is clear\n      onDelete();\n    }\n    onHide();\n  };\n\n  const discard = () => {\n    if (elements.filter((el) => !el.isDeleted).length === 0) {\n      // delete node if the scene is clear\n      onDelete();\n    } else {\n      //Otherwise, show confirmation dialog before closing\n      setDiscardModalOpen(true);\n    }\n  };\n\n  function ShowDiscardDialog(): JSX.Element {\n    return (\n      <Modal\n        title={t('action:Discard')}\n        onClose={() => {\n          setDiscardModalOpen(false);\n        }}\n        closeOnClickOutside={true}\n      >\n        {t('action:Confirm_Discard')}\n        <div className=\"ExcalidrawModal__discardModal\">\n          <Button\n            onClick={() => {\n              setDiscardModalOpen(false);\n              onHide();\n            }}\n          >\n            {t('action:Discard')}\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              setDiscardModalOpen(false);\n            }}\n          >\n            {t('action:Cancel')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  useEffect(() => {\n    excalidrawRef?.current?.updateScene({ elements: initialElements });\n  }, [initialElements]);\n\n  if (isShown === false) {\n    return null;\n  }\n\n  const onChange = (els) => {\n    setElements(els);\n  };\n\n  return createPortal(\n    <div className=\"ExcalidrawModal__overlay\" role=\"dialog\">\n      <div\n        className=\"ExcalidrawModal__modal\"\n        ref={excaliDrawModelRef}\n        tabIndex={-1}\n      >\n        <div className=\"ExcalidrawModal__row\">\n          {discardModalOpen && <ShowDiscardDialog />}\n          <Excalidraw\n            onChange={onChange}\n            initialData={{\n              appState: { isLoading: false },\n              elements: initialElements as ExcalidrawElement[],\n            }}\n          />\n          <div className=\"ExcalidrawModal__actions\">\n            <button className=\"action-button\" onClick={discard}>\n              {t('action:Discard')}\n            </button>\n            <button className=\"action-button\" onClick={save}>\n              {t('action:Save')}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>,\n    document.body\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { ExcalidrawElementFragment } from './ExcalidrawModal';\nimport type {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  EditorConfig,\n  LexicalEditor,\n  LexicalNode,\n  NodeKey,\n  SerializedLexicalNode,\n} from 'lexical';\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { useLexicalNodeSelection } from '@lexical/react/useLexicalNodeSelection';\nimport { mergeRegister } from '@lexical/utils';\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isNodeSelection,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  DecoratorNode,\n  KEY_BACKSPACE_COMMAND,\n  KEY_DELETE_COMMAND,\n} from 'lexical';\nimport { Spread } from 'libdefs/globals';\nimport * as React from 'react';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport ImageResizer from '../../ui/ImageResizer';\nimport ExcalidrawImage from './ExcalidrawImage';\nimport ExcalidrawModal from './ExcalidrawModal';\n\nfunction ExcalidrawComponent({\n  nodeKey,\n  data,\n}: {\n  data: string;\n  nodeKey: NodeKey;\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n  const [isModalOpen, setModalOpen] = useState<boolean>(\n    data === '[]' && editor.isEditable()\n  );\n  const imageContainerRef = useRef<HTMLImageElement | null>(null);\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n  const [isSelected, setSelected, clearSelection] =\n    useLexicalNodeSelection(nodeKey);\n  const [isResizing, setIsResizing] = useState<boolean>(false);\n\n  const onDelete = useCallback(\n    (payload) => {\n      if (isSelected && $isNodeSelection($getSelection())) {\n        const event: KeyboardEvent = payload;\n        event.preventDefault();\n        editor.update(() => {\n          const node = $getNodeByKey(nodeKey);\n          if ($isExcalidrawNode(node)) {\n            node.remove();\n          }\n          setSelected(false);\n        });\n      }\n      return false;\n    },\n    [editor, isSelected, nodeKey, setSelected]\n  );\n\n  // Set editor to readOnly if excalidraw is open to prevent unwanted changes\n  useEffect(() => {\n    if (isModalOpen) {\n      editor.setEditable(false);\n    } else {\n      editor.setEditable(true);\n    }\n  }, [isModalOpen, editor]);\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerCommand(\n        CLICK_COMMAND,\n        (event: MouseEvent) => {\n          const buttonElem = buttonRef.current;\n          const eventTarget = event.target;\n\n          if (isResizing) {\n            return true;\n          }\n\n          if (buttonElem !== null && buttonElem.contains(eventTarget as Node)) {\n            if (!event.shiftKey) {\n              clearSelection();\n            }\n            setSelected(!isSelected);\n            if (event.detail > 1) {\n              setModalOpen(true);\n            }\n            return true;\n          }\n\n          return false;\n        },\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_DELETE_COMMAND,\n        onDelete,\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_BACKSPACE_COMMAND,\n        onDelete,\n        COMMAND_PRIORITY_LOW\n      )\n    );\n  }, [clearSelection, editor, isSelected, isResizing, onDelete, setSelected]);\n\n  const deleteNode = useCallback(() => {\n    setModalOpen(false);\n    editor.update(() => {\n      const node = $getNodeByKey(nodeKey);\n      if ($isExcalidrawNode(node)) {\n        node.remove();\n      }\n    });\n    return true;\n  }, [editor, nodeKey]);\n\n  const setData = (newData: ReadonlyArray<ExcalidrawElementFragment>) => {\n    if (!editor.isEditable()) {\n      return;\n    }\n    return editor.update(() => {\n      const node = $getNodeByKey(nodeKey);\n      if ($isExcalidrawNode(node)) {\n        if (newData.length > 0) {\n          node.setData(JSON.stringify(newData));\n        } else {\n          node.remove();\n        }\n      }\n    });\n  };\n\n  const onResizeStart = () => {\n    setIsResizing(true);\n  };\n\n  const onResizeEnd = (nextWidth, nextHeight) => {\n    // Delay hiding the resize bars for click case\n    setTimeout(() => {\n      setIsResizing(false);\n    }, 200);\n  };\n\n  const elements = useMemo(() => JSON.parse(data), [data]);\n  return (\n    <>\n      <ExcalidrawModal\n        initialElements={elements}\n        isShown={isModalOpen}\n        onDelete={deleteNode}\n        onHide={() => {\n          editor.setEditable(true);\n          setModalOpen(false);\n        }}\n        onSave={(newData) => {\n          editor.setEditable(true);\n          setData(newData);\n          setModalOpen(false);\n        }}\n        closeOnClickOutside={true}\n      />\n      {elements.length > 0 && (\n        <button\n          ref={buttonRef}\n          className={`excalidraw-button ${isSelected ? 'selected' : ''}`}\n        >\n          <ExcalidrawImage\n            imageContainerRef={imageContainerRef}\n            className=\"image\"\n            elements={elements}\n          />\n          {(isSelected || isResizing) && (\n            <ImageResizer\n              showCaption={true}\n              setShowCaption={() => null}\n              imageRef={imageContainerRef}\n              editor={editor}\n              onResizeStart={onResizeStart}\n              onResizeEnd={onResizeEnd}\n            />\n          )}\n        </button>\n      )}\n    </>\n  );\n}\n\nexport type SerializedExcalidrawNode = Spread<\n  {\n    data: string;\n    type: 'excalidraw';\n    version: 1;\n  },\n  SerializedLexicalNode\n>;\n\nfunction convertExcalidrawElement(domNode: HTMLElement): DOMConversionOutput {\n  const excalidrawData = domNode.getAttribute('data-lexical-excalidraw-json');\n  if (excalidrawData) {\n    const node = $createExcalidrawNode();\n    node.__data = excalidrawData;\n    return {\n      node,\n    };\n  }\n  return null;\n}\n\nexport class ExcalidrawNode extends DecoratorNode<JSX.Element> {\n  __data: string;\n\n  static getType(): string {\n    return 'excalidraw';\n  }\n\n  static clone(node: ExcalidrawNode): ExcalidrawNode {\n    return new ExcalidrawNode(node.__data, node.__key);\n  }\n\n  static importJSON(serializedNode: SerializedExcalidrawNode): ExcalidrawNode {\n    return new ExcalidrawNode(serializedNode.data);\n  }\n\n  exportJSON(): SerializedExcalidrawNode {\n    return {\n      data: this.__data,\n      type: 'excalidraw',\n      version: 1,\n    };\n  }\n\n  constructor(data = '[]', key?: NodeKey) {\n    super(key);\n    this.__data = data;\n  }\n\n  // View\n  createDOM(config: EditorConfig): HTMLElement {\n    const span = document.createElement('span');\n    const theme = config.theme;\n    const className = theme.image;\n    if (className !== undefined) {\n      span.className = className;\n    }\n    return span;\n  }\n\n  updateDOM(): false {\n    return false;\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      span: (domNode: HTMLElement) => {\n        if (!domNode.hasAttribute('data-lexical-excalidraw-json')) {\n          return null;\n        }\n        return {\n          conversion: convertExcalidrawElement,\n          priority: 1,\n        };\n      },\n    };\n  }\n\n  exportDOM(editor: LexicalEditor): DOMExportOutput {\n    const element = document.createElement('span');\n    const content = editor.getElementByKey(this.getKey());\n    if (content !== null) {\n      element.innerHTML = content.querySelector('svg').outerHTML;\n    }\n    element.setAttribute('data-lexical-excalidraw-json', this.__data);\n    return { element };\n  }\n\n  setData(data: string): void {\n    const self = this.getWritable();\n    self.__data = data;\n  }\n\n  decorate(editor: LexicalEditor): JSX.Element {\n    return <ExcalidrawComponent nodeKey={this.getKey()} data={this.__data} />;\n  }\n}\n\nexport function $createExcalidrawNode(): ExcalidrawNode {\n  return new ExcalidrawNode();\n}\n\nexport function $isExcalidrawNode(\n  node: LexicalNode | null\n): node is ExcalidrawNode {\n  return node instanceof ExcalidrawNode;\n}\n","import type {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  EditorConfig,\n  LexicalEditor,\n  LexicalNode,\n  NodeKey,\n  SerializedEditor,\n  SerializedLexicalNode,\n  Spread,\n} from 'lexical';\n\nimport { createEditor, DecoratorNode } from 'lexical';\nimport * as React from 'react';\nimport { Suspense } from 'react';\n\nconst ImageComponent = React.lazy(\n  // @ts-ignore\n  () => import('./ImageComponent')\n);\n\nexport interface ImagePayload {\n  altText: string;\n  caption?: LexicalEditor;\n  height?: number;\n  key?: NodeKey;\n  maxWidth?: number;\n  showCaption?: boolean;\n  src: string;\n  width?: number;\n  captionsEnabled?: boolean;\n}\n\nfunction convertImageElement(domNode: Node): null | DOMConversionOutput {\n  if (domNode instanceof HTMLImageElement) {\n    const { alt: altText, src } = domNode;\n    const node = $createImageNode({ altText, src });\n    return { node };\n  }\n  return null;\n}\n\nexport type SerializedImageNode = Spread<\n  {\n    altText: string;\n    caption: SerializedEditor;\n    height?: number;\n    maxWidth: number;\n    showCaption: boolean;\n    src: string;\n    width?: number;\n    type: 'image';\n    version: 1;\n  },\n  SerializedLexicalNode\n>;\n\nexport class ImageNode extends DecoratorNode<JSX.Element> {\n  __src: string;\n  __altText: string;\n  __width: 'inherit' | number;\n  __height: 'inherit' | number;\n  __maxWidth: number;\n  __showCaption: boolean;\n  __caption: LexicalEditor;\n  // Captions cannot yet be used within editor cells\n  __captionsEnabled: boolean;\n\n  static getType(): string {\n    return 'image';\n  }\n\n  static clone(node: ImageNode): ImageNode {\n    return new ImageNode(\n      node.__src,\n      node.__altText,\n      node.__maxWidth,\n      node.__width,\n      node.__height,\n      node.__showCaption,\n      node.__caption,\n      node.__captionsEnabled,\n      node.__key\n    );\n  }\n\n  static importJSON(serializedNode: SerializedImageNode): ImageNode {\n    const { altText, height, width, maxWidth, caption, src, showCaption } =\n      serializedNode;\n    const node = $createImageNode({\n      altText,\n      height,\n      maxWidth,\n      showCaption,\n      src,\n      width,\n    });\n    const nestedEditor = node.__caption;\n    const editorState = nestedEditor.parseEditorState(caption.editorState);\n    if (!editorState.isEmpty()) {\n      nestedEditor.setEditorState(editorState);\n    }\n    return node;\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement('img');\n    element.setAttribute('src', this.__src);\n    element.setAttribute('alt', this.__altText);\n    return { element };\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      img: (node: Node) => ({\n        conversion: convertImageElement,\n        priority: 0,\n      }),\n    };\n  }\n\n  constructor(\n    src: string,\n    altText: string,\n    maxWidth: number,\n    width?: 'inherit' | number,\n    height?: 'inherit' | number,\n    showCaption?: boolean,\n    caption?: LexicalEditor,\n    captionsEnabled?: boolean,\n    key?: NodeKey\n  ) {\n    super(key);\n    this.__src = src;\n    this.__altText = altText;\n    this.__maxWidth = maxWidth;\n    this.__width = width || 'inherit';\n    this.__height = height || 'inherit';\n    this.__showCaption = showCaption || false;\n    this.__caption = caption || createEditor();\n    this.__captionsEnabled = captionsEnabled || captionsEnabled === undefined;\n  }\n\n  exportJSON(): SerializedImageNode {\n    return {\n      altText: this.getAltText(),\n      caption: this.__caption.toJSON(),\n      height: this.__height === 'inherit' ? 0 : this.__height,\n      maxWidth: this.__maxWidth,\n      showCaption: this.__showCaption,\n      src: this.getSrc(),\n      type: 'image',\n      version: 1,\n      width: this.__width === 'inherit' ? 0 : this.__width,\n    };\n  }\n\n  setWidthAndHeight(\n    width: 'inherit' | number,\n    height: 'inherit' | number\n  ): void {\n    const writable = this.getWritable();\n    writable.__width = width;\n    writable.__height = height;\n  }\n\n  setShowCaption(showCaption: boolean): void {\n    const writable = this.getWritable();\n    writable.__showCaption = showCaption;\n  }\n\n  // View\n\n  createDOM(config: EditorConfig): HTMLElement {\n    const span = document.createElement('span');\n    const theme = config.theme;\n    const className = theme.image;\n    if (className !== undefined) {\n      span.className = className;\n    }\n    return span;\n  }\n\n  updateDOM(): false {\n    return false;\n  }\n\n  getSrc(): string {\n    return this.__src;\n  }\n\n  getAltText(): string {\n    return this.__altText;\n  }\n\n  decorate(): JSX.Element {\n    return (\n      <Suspense fallback={null}>\n        <ImageComponent\n          src={this.__src}\n          altText={this.__altText}\n          width={this.__width}\n          height={this.__height}\n          maxWidth={this.__maxWidth}\n          nodeKey={this.getKey()}\n          showCaption={this.__showCaption}\n          caption={this.__caption}\n          captionsEnabled={this.__captionsEnabled}\n          resizable={true}\n        />\n      </Suspense>\n    );\n  }\n}\n\nexport function $createImageNode({\n  altText,\n  height,\n  maxWidth = 500,\n  captionsEnabled,\n  src,\n  width,\n  showCaption,\n  caption,\n  key,\n}: ImagePayload): ImageNode {\n  return new ImageNode(\n    src,\n    altText,\n    maxWidth,\n    width,\n    height,\n    showCaption,\n    caption,\n    captionsEnabled,\n    key\n  );\n}\n\nexport function $isImageNode(\n  node: LexicalNode | null | undefined\n): node is ImageNode {\n  return node instanceof ImageNode;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { EditorConfig, LexicalNode } from 'lexical';\n\nimport SerializedTextNode from 'lexical';\n\nimport { Spread } from 'globals';\nimport { TextNode } from 'lexical';\n\nexport type SerializedKeywordNode = Spread<\n  {\n    type: 'keyword';\n    version: 1;\n  },\n  typeof SerializedTextNode\n>;\n\nexport class KeywordNode extends TextNode {\n  static getType(): string {\n    return 'keyword';\n  }\n\n  static clone(node: KeywordNode): KeywordNode {\n    return new KeywordNode(node.__text, node.__key);\n  }\n\n  static importJSON(serializedNode: SerializedKeywordNode): KeywordNode {\n    const node = $createKeywordNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n\n  exportJSON(): SerializedKeywordNode {\n    return {\n      ...super.exportJSON(),\n      type: 'keyword',\n      version: 1,\n    };\n  }\n\n  createDOM(config: EditorConfig): HTMLElement {\n    const dom = super.createDOM(config);\n    dom.style.cursor = 'default';\n    dom.className = 'keyword';\n    return dom;\n  }\n\n  canInsertTextBefore(): boolean {\n    return false;\n  }\n\n  canInsertTextAfter(): boolean {\n    return false;\n  }\n\n  isTextEntity(): true {\n    return true;\n  }\n}\n\nexport function $createKeywordNode(keyword: string): KeywordNode {\n  return new KeywordNode(keyword);\n}\n\nexport function $isKeywordNode(\n  node: LexicalNode | null | undefined | undefined\n): boolean {\n  return node instanceof KeywordNode;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { EditorConfig, LexicalNode, NodeKey } from 'lexical';\n\nimport SerializedTextNode from 'lexical';\n\nimport { Spread } from 'globals';\nimport { TextNode } from 'lexical';\n\nexport type SerializedMentionNode = Spread<\n  {\n    mentionName: string;\n    type: 'mention';\n    version: 1;\n  },\n  typeof SerializedTextNode\n>;\n\nconst mentionStyle = 'background-color: rgba(24, 119, 232, 0.2)';\nexport class MentionNode extends TextNode {\n  __mention: string;\n\n  static getType(): string {\n    return 'mention';\n  }\n\n  static clone(node: MentionNode): MentionNode {\n    return new MentionNode(node.__mention, node.__text, node.__key);\n  }\n  static importJSON(serializedNode: SerializedMentionNode): MentionNode {\n    const node = $createMentionNode(serializedNode.mentionName);\n    node.setTextContent(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n\n  constructor(mentionName: string, text?: string, key?: NodeKey) {\n    super(text ?? mentionName, key);\n    this.__mention = mentionName;\n  }\n\n  exportJSON(): SerializedMentionNode {\n    return {\n      ...super.exportJSON(),\n      mentionName: this.__mention,\n      type: 'mention',\n      version: 1,\n    };\n  }\n\n  createDOM(config: EditorConfig): HTMLElement {\n    const dom = super.createDOM(config);\n    dom.style.cssText = mentionStyle;\n    dom.className = 'mention';\n    return dom;\n  }\n\n  isTextEntity(): true {\n    return true;\n  }\n}\n\nexport function $createMentionNode(mentionName: string): MentionNode {\n  const mentionNode = new MentionNode(mentionName);\n  mentionNode.setMode('segmented').toggleDirectionless();\n  return mentionNode;\n}\n\nexport function $isMentionNode(\n  node: LexicalNode | null | undefined\n): node is MentionNode {\n  return node instanceof MentionNode;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  LexicalNode,\n  NodeKey,\n  SerializedLexicalNode,\n} from 'lexical';\n\nimport './PollNode.css';\n\nimport { useCollaborationContext } from '@lexical/react/LexicalCollaborationContext';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { $getNodeByKey, DecoratorNode } from 'lexical';\nimport { Spread } from 'libdefs/globals';\nimport * as React from 'react';\nimport { useMemo, useRef } from 'react';\n\nimport Button from '../ui/Button';\nimport joinClasses from '../utils/join-classes';\n\ntype Options = ReadonlyArray<Option>;\n\ntype Option = Readonly<{\n  text: string;\n  uid: string;\n  votes: Array<number>;\n}>;\n\nfunction createUID(): string {\n  return Math.random()\n    .toString(36)\n    .replace(/[^a-z]+/g, '')\n    .substr(0, 5);\n}\n\nfunction createPollOption(text = ''): Option {\n  return {\n    text,\n    uid: createUID(),\n    votes: [],\n  };\n}\n\nfunction cloneOption(\n  option: Option,\n  text: string,\n  votes?: Array<number>\n): Option {\n  return {\n    text,\n    uid: option.uid,\n    votes: votes || Array.from(option.votes),\n  };\n}\n\nfunction getTotalVotes(options: Options): number {\n  return options.reduce((totalVotes, next) => {\n    return totalVotes + next.votes.length;\n  }, 0);\n}\n\nfunction PollOptionComponent({\n  option,\n  index,\n  options,\n  totalVotes,\n  withPollNode,\n}: {\n  index: number;\n  option: Option;\n  options: Options;\n  totalVotes: number;\n  withPollNode: (cb: (PollNode) => void) => void;\n}): JSX.Element {\n  const { clientID } = useCollaborationContext();\n  const checkboxRef = useRef(null);\n  const votesArray = option.votes;\n  const checkedIndex = votesArray.indexOf(clientID);\n  const checked = checkedIndex !== -1;\n  const votes = votesArray.length;\n  const text = option.text;\n\n  return (\n    <div className=\"PollNode__optionContainer\">\n      <div\n        className={joinClasses(\n          'PollNode__optionCheckboxWrapper',\n          checked && 'PollNode__optionCheckboxChecked'\n        )}\n      >\n        <input\n          ref={checkboxRef}\n          className=\"PollNode__optionCheckbox\"\n          type=\"checkbox\"\n          onChange={(e) => {\n            withPollNode((node) => {\n              node.toggleVote(option, clientID);\n            });\n          }}\n          checked={checked}\n        />\n      </div>\n      <div className=\"PollNode__optionInputWrapper\">\n        <div\n          className=\"PollNode__optionInputVotes\"\n          style={{ width: `${votes === 0 ? 0 : (votes / totalVotes) * 100}%` }}\n        />\n        <span className=\"PollNode__optionInputVotesCount\">\n          {votes > 0 && (votes === 1 ? '1 vote' : `${votes} votes`)}\n        </span>\n        <input\n          className=\"PollNode__optionInput\"\n          type=\"text\"\n          value={text}\n          onChange={(e) => {\n            withPollNode((node) => {\n              node.setOptionText(option, e.target.value);\n            });\n          }}\n          placeholder={`Option ${index + 1}`}\n        />\n      </div>\n      <button\n        disabled={options.length < 3}\n        className={joinClasses(\n          'PollNode__optionDelete',\n          options.length < 3 && 'PollNode__optionDeleteDisabled'\n        )}\n        arial-label=\"Remove\"\n        onClick={() => {\n          withPollNode((node) => {\n            node.deleteOption(option);\n          });\n        }}\n      />\n    </div>\n  );\n}\n\nfunction PollComponent({\n  question,\n  options,\n  nodeKey,\n}: {\n  nodeKey: NodeKey;\n  options: Options;\n  question: string;\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n  const totalVotes = useMemo(() => getTotalVotes(options), [options]);\n\n  const withPollNode = (cb: (node: PollNode) => void): void => {\n    editor.update(() => {\n      const node = $getNodeByKey(nodeKey);\n      if ($isPollNode(node)) {\n        cb(node);\n      }\n    });\n  };\n\n  const addOption = () => {\n    withPollNode((node) => {\n      node.addOption(createPollOption());\n    });\n  };\n\n  return (\n    <div className=\"PollNode__container\">\n      <h2 className=\"PollNode__heading\">{question}</h2>\n      {options.map((option, index) => {\n        const key = option.uid;\n        return (\n          <PollOptionComponent\n            key={key}\n            withPollNode={withPollNode}\n            option={option}\n            index={index}\n            options={options}\n            totalVotes={totalVotes}\n          />\n        );\n      })}\n      <div className=\"PollNode__footer\">\n        <Button onClick={addOption} small={true}>\n          Add Option\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport type SerializedPollNode = Spread<\n  {\n    question: string;\n    options: Options;\n    type: 'poll';\n    version: 1;\n  },\n  SerializedLexicalNode\n>;\n\nfunction convertPollElement(domNode: HTMLElement): DOMConversionOutput {\n  const question = domNode.getAttribute('data-lexical-poll-question');\n  const node = $createPollNode(question);\n  return { node };\n}\n\nexport class PollNode extends DecoratorNode<JSX.Element> {\n  __question: string;\n  __options: Options;\n\n  static getType(): string {\n    return 'poll';\n  }\n\n  static clone(node: PollNode): PollNode {\n    return new PollNode(node.__question, node.__options, node.__key);\n  }\n\n  static importJSON(serializedNode: SerializedPollNode): PollNode {\n    const node = $createPollNode(serializedNode.question);\n    serializedNode.options.forEach(node.addOption);\n    return node;\n  }\n\n  constructor(question: string, options?: Options, key?: NodeKey) {\n    super(key);\n    this.__question = question;\n    this.__options = options || [createPollOption(), createPollOption()];\n  }\n\n  exportJSON(): SerializedPollNode {\n    return {\n      options: this.__options,\n      question: this.__question,\n      type: 'poll',\n      version: 1,\n    };\n  }\n\n  addOption(option: Option): void {\n    const self = this.getWritable();\n    const options = Array.from(self.__options);\n    options.push(option);\n    self.__options = options;\n  }\n\n  deleteOption(option: Option): void {\n    const self = this.getWritable();\n    const options = Array.from(self.__options);\n    const index = options.indexOf(option);\n    options.splice(index, 1);\n    self.__options = options;\n  }\n\n  setOptionText(option: Option, text: string): void {\n    const self = this.getWritable();\n    const clonedOption = cloneOption(option, text);\n    const options = Array.from(self.__options);\n    const index = options.indexOf(option);\n    options[index] = clonedOption;\n    self.__options = options;\n  }\n\n  toggleVote(option: Option, clientID: number): void {\n    const self = this.getWritable();\n    const votes = option.votes;\n    const votesClone = Array.from(votes);\n    const voteIndex = votes.indexOf(clientID);\n    if (voteIndex === -1) {\n      votesClone.push(clientID);\n    } else {\n      votesClone.splice(voteIndex, 1);\n    }\n    const clonedOption = cloneOption(option, option.text, votesClone);\n    const options = Array.from(self.__options);\n    const index = options.indexOf(option);\n    options[index] = clonedOption;\n    self.__options = options;\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      span: (domNode: HTMLElement) => {\n        if (!domNode.hasAttribute('data-lexical-poll-question')) {\n          return null;\n        }\n        return {\n          conversion: convertPollElement,\n          priority: 2,\n        };\n      },\n    };\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement('span');\n    element.setAttribute('data-lexical-poll-question', this.__question);\n    return { element };\n  }\n\n  createDOM(): HTMLElement {\n    const elem = document.createElement('span');\n    elem.style.display = 'inline-block';\n    return elem;\n  }\n\n  updateDOM(): false {\n    return false;\n  }\n\n  decorate(): JSX.Element {\n    return (\n      <PollComponent\n        question={this.__question}\n        options={this.__options}\n        nodeKey={this.__key}\n      />\n    );\n  }\n}\n\nexport function $createPollNode(question: string): PollNode {\n  return new PollNode(question);\n}\n\nexport function $isPollNode(\n  node: LexicalNode | null | undefined\n): node is PollNode {\n  return node instanceof PollNode;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\nexport const CAN_USE_DOM: boolean =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined';\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\nimport { useEffect, useLayoutEffect } from 'react';\nimport { CAN_USE_DOM } from './canUseDOM';\n\nconst useLayoutEffectImpl: typeof useLayoutEffect = CAN_USE_DOM\n  ? useLayoutEffect\n  : useEffect;\n\nexport default useLayoutEffectImpl;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {Provider} from '@lexical/yjs';\nimport { WebsocketProvider } from 'y-websocket';\nimport { Doc } from 'yjs';\n\nconst url = new URL(window.location.href);\nconst params = new URLSearchParams(url.search);\nconst WEBSOCKET_ENDPOINT = 'ws://localhost:1234';\nconst WEBSOCKET_SLUG = 'playground';\nconst WEBSOCKET_ID = params.get('collabId') || '0';\n\n// parent dom -> child doc\nexport function createWebsocketProvider(\n  id: string,\n  yjsDocMap: Map<string, Doc>\n): Provider {\n  let doc = yjsDocMap.get(id);\n\n  if (doc === undefined) {\n    doc = new Doc();\n    yjsDocMap.set(id, doc);\n  } else {\n    doc.load();\n  }\n\n  \n  // @ts-ignore\n  return new WebsocketProvider(\n    WEBSOCKET_ENDPOINT,\n    WEBSOCKET_SLUG + '/' + WEBSOCKET_ID + '/' + id,\n    doc,\n    {\n      connect: false,\n    }\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { HistoryState } from '@lexical/react/LexicalHistoryPlugin';\n\nimport { createEmptyHistoryState } from '@lexical/react/LexicalHistoryPlugin';\nimport * as React from 'react';\nimport { createContext, useContext, useMemo } from 'react';\n\ntype ContextShape = {\n  historyState: HistoryState;\n};\n\nconst Context: React.Context<ContextShape> = createContext({\n  historyState: { current: null, redoStack: [], undoStack: [] },\n});\n\nexport const SharedHistoryContext = ({\n  children,\n}: {\n  children: JSX.Element | string | (JSX.Element | string)[];\n}): JSX.Element => {\n  const historyContext = useMemo(\n    () => ({ historyState: createEmptyHistoryState() }),\n    []\n  );\n  return <Context.Provider value={historyContext}>{children}</Context.Provider>;\n};\n\nexport const useSharedHistoryContext = (): ContextShape => {\n  return useContext(Context);\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { EditorThemeClasses } from 'lexical';\n\nimport './PlaygroundEditorTheme.css';\n\nconst theme: EditorThemeClasses = {\n  characterLimit: 'PlaygroundEditorTheme__characterLimit',\n  code: 'PlaygroundEditorTheme__code',\n  codeHighlight: {\n    atrule: 'PlaygroundEditorTheme__tokenAttr',\n    attr: 'PlaygroundEditorTheme__tokenAttr',\n    boolean: 'PlaygroundEditorTheme__tokenProperty',\n    builtin: 'PlaygroundEditorTheme__tokenSelector',\n    cdata: 'PlaygroundEditorTheme__tokenComment',\n    char: 'PlaygroundEditorTheme__tokenSelector',\n    class: 'PlaygroundEditorTheme__tokenFunction',\n    'class-name': 'PlaygroundEditorTheme__tokenFunction',\n    comment: 'PlaygroundEditorTheme__tokenComment',\n    constant: 'PlaygroundEditorTheme__tokenProperty',\n    deleted: 'PlaygroundEditorTheme__tokenProperty',\n    doctype: 'PlaygroundEditorTheme__tokenComment',\n    entity: 'PlaygroundEditorTheme__tokenOperator',\n    function: 'PlaygroundEditorTheme__tokenFunction',\n    important: 'PlaygroundEditorTheme__tokenVariable',\n    inserted: 'PlaygroundEditorTheme__tokenSelector',\n    keyword: 'PlaygroundEditorTheme__tokenAttr',\n    namespace: 'PlaygroundEditorTheme__tokenVariable',\n    number: 'PlaygroundEditorTheme__tokenProperty',\n    operator: 'PlaygroundEditorTheme__tokenOperator',\n    prolog: 'PlaygroundEditorTheme__tokenComment',\n    property: 'PlaygroundEditorTheme__tokenProperty',\n    punctuation: 'PlaygroundEditorTheme__tokenPunctuation',\n    regex: 'PlaygroundEditorTheme__tokenVariable',\n    selector: 'PlaygroundEditorTheme__tokenSelector',\n    string: 'PlaygroundEditorTheme__tokenSelector',\n    symbol: 'PlaygroundEditorTheme__tokenProperty',\n    tag: 'PlaygroundEditorTheme__tokenProperty',\n    url: 'PlaygroundEditorTheme__tokenOperator',\n    variable: 'PlaygroundEditorTheme__tokenVariable',\n  },\n  hashtag: 'PlaygroundEditorTheme__hashtag',\n  heading: {\n    h1: 'PlaygroundEditorTheme__h1',\n    h2: 'PlaygroundEditorTheme__h2',\n    h3: 'PlaygroundEditorTheme__h3',\n    h4: 'PlaygroundEditorTheme__h4',\n    h5: 'PlaygroundEditorTheme__h5',\n  },\n  image: 'editor-image',\n  link: 'PlaygroundEditorTheme__link',\n  list: {\n    listitem: 'PlaygroundEditorTheme__listItem',\n    listitemChecked: 'PlaygroundEditorTheme__listItemChecked',\n    listitemUnchecked: 'PlaygroundEditorTheme__listItemUnchecked',\n    nested: {\n      listitem: 'PlaygroundEditorTheme__nestedListItem',\n    },\n    olDepth: [\n      'PlaygroundEditorTheme__ol1',\n      'PlaygroundEditorTheme__ol2',\n      'PlaygroundEditorTheme__ol3',\n      'PlaygroundEditorTheme__ol4',\n      'PlaygroundEditorTheme__ol5',\n    ],\n    ul: 'PlaygroundEditorTheme__ul',\n  },\n  ltr: 'PlaygroundEditorTheme__ltr',\n  mark: 'PlaygroundEditorTheme__mark',\n  markOverlap: 'PlaygroundEditorTheme__markOverlap',\n  paragraph: 'PlaygroundEditorTheme__paragraph',\n  quote: 'PlaygroundEditorTheme__quote',\n  rtl: 'PlaygroundEditorTheme__rtl',\n  table: 'PlaygroundEditorTheme__table',\n  tableCell: 'PlaygroundEditorTheme__tableCell',\n  tableCellHeader: 'PlaygroundEditorTheme__tableCellHeader',\n  text: {\n    bold: 'PlaygroundEditorTheme__textBold',\n    code: 'PlaygroundEditorTheme__textCode',\n    italic: 'PlaygroundEditorTheme__textItalic',\n    strikethrough: 'PlaygroundEditorTheme__textStrikethrough',\n    subscript: 'PlaygroundEditorTheme__textSubscript',\n    superscript: 'PlaygroundEditorTheme__textSuperscript',\n    underline: 'PlaygroundEditorTheme__textUnderline',\n    underlineStrikethrough: 'PlaygroundEditorTheme__textUnderlineStrikethrough',\n  },\n};\n\nexport default theme;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { EditorThemeClasses } from 'lexical';\n\nimport './StickyEditorTheme.css';\n\nimport baseTheme from './PlaygroundEditorTheme';\n\nconst theme: EditorThemeClasses = {\n  ...baseTheme,\n  paragraph: 'StickyEditorTheme__paragraph',\n};\n\nexport default theme;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport './ContentEditable.css';\n\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport * as React from 'react';\n\nexport default function LexicalContentEditable({\n  className,\n}: {\n  className?: string;\n}): JSX.Element {\n  return <ContentEditable className={className || 'ContentEditable__root'} />;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport './Placeholder.css';\n\nimport * as React from 'react';\n\nexport default function Placeholder({\n  children,\n  className,\n}: {\n  children: JSX.Element | string | (JSX.Element | string)[];\n  className?: string;\n}): JSX.Element {\n  return <div className={className || 'Placeholder__root'}>{children}</div>;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {\n  EditorConfig,\n  LexicalEditor,\n  LexicalNode,\n  NodeKey,\n  SerializedLexicalNode,\n} from 'lexical';\n\nimport './StickyNode.css';\n\nimport { CollaborationPlugin } from '@lexical/react/LexicalCollaborationPlugin';\n\nimport { useCollaborationContext } from '@lexical/react/LexicalCollaborationContext';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\nimport { LexicalNestedComposer } from '@lexical/react/LexicalNestedComposer';\nimport { PlainTextPlugin } from '@lexical/react/LexicalPlainTextPlugin';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\nimport {\n  $getNodeByKey,\n  $setSelection,\n  createEditor,\n  DecoratorNode,\n} from 'lexical';\nimport { Spread } from 'libdefs/globals';\nimport * as React from 'react';\nimport { useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport useLayoutEffect from '../shared/src/useLayoutEffect';\n\nimport { createWebsocketProvider } from '../collaboration';\nimport { useSharedHistoryContext } from '../context/SharedHistoryContext';\nimport StickyEditorTheme from '../themes/StickyEditorTheme';\nimport ContentEditable from '../ui/ContentEditable';\nimport Placeholder from '../ui/Placeholder';\n\nfunction positionSticky(stickyElem: HTMLElement, positioning): void {\n  const style = stickyElem.style;\n  const rootElementRect = positioning.rootElementRect;\n  const rectLeft = rootElementRect !== null ? rootElementRect.left : 0;\n  const rectTop = rootElementRect !== null ? rootElementRect.top : 0;\n  style.top = rectTop + positioning.y + 'px';\n  style.left = rectLeft + positioning.x + 'px';\n}\n\nfunction StickyComponent({\n  x,\n  y,\n  nodeKey,\n  color,\n  caption,\n}: {\n  caption: LexicalEditor;\n  color: 'pink' | 'yellow';\n  nodeKey: NodeKey;\n  x: number;\n  y: number;\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n  const stickyContainerRef = useRef<null | HTMLDivElement>(null);\n  const positioningRef = useRef<{\n    isDragging: boolean;\n    offsetX: number;\n    offsetY: number;\n    rootElementRect: null | ClientRect;\n    x: number;\n    y: number;\n  }>({\n    isDragging: false,\n    offsetX: 0,\n    offsetY: 0,\n    rootElementRect: null,\n    x: 0,\n    y: 0,\n  });\n  const { yjsDocMap } = useCollaborationContext();\n  const isCollab = yjsDocMap.get('main') !== undefined;\n\n  useEffect(() => {\n    const position = positioningRef.current;\n    position.x = x;\n    position.y = y;\n\n    const stickyContainer = stickyContainerRef.current;\n    if (stickyContainer !== null) {\n      positionSticky(stickyContainer, position);\n    }\n  }, [x, y]);\n\n  useLayoutEffect(() => {\n    const position = positioningRef.current;\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n        const { target } = entry;\n        position.rootElementRect = target.getBoundingClientRect();\n        const stickyContainer = stickyContainerRef.current;\n        if (stickyContainer !== null) {\n          positionSticky(stickyContainer, position);\n        }\n      }\n    });\n\n    const removeRootListener = editor.registerRootListener(\n      (nextRootElem, prevRootElem) => {\n        if (prevRootElem !== null) {\n          resizeObserver.unobserve(prevRootElem);\n        }\n        if (nextRootElem !== null) {\n          resizeObserver.observe(nextRootElem);\n        }\n      }\n    );\n\n    const handleWindowResize = () => {\n      const rootElement = editor.getRootElement();\n      const stickyContainer = stickyContainerRef.current;\n      if (rootElement !== null && stickyContainer !== null) {\n        position.rootElementRect = rootElement.getBoundingClientRect();\n        positionSticky(stickyContainer, position);\n      }\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n      removeRootListener();\n    };\n  }, [editor]);\n\n  useEffect(() => {\n    const stickyContainer = stickyContainerRef.current;\n    if (stickyContainer !== null) {\n      // Delay adding transition so we don't trigger the\n      // transition on load of the sticky.\n      setTimeout(() => {\n        stickyContainer.style.setProperty(\n          'transition',\n          'top 0.3s ease 0s, left 0.3s ease 0s'\n        );\n      }, 500);\n    }\n  }, []);\n\n  const handlePointerMove = (event: PointerEvent) => {\n    const stickyContainer = stickyContainerRef.current;\n    const positioning = positioningRef.current;\n    const rootElementRect = positioning.rootElementRect;\n    if (\n      stickyContainer !== null &&\n      positioning.isDragging &&\n      rootElementRect !== null\n    ) {\n      positioning.x = event.pageX - positioning.offsetX - rootElementRect.left;\n      positioning.y = event.pageY - positioning.offsetY - rootElementRect.top;\n      positionSticky(stickyContainer, positioning);\n    }\n  };\n\n  const handlePointerUp = (event: PointerEvent) => {\n    const stickyContainer = stickyContainerRef.current;\n    const positioning = positioningRef.current;\n    if (stickyContainer !== null) {\n      positioning.isDragging = false;\n      stickyContainer.classList.remove('dragging');\n      editor.update(() => {\n        const node = $getNodeByKey(nodeKey);\n        if ($isStickyNode(node)) {\n          node.setPosition(positioning.x, positioning.y);\n        }\n      });\n    }\n    document.removeEventListener('pointermove', handlePointerMove);\n    document.removeEventListener('pointerup', handlePointerUp);\n  };\n\n  const handleDelete = () => {\n    editor.update(() => {\n      const node = $getNodeByKey(nodeKey);\n      if ($isStickyNode(node)) {\n        node.remove();\n      }\n    });\n  };\n\n  const handleColorChange = () => {\n    editor.update(() => {\n      const node = $getNodeByKey(nodeKey);\n      if ($isStickyNode(node)) {\n        node.toggleColor();\n      }\n    });\n  };\n\n  const { historyState } = useSharedHistoryContext();\n\n  return (\n    <div ref={stickyContainerRef} className=\"sticky-note-container\">\n      <div\n        className={`sticky-note ${color}`}\n        onPointerDown={(event) => {\n          const stickyContainer = stickyContainerRef.current;\n          if (\n            stickyContainer == null ||\n            event.button === 2 ||\n            event.target !== stickyContainer.firstChild\n          ) {\n            // Right click or click on editor should not work\n            return;\n          }\n          const stickContainer = stickyContainer;\n          const positioning = positioningRef.current;\n          if (stickContainer !== null) {\n            const { top, left } = stickContainer.getBoundingClientRect();\n            positioning.offsetX = event.clientX - left;\n            positioning.offsetY = event.clientY - top;\n            positioning.isDragging = true;\n            stickContainer.classList.add('dragging');\n            document.addEventListener('pointermove', handlePointerMove);\n            document.addEventListener('pointerup', handlePointerUp);\n            event.preventDefault();\n          }\n        }}\n      >\n        <button\n          onClick={handleDelete}\n          className=\"delete\"\n          aria-label=\"Delete sticky note\"\n          title=\"Delete\"\n        >\n          X\n        </button>\n        <button\n          onClick={handleColorChange}\n          className=\"color\"\n          aria-label=\"Change sticky note color\"\n          title=\"Color\"\n        >\n          <i className=\"bucket\" />\n        </button>\n        <LexicalNestedComposer\n          initialEditor={caption}\n          initialTheme={StickyEditorTheme}\n        >\n          {isCollab ? (\n            <CollaborationPlugin\n              id={caption.getKey()}\n              providerFactory={createWebsocketProvider}\n              shouldBootstrap={true}\n            />\n          ) : (\n            <HistoryPlugin externalHistoryState={historyState} />\n          )}\n          <PlainTextPlugin\n            contentEditable={\n              <ContentEditable className=\"StickyNode__contentEditable\" />\n            }\n            placeholder={\n              <Placeholder className=\"StickyNode__placeholder\">\n                What's up?\n              </Placeholder>\n            }\n            ErrorBoundary={LexicalErrorBoundary}\n          />\n        </LexicalNestedComposer>\n      </div>\n    </div>\n  );\n}\n\ntype StickyNoteColor = 'pink' | 'yellow';\n\nexport type SerializedStickyNode = Spread<\n  {\n    xOffset: number;\n    yOffset: number;\n    color: StickyNoteColor;\n    caption: LexicalEditor;\n    type: 'sticky';\n    version: 1;\n  },\n  SerializedLexicalNode\n>;\n\nexport class StickyNode extends DecoratorNode<JSX.Element> {\n  __x: number;\n  __y: number;\n  __color: StickyNoteColor;\n  __caption: LexicalEditor;\n\n  static getType(): string {\n    return 'sticky';\n  }\n\n  static clone(node: StickyNode): StickyNode {\n    return new StickyNode(\n      node.__x,\n      node.__y,\n      node.__color,\n      node.__caption,\n      node.__key\n    );\n  }\n  static importJSON(serializedNode: SerializedStickyNode): StickyNode {\n    return new StickyNode(\n      serializedNode.xOffset,\n      serializedNode.yOffset,\n      serializedNode.color,\n      serializedNode.caption\n    );\n  }\n\n  constructor(\n    x: number,\n    y: number,\n    color: 'pink' | 'yellow',\n    caption?: LexicalEditor,\n    key?: NodeKey\n  ) {\n    super(key);\n    this.__x = x;\n    this.__y = y;\n    this.__caption = caption || createEditor();\n    this.__color = color;\n  }\n\n  exportJSON(): SerializedStickyNode {\n    return {\n      caption: this.__caption,\n      color: this.__color,\n      type: 'sticky',\n      version: 1,\n      xOffset: this.__x,\n      yOffset: this.__y,\n    };\n  }\n\n  createDOM(config: EditorConfig): HTMLElement {\n    const div = document.createElement('div');\n    div.style.display = 'contents';\n    return div;\n  }\n\n  updateDOM(): false {\n    return false;\n  }\n\n  setPosition(x: number, y: number): void {\n    const writable = this.getWritable();\n    writable.__x = x;\n    writable.__y = y;\n    $setSelection(null);\n  }\n\n  toggleColor(): void {\n    const writable = this.getWritable();\n    writable.__color = writable.__color === 'pink' ? 'yellow' : 'pink';\n  }\n\n  decorate(editor: LexicalEditor): JSX.Element {\n    return createPortal(\n      <StickyComponent\n        color={this.__color}\n        x={this.__x}\n        y={this.__y}\n        nodeKey={this.getKey()}\n        caption={this.__caption}\n      />,\n      document.body\n    );\n  }\n\n  isIsolated(): true {\n    return true;\n  }\n}\n\nexport function $isStickyNode(\n  node: LexicalNode | null | undefined\n): node is StickyNode {\n  return node instanceof StickyNode;\n}\n\nexport function $createStickyNode(\n  xOffset: number,\n  yOffset: number\n): StickyNode {\n  return new StickyNode(xOffset, yOffset, 'yellow');\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  EditorConfig,\n  ElementFormatType,\n  LexicalEditor,\n  LexicalNode,\n  NodeKey,\n  Spread,\n} from 'lexical';\n\nimport { BlockWithAlignableContents } from '@lexical/react/LexicalBlockWithAlignableContents';\nimport {\n  DecoratorBlockNode,\n  SerializedDecoratorBlockNode,\n} from '@lexical/react/LexicalDecoratorBlockNode';\nimport * as React from 'react';\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\nconst WIDGET_SCRIPT_URL = 'https://platform.twitter.com/widgets.js';\n\ntype TweetComponentProps = Readonly<{\n  className: Readonly<{\n    base: string;\n    focus: string;\n  }>;\n  format: ElementFormatType | null;\n  loadingComponent?: JSX.Element | string;\n  nodeKey: NodeKey;\n  onError?: (error: string) => void;\n  onLoad?: () => void;\n  tweetID: string;\n}>;\n\nfunction convertTweetElement(\n  domNode: HTMLDivElement\n): DOMConversionOutput | null {\n  const id = domNode.getAttribute('data-lexical-tweet-id');\n  if (id) {\n    const node = $createTweetNode(id);\n    return { node };\n  }\n  return null;\n}\n\nlet isTwitterScriptLoading = true;\n\nfunction TweetComponent({\n  className,\n  format,\n  loadingComponent,\n  nodeKey,\n  onError,\n  onLoad,\n  tweetID,\n}: TweetComponentProps) {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n\n  const previousTweetIDRef = useRef<string>('');\n  const [isTweetLoading, setIsTweetLoading] = useState(false);\n\n  const createTweet = useCallback(async () => {\n    try {\n      // @ts-expect-error Twitter is attached to the window.\n      await window.twttr.widgets.createTweet(tweetID, containerRef.current);\n\n      setIsTweetLoading(false);\n      isTwitterScriptLoading = false;\n\n      if (onLoad) {\n        onLoad();\n      }\n    } catch (error) {\n      if (onError) {\n        onError(String(error));\n      }\n    }\n  }, [onError, onLoad, tweetID]);\n\n  useEffect(() => {\n    if (tweetID !== previousTweetIDRef.current) {\n      setIsTweetLoading(true);\n\n      if (isTwitterScriptLoading) {\n        const script = document.createElement('script');\n        script.src = WIDGET_SCRIPT_URL;\n        script.async = true;\n        document.body?.appendChild(script);\n        script.onload = createTweet;\n        if (onError) {\n          script.onerror = onError as OnErrorEventHandler;\n        }\n      } else {\n        createTweet();\n      }\n\n      if (previousTweetIDRef) {\n        previousTweetIDRef.current = tweetID;\n      }\n    }\n  }, [createTweet, onError, tweetID]);\n\n  return (\n    <BlockWithAlignableContents\n      className={className}\n      format={format}\n      nodeKey={nodeKey}\n    >\n      {isTweetLoading ? loadingComponent : null}\n      <div\n        style={{ display: 'inline-block', width: '550px' }}\n        ref={containerRef}\n      />\n    </BlockWithAlignableContents>\n  );\n}\n\nexport type SerializedTweetNode = Spread<\n  {\n    id: string;\n    type: 'tweet';\n    version: 1;\n  },\n  SerializedDecoratorBlockNode\n>;\n\nexport class TweetNode extends DecoratorBlockNode {\n  __id: string;\n\n  static getType(): string {\n    return 'tweet';\n  }\n\n  static clone(node: TweetNode): TweetNode {\n    return new TweetNode(node.__id, node.__format, node.__key);\n  }\n\n  static importJSON(serializedNode: SerializedTweetNode): TweetNode {\n    const node = $createTweetNode(serializedNode.id);\n    node.setFormat(serializedNode.format);\n    return node;\n  }\n\n  exportJSON(): SerializedTweetNode {\n    return {\n      ...super.exportJSON(),\n      id: this.getId(),\n      type: 'tweet',\n      version: 1,\n    };\n  }\n\n  static importDOM(): DOMConversionMap<HTMLDivElement> | null {\n    return {\n      div: (domNode: HTMLDivElement) => {\n        if (!domNode.hasAttribute('data-lexical-tweet-id')) {\n          return null;\n        }\n        return {\n          conversion: convertTweetElement,\n          priority: 2,\n        };\n      },\n    };\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement('div');\n    element.setAttribute('data-lexical-tweet-id', this.__id);\n    return { element };\n  }\n\n  constructor(id: string, format?: ElementFormatType, key?: NodeKey) {\n    super(format, key);\n    this.__id = id;\n  }\n\n  getId(): string {\n    return this.__id;\n  }\n\n  decorate(editor: LexicalEditor, config: EditorConfig): JSX.Element {\n    const embedBlockTheme = config.theme.embedBlock || {};\n    const className = {\n      base: embedBlockTheme.base || '',\n      focus: embedBlockTheme.focus || '',\n    };\n    return (\n      <TweetComponent\n        className={className}\n        format={this.__format}\n        loadingComponent=\"Loading...\"\n        nodeKey={this.getKey()}\n        tweetID={this.__id}\n      />\n    );\n  }\n\n  isTopLevel(): true {\n    return true;\n  }\n}\n\nexport function $createTweetNode(tweetID: string): TweetNode {\n  return new TweetNode(tweetID);\n}\n\nexport function $isTweetNode(\n  node: TweetNode | LexicalNode | null | undefined\n): node is TweetNode {\n  return node instanceof TweetNode;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { EditorConfig } from 'lexical';\nimport SerializedTextNode from 'lexical';\n\nimport { Spread } from 'globals';\nimport { TextNode } from 'lexical';\n\nexport type SerializedTypeaheadNode = Spread<\n  {\n    type: 'typeahead';\n    version: 1;\n  },\n  typeof SerializedTextNode\n>;\n\nexport class TypeaheadNode extends TextNode {\n  static clone(node: TypeaheadNode): TypeaheadNode {\n    return new TypeaheadNode(node.__text, node.__key);\n  }\n\n  static getType(): 'typeahead' {\n    return 'typeahead';\n  }\n\n  static importJSON(serializedNode: SerializedTypeaheadNode): TypeaheadNode {\n    const node = $createTypeaheadNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n\n  exportJSON(): SerializedTypeaheadNode {\n    return {\n      ...super.exportJSON(),\n      type: 'typeahead',\n      version: 1,\n    };\n  }\n\n  createDOM(config: EditorConfig): HTMLElement {\n    const dom = super.createDOM(config);\n    dom.style.cssText = 'color: #ccc;';\n    return dom;\n  }\n}\n\nexport function $createTypeaheadNode(text: string): TypeaheadNode {\n  return new TypeaheadNode(text).setMode('token');\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {\n  EditorConfig,\n  ElementFormatType,\n  LexicalEditor,\n  LexicalNode,\n  NodeKey,\n  Spread,\n} from 'lexical';\n\nimport { BlockWithAlignableContents } from '@lexical/react/LexicalBlockWithAlignableContents';\nimport {\n  DecoratorBlockNode,\n  SerializedDecoratorBlockNode,\n} from '@lexical/react/LexicalDecoratorBlockNode';\nimport * as React from 'react';\n\ntype YouTubeComponentProps = Readonly<{\n  className: Readonly<{\n    base: string;\n    focus: string;\n  }>;\n  format: ElementFormatType | null;\n  nodeKey: NodeKey;\n  videoID: string;\n}>;\n\nfunction YouTubeComponent({\n  className,\n  format,\n  nodeKey,\n  videoID,\n}: YouTubeComponentProps) {\n  return (\n    <BlockWithAlignableContents\n      className={className}\n      format={format}\n      nodeKey={nodeKey}\n    >\n      <iframe\n        width=\"560\"\n        height=\"315\"\n        src={`https://www.youtube.com/embed/${videoID}`}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen={true}\n        title=\"YouTube video\"\n      />\n    </BlockWithAlignableContents>\n  );\n}\n\nexport type SerializedYouTubeNode = Spread<\n  {\n    videoID: string;\n    type: 'youtube';\n    version: 1;\n  },\n  SerializedDecoratorBlockNode\n>;\n\nexport class YouTubeNode extends DecoratorBlockNode {\n  __id: string;\n\n  static getType(): string {\n    return 'youtube';\n  }\n\n  static clone(node: YouTubeNode): YouTubeNode {\n    return new YouTubeNode(node.__id, node.__format, node.__key);\n  }\n\n  static importJSON(serializedNode: SerializedYouTubeNode): YouTubeNode {\n    const node = $createYouTubeNode(serializedNode.videoID);\n    node.setFormat(serializedNode.format);\n    return node;\n  }\n\n  exportJSON(): SerializedYouTubeNode {\n    return {\n      ...super.exportJSON(),\n      type: 'youtube',\n      version: 1,\n      videoID: this.__id,\n    };\n  }\n\n  constructor(id: string, format?: ElementFormatType, key?: NodeKey) {\n    super(format, key);\n    this.__id = id;\n  }\n\n  updateDOM(): false {\n    return false;\n  }\n\n  getId(): string {\n    return this.__id;\n  }\n\n  decorate(_editor: LexicalEditor, config: EditorConfig): JSX.Element {\n    const embedBlockTheme = config.theme.embedBlock || {};\n    const className = {\n      base: embedBlockTheme.base || '',\n      focus: embedBlockTheme.focus || '',\n    };\n    return (\n      <YouTubeComponent\n        className={className}\n        format={this.__format}\n        nodeKey={this.getKey()}\n        videoID={this.__id}\n      />\n    );\n  }\n\n  isTopLevel(): true {\n    return true;\n  }\n}\n\nexport function $createYouTubeNode(videoID: string): YouTubeNode {\n  return new YouTubeNode(videoID);\n}\n\nexport function $isYouTubeNode(\n  node: YouTubeNode | LexicalNode | null | undefined\n): node is YouTubeNode {\n  return node instanceof YouTubeNode;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { LexicalNode } from 'lexical';\n\nimport { CodeHighlightNode, CodeNode } from '@lexical/code';\nimport { HashtagNode } from '@lexical/hashtag';\nimport { AutoLinkNode, LinkNode } from '@lexical/link';\nimport { ListItemNode, ListNode } from '@lexical/list';\nimport { MarkNode } from '@lexical/mark';\nimport { OverflowNode } from '@lexical/overflow';\nimport { HorizontalRuleNode } from '@lexical/react/LexicalHorizontalRuleNode';\nimport { HeadingNode, QuoteNode } from '@lexical/rich-text';\nimport { TableCellNode, TableNode, TableRowNode } from '@lexical/table';\nimport { Class } from 'utility-types';\n\nimport { EmojiNode } from './EmojiNode';\nimport { EquationNode } from './EquationNode';\nimport { ExcalidrawNode } from './ExcalidrawNode';\nimport { ImageNode } from './ImageNode';\nimport { KeywordNode } from './KeywordNode';\nimport { MentionNode } from './MentionNode';\nimport { PollNode } from './PollNode';\nimport { StickyNode } from './StickyNode';\nimport { TweetNode } from './TweetNode';\nimport { TypeaheadNode } from './TypeaheadNode';\nimport { YouTubeNode } from './YouTubeNode';\n\nconst PlaygroundNodes: Array<Class<LexicalNode>> = [\n  HeadingNode,\n  ListNode,\n  ListItemNode,\n  QuoteNode,\n  CodeNode,\n  TableNode,\n  TableCellNode,\n  TableRowNode,\n  HashtagNode,\n  CodeHighlightNode,\n  AutoLinkNode,\n  LinkNode,\n  OverflowNode,\n  PollNode,\n  StickyNode,\n  ImageNode,\n  MentionNode,\n  EmojiNode,\n  ExcalidrawNode,\n  EquationNode,\n  TypeaheadNode,\n  KeywordNode,\n  HorizontalRuleNode,\n  TweetNode,\n  YouTubeNode,\n  MarkNode,\n];\n\nexport default PlaygroundNodes;\n","import * as i18next from 'i18next';\nimport EN from './languages/en.json';\nimport FR from './languages/fr.json';\nimport PTBR from './languages/ptBr.json';\nimport RU from './languages/ru.json';\n\nexport const resources = {\n  ar: {},\n  de: {},\n  en: EN,\n  es: {},\n  fr: FR,\n  it: {},\n  ja: {},\n  nl: {},\n  pl: {},\n  pt: {},\n  ptBr: PTBR,\n  ru: RU,\n  ukr: {},\n  zh: {},\n} as const;\n\nexport const languageDetector = {\n  type: 'languageDetector',\n  async: true,\n  detect: (callback) => {\n    const language = navigator.language;\n    callback(language.substring(0, 2));\n  },\n  init: () => {},\n  cacheUserLanguage: () => {},\n};\n\nconst i18n = i18next\n  .createInstance(\n    {\n      ns: ['toolbar', 'action'],\n      resources,\n      fallbackLng: 'en',\n      debug: true,\n      interpolation: {\n        escapeValue: false,\n      },\n    },\n    // We must provide a function as second parameter, otherwise i18next errors\n    (err, t) => {}\n  )\n  .use(languageDetector as i18next.Module);\n\nexport default i18n;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nexport type SettingName =\n  | 'disableBeforeInput'\n  | 'measureTypingPerf'\n  | 'isRichText'\n  | 'isCollab'\n  | 'isCharLimit'\n  | 'isCharLimitUtf8'\n  | 'isAutocomplete'\n  | 'showTreeView'\n  | 'showNestedEditorTreeView'\n  | 'emptyEditor';\n\nexport type Settings = Record<SettingName, boolean>;\n\nconst hostName = window.location.hostname;\nexport const isDevPlayground: boolean =\n  hostName !== 'playground.lexical.dev' &&\n  hostName !== 'lexical-playground.vercel.app';\n\nexport const DEFAULT_SETTINGS: Settings = {\n  disableBeforeInput: false,\n  emptyEditor: isDevPlayground,\n  isAutocomplete: false,\n  isCharLimit: false,\n  isCharLimitUtf8: false,\n  isCollab: false,\n  isRichText: true,\n  measureTypingPerf: false,\n  showNestedEditorTreeView: false,\n  showTreeView: true,\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { SettingName } from '../appSettings';\n\nimport * as React from 'react';\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\n\nimport { DEFAULT_SETTINGS } from '../appSettings';\n\ntype SettingsContextShape = {\n  setOption: (name: SettingName, value: boolean) => void;\n  settings: Record<SettingName, boolean>;\n};\n\nconst Context: React.Context<SettingsContextShape> = createContext({\n  setOption: (name: SettingName, value: boolean) => {\n    return;\n  },\n  settings: DEFAULT_SETTINGS,\n});\n\nexport const SettingsContext = ({\n  children,\n}: {\n  children: JSX.Element | string | (JSX.Element | string)[];\n}): JSX.Element => {\n  const [settings, setSettings] = useState(DEFAULT_SETTINGS);\n  const setOption = useCallback((setting: SettingName, value: boolean) => {\n    setSettings((options) => ({\n      ...options,\n      [setting as string]: value,\n    }));\n    if (DEFAULT_SETTINGS[setting] === value) {\n      setURLParam(setting, null);\n    } else {\n      setURLParam(setting, value);\n    }\n  }, []);\n  const contextValue = useMemo(() => {\n    return { setOption, settings };\n  }, [setOption, settings]);\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n};\n\nexport const useSettings = (): SettingsContextShape => {\n  return useContext(Context);\n};\n\nfunction setURLParam(param: SettingName, value: null | boolean) {\n  const url = new URL(window.location.href);\n  const params = new URLSearchParams(url.search);\n  if (value !== null) {\n    if (params.has(param)) {\n      params.set(param, String(value));\n    } else {\n      params.append(param, String(value));\n    }\n  } else {\n    if (params.has(param)) {\n      params.delete(param);\n    }\n  }\n  url.search = params.toString();\n  window.history.pushState(null, '', url.toString());\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useCallback, useMemo, useState } from 'react';\nimport * as React from 'react';\n\nimport Modal from '../ui/Modal';\n\nexport default function useModal(): [\n  JSX.Element,\n  (title: string, showModal: (onClose: () => void) => JSX.Element) => void\n] {\n  const [modalContent, setModalContent] = useState<null | {\n    closeOnClickOutside: boolean;\n    content: JSX.Element;\n    title: string;\n  }>(null);\n\n  const onClose = useCallback(() => {\n    setModalContent(null);\n  }, []);\n\n  const modal = useMemo(() => {\n    if (modalContent === null) {\n      return null;\n    }\n    const { title, content, closeOnClickOutside } = modalContent;\n    return (\n      <Modal\n        onClose={onClose}\n        title={title}\n        closeOnClickOutside={closeOnClickOutside}\n      >\n        {content}\n      </Modal>\n    );\n  }, [modalContent, onClose]);\n\n  const showModal = useCallback(\n    (\n      title,\n      // eslint-disable-next-line no-shadow\n      getContent: (onClose: () => void) => JSX.Element,\n      closeOnClickOutside = false\n    ) => {\n      setModalContent({\n        closeOnClickOutside,\n        content: getContent(onClose),\n        title,\n      });\n    },\n    [onClose]\n  );\n\n  return [modal, showModal];\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {\n  ElementTransformer,\n  TextMatchTransformer,\n  Transformer,\n} from '@lexical/markdown';\nimport type { ElementNode, LexicalNode } from 'lexical';\n\nimport {\n  CHECK_LIST,\n  ELEMENT_TRANSFORMERS,\n  TEXT_FORMAT_TRANSFORMERS,\n  TEXT_MATCH_TRANSFORMERS,\n} from '@lexical/markdown';\nimport {\n  $createHorizontalRuleNode,\n  $isHorizontalRuleNode,\n  HorizontalRuleNode,\n} from '@lexical/react/LexicalHorizontalRuleNode';\nimport {\n  $createTableCellNode,\n  $createTableNode,\n  $createTableRowNode,\n  $isTableNode,\n  $isTableRowNode,\n  TableCellHeaderStates,\n  TableCellNode,\n  TableNode,\n  TableRowNode,\n} from '@lexical/table';\nimport {\n  $createParagraphNode,\n  $createTextNode,\n  $isElementNode,\n  $isParagraphNode,\n  $isTextNode,\n} from 'lexical';\n\nimport {\n  $createEquationNode,\n  $isEquationNode,\n  EquationNode,\n} from '../nodes/EquationNode';\nimport { $createImageNode, $isImageNode, ImageNode } from '../nodes/ImageNode';\nimport { $createTweetNode, $isTweetNode, TweetNode } from '../nodes/TweetNode';\n\nexport const HR: ElementTransformer = {\n  dependencies: [HorizontalRuleNode],\n  export: (node: LexicalNode) => {\n    return $isHorizontalRuleNode(node) ? '***' : null;\n  },\n  regExp: /^(---|\\*\\*\\*|___)\\s?$/,\n  replace: (parentNode, _1, _2, isImport) => {\n    const line = $createHorizontalRuleNode();\n\n    // TODO: Get rid of isImport flag\n    if (isImport || parentNode.getNextSibling() != null) {\n      parentNode.replace(line);\n    } else {\n      parentNode.insertBefore(line);\n    }\n\n    line.selectNext();\n  },\n  type: 'element',\n};\n\nexport const IMAGE: TextMatchTransformer = {\n  dependencies: [ImageNode],\n  export: (node, exportChildren, exportFormat) => {\n    if (!$isImageNode(node)) {\n      return null;\n    }\n\n    return `![${node.getAltText()}](${node.getSrc()})`;\n  },\n  importRegExp: /!(?:\\[([^[]*)\\])(?:\\(([^(]+)\\))/,\n  regExp: /!(?:\\[([^[]*)\\])(?:\\(([^(]+)\\))$/,\n  replace: (textNode, match) => {\n    const [, altText, src] = match;\n    const imageNode = $createImageNode({\n      altText,\n      maxWidth: 800,\n      src,\n    });\n    textNode.replace(imageNode);\n  },\n  trigger: ')',\n  type: 'text-match',\n};\n\nexport const EQUATION: TextMatchTransformer = {\n  dependencies: [EquationNode],\n  export: (node, exportChildren, exportFormat) => {\n    if (!$isEquationNode(node)) {\n      return null;\n    }\n\n    return `$${node.getEquation()}$`;\n  },\n  importRegExp: /\\$([^$].+?)\\$/,\n  regExp: /\\$([^$].+?)\\$$/,\n  replace: (textNode, match) => {\n    const [, equation] = match;\n    const equationNode = $createEquationNode(equation, true);\n    textNode.replace(equationNode);\n  },\n  trigger: '$',\n  type: 'text-match',\n};\n\nexport const TWEET: ElementTransformer = {\n  dependencies: [TweetNode],\n  export: (node) => {\n    if (!$isTweetNode(node)) {\n      return null;\n    }\n\n    return `<tweet id=\"${node.getId()}\" />`;\n  },\n  regExp: /<tweet id=\"([^\"]+?)\"\\s?\\/>\\s?$/,\n  replace: (textNode, _1, match) => {\n    const [, id] = match;\n    const tweetNode = $createTweetNode(id);\n    textNode.replace(tweetNode);\n  },\n  type: 'element',\n};\n\n// Very primitive table setup\nconst TABLE_ROW_REG_EXP = /^(?:\\|)(.+)(?:\\|)\\s?$/;\n\nexport const TABLE: ElementTransformer = {\n  dependencies: [TableNode, TableRowNode, TableCellNode],\n  export: (\n    node: LexicalNode,\n    exportChildren: (elementNode: ElementNode) => string\n  ) => {\n    if (!$isTableNode(node)) {\n      return null;\n    }\n\n    const output = [];\n\n    for (const row of node.getChildren()) {\n      const rowOutput = [];\n\n      if ($isTableRowNode(row)) {\n        for (const cell of row.getChildren()) {\n          // It's TableCellNode (hence ElementNode) so it's just to make flow happy\n          if ($isElementNode(cell)) {\n            rowOutput.push(exportChildren(cell));\n          }\n        }\n      }\n\n      output.push(`| ${rowOutput.join(' | ')} |`);\n    }\n\n    return output.join('\\n');\n  },\n  regExp: TABLE_ROW_REG_EXP,\n  replace: (parentNode, _1, match) => {\n    const matchCells = mapToTableCells(match[0]);\n\n    if (matchCells == null) {\n      return;\n    }\n\n    const rows = [matchCells];\n    let sibling = parentNode.getPreviousSibling();\n    let maxCells = matchCells.length;\n\n    while (sibling) {\n      if (!$isParagraphNode(sibling)) {\n        break;\n      }\n\n      if (sibling.getChildrenSize() !== 1) {\n        break;\n      }\n\n      const firstChild = sibling.getFirstChild();\n\n      if (!$isTextNode(firstChild)) {\n        break;\n      }\n\n      const cells = mapToTableCells(firstChild.getTextContent());\n\n      if (cells == null) {\n        break;\n      }\n\n      maxCells = Math.max(maxCells, cells.length);\n      rows.unshift(cells);\n      const previousSibling = sibling.getPreviousSibling();\n      sibling.remove();\n      sibling = previousSibling;\n    }\n\n    const table = $createTableNode();\n\n    for (const cells of rows) {\n      const tableRow = $createTableRowNode();\n      table.append(tableRow);\n\n      for (let i = 0; i < maxCells; i++) {\n        tableRow.append(i < cells.length ? cells[i] : createTableCell(null));\n      }\n    }\n\n    const previousSibling = parentNode.getPreviousSibling();\n    if (\n      $isTableNode(previousSibling) &&\n      getTableColumnsSize(previousSibling) === maxCells\n    ) {\n      previousSibling.append(...table.getChildren());\n      parentNode.remove();\n    } else {\n      parentNode.replace(table);\n    }\n\n    table.selectEnd();\n  },\n  type: 'element',\n};\n\nfunction getTableColumnsSize(table: TableNode) {\n  const row = table.getFirstChild();\n  return $isTableRowNode(row) ? row.getChildrenSize() : 0;\n}\n\nconst createTableCell = (\n  textContent: string | null | undefined\n): TableCellNode => {\n  const cell = $createTableCellNode(TableCellHeaderStates.NO_STATUS);\n  const paragraph = $createParagraphNode();\n\n  if (textContent != null) {\n    paragraph.append($createTextNode(textContent.trim()));\n  }\n\n  cell.append(paragraph);\n  return cell;\n};\n\nconst mapToTableCells = (textContent: string): Array<TableCellNode> | null => {\n  // TODO:\n  // For now plain text, single node. Can be expanded to more complex content\n  // including formatted text\n  const match = textContent.match(TABLE_ROW_REG_EXP);\n\n  if (!match || !match[1]) {\n    return null;\n  }\n\n  return match[1].split('|').map((text) => createTableCell(text));\n};\n\nexport const PLAYGROUND_TRANSFORMERS: Array<Transformer> = [\n  TABLE,\n  HR,\n  IMAGE,\n  EQUATION,\n  TWEET,\n  CHECK_LIST,\n  ...ELEMENT_TRANSFORMERS,\n  ...TEXT_FORMAT_TRANSFORMERS,\n  ...TEXT_MATCH_TRANSFORMERS,\n];\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useCallback, useEffect, useRef } from 'react';\n\nconst getElement = (): HTMLElement => {\n  let element = document.getElementById('report-container');\n\n  if (element === null) {\n    element = document.createElement('div');\n    element.id = 'report-container';\n    element.style.position = 'fixed';\n    element.style.top = '50%';\n    element.style.left = '50%';\n    element.style.fontSize = '32px';\n    element.style.transform = 'translate(-50%, -50px)';\n    element.style.padding = '20px';\n    element.style.background = 'rgba(240, 240, 240, 0.4)';\n    element.style.borderRadius = '20px';\n\n    if (document.body) {\n      document.body.appendChild(element);\n    }\n  }\n\n  return element;\n};\n\nexport default function useReport(): (arg0: string) => NodeJS.Timeout {\n  const timer = useRef<NodeJS.Timeout | null>(null);\n  const cleanup = useCallback(() => {\n    clearTimeout(timer.current);\n\n    if (document.body) {\n      document.body.removeChild(getElement());\n    }\n  }, []);\n\n  useEffect(() => {\n    return cleanup;\n  }, [cleanup]);\n\n  return useCallback(\n    (content) => {\n      // eslint-disable-next-line no-console\n      console.log(content);\n      const element = getElement();\n      clearTimeout(timer.current);\n      element.innerHTML = content;\n      timer.current = setTimeout(cleanup, 1000);\n      return timer.current;\n    },\n    [cleanup]\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { LexicalCommand, LexicalEditor, RangeSelection } from 'lexical';\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n  $getSelection,\n  $isRangeSelection,\n  COMMAND_PRIORITY_EDITOR,\n  createCommand,\n  REDO_COMMAND,\n  UNDO_COMMAND,\n} from 'lexical';\nimport { useEffect, useRef, useState } from 'react';\n\nimport useReport from '../hooks/useReport';\n\nexport const SPEECH_TO_TEXT_COMMAND: LexicalCommand<boolean> = createCommand();\n\nconst VOICE_COMMANDS: Readonly<\n  Record<\n    string,\n    (arg0: { editor: LexicalEditor; selection: RangeSelection }) => void\n  >\n> = {\n  '\\n': ({ selection }) => {\n    selection.insertParagraph();\n  },\n  redo: ({ editor }) => {\n    editor.dispatchCommand(REDO_COMMAND, undefined);\n  },\n  undo: ({ editor }) => {\n    editor.dispatchCommand(UNDO_COMMAND, undefined);\n  },\n};\n\nexport const SUPPORT_SPEECH_RECOGNITION: boolean =\n  'SpeechRecognition' in window || 'webkitSpeechRecognition' in window;\n\nfunction SpeechToTextPlugin(): null {\n  const [editor] = useLexicalComposerContext();\n  const [isEnabled, setIsEnabled] = useState<boolean>(false);\n  const SpeechRecognition =\n    // @ts-ignore\n    window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = useRef<typeof SpeechRecognition | null>(null);\n  const report = useReport();\n\n  useEffect(() => {\n    if (isEnabled && recognition.current === null) {\n      recognition.current = new SpeechRecognition();\n      recognition.current.continuous = true;\n      recognition.current.interimResults = true;\n      recognition.current.addEventListener(\n        'result',\n        (event: typeof SpeechRecognition) => {\n          const resultItem = event.results.item(event.resultIndex);\n          const { transcript } = resultItem.item(0);\n          report(transcript);\n\n          if (!resultItem.isFinal) {\n            return;\n          }\n\n          editor.update(() => {\n            const selection = $getSelection();\n\n            if ($isRangeSelection(selection)) {\n              const command = VOICE_COMMANDS[transcript.toLowerCase().trim()];\n\n              if (command) {\n                command({\n                  editor,\n                  selection,\n                });\n              } else if (transcript.match(/\\s*\\n\\s*/)) {\n                selection.insertParagraph();\n              } else {\n                selection.insertText(transcript);\n              }\n            }\n          });\n        }\n      );\n    }\n\n    if (recognition.current) {\n      if (isEnabled) {\n        recognition.current.start();\n      } else {\n        recognition.current.stop();\n      }\n    }\n\n    return () => {\n      if (recognition.current !== null) {\n        recognition.current.stop();\n      }\n    };\n  }, [SpeechRecognition, editor, isEnabled, report]);\n  useEffect(() => {\n    return editor.registerCommand(\n      SPEECH_TO_TEXT_COMMAND,\n      (_isEnabled: boolean) => {\n        setIsEnabled(_isEnabled);\n        return true;\n      },\n      COMMAND_PRIORITY_EDITOR\n    );\n  }, [editor]);\n\n  return null;\n}\n\nexport default (SUPPORT_SPEECH_RECOGNITION\n  ? SpeechToTextPlugin\n  : () => null) as () => null;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { LexicalEditor } from 'lexical';\n\nimport { $createCodeNode, $isCodeNode } from '@lexical/code';\nimport { exportFile, importFile } from '@lexical/file';\nimport {\n  $convertFromMarkdownString,\n  $convertToMarkdownString,\n} from '@lexical/markdown';\nimport { useCollaborationContext } from '@lexical/react/LexicalCollaborationContext';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { mergeRegister } from '@lexical/utils';\nimport { CONNECTED_COMMAND, TOGGLE_CONNECT_COMMAND } from '@lexical/yjs';\nimport {\n  $createTextNode,\n  $getRoot,\n  $isParagraphNode,\n  CLEAR_EDITOR_COMMAND,\n  COMMAND_PRIORITY_EDITOR,\n} from 'lexical';\nimport * as React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport useModal from '../hooks/useModal';\nimport Button from '../ui/Button';\nimport { PLAYGROUND_TRANSFORMERS } from './MarkdownTransformers';\nimport {\n  SPEECH_TO_TEXT_COMMAND,\n  SUPPORT_SPEECH_RECOGNITION,\n} from './SpeechToTextPlugin';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nexport default function ActionsPlugin({\n  isRichText,\n}: {\n  isRichText: boolean;\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n  const [isEditable, setIsEditable] = useState(() => editor.isEditable());\n  const [isSpeechToText, setIsSpeechToText] = useState(false);\n  const [connected, setConnected] = useState(false);\n  const [isEditorEmpty, setIsEditorEmpty] = useState(true);\n  const [modal, showModal] = useModal();\n  const { yjsDocMap } = useCollaborationContext();\n  const isCollab = yjsDocMap.get('main') !== undefined;\n  const { t } = useTranslation(['action']);\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerEditableListener((editable) => {\n        setIsEditable(editable);\n      }),\n      editor.registerCommand<boolean>(\n        CONNECTED_COMMAND,\n        (payload) => {\n          const isConnected = payload;\n          setConnected(isConnected);\n          return false;\n        },\n        COMMAND_PRIORITY_EDITOR\n      )\n    );\n  }, [editor]);\n\n  useEffect(() => {\n    return editor.registerUpdateListener(() => {\n      editor.getEditorState().read(() => {\n        const root = $getRoot();\n        const children = root.getChildren();\n\n        if (children.length > 1) {\n          setIsEditorEmpty(false);\n        } else {\n          if ($isParagraphNode(children[0])) {\n            const paragraphChildren = children[0].getChildren();\n            setIsEditorEmpty(paragraphChildren.length === 0);\n          } else {\n            setIsEditorEmpty(false);\n          }\n        }\n      });\n    });\n  }, [editor]);\n\n  const handleMarkdownToggle = useCallback(() => {\n    editor.update(() => {\n      const root = $getRoot();\n      const firstChild = root.getFirstChild();\n      if ($isCodeNode(firstChild) && firstChild.getLanguage() === 'markdown') {\n        $convertFromMarkdownString(\n          firstChild.getTextContent(),\n          PLAYGROUND_TRANSFORMERS\n        );\n      } else {\n        const markdown = $convertToMarkdownString(PLAYGROUND_TRANSFORMERS);\n        root\n          .clear()\n          .append(\n            $createCodeNode('markdown').append($createTextNode(markdown))\n          );\n      }\n      root.selectEnd();\n    });\n  }, [editor]);\n\n  return (\n    <div className=\"verbum-actions\">\n      {SUPPORT_SPEECH_RECOGNITION && (\n        <button\n          onClick={() => {\n            editor.dispatchCommand(SPEECH_TO_TEXT_COMMAND, !isSpeechToText);\n            setIsSpeechToText(!isSpeechToText);\n          }}\n          className={\n            'action-button action-button-mic ' +\n            (isSpeechToText ? 'active' : '')\n          }\n          title={t('action:Speech_To_Text')}\n          aria-label={`${\n            isSpeechToText ? t('action:Enable') : t('action:Disable')\n          } ${t('action:speech_To_Text')}`}\n          type=\"button\"\n        >\n          <i className=\"verbum-mic\" />\n        </button>\n      )}\n      <button\n        className=\"verbum-action-button import\"\n        onClick={() => importFile(editor)}\n        title={t('action:Import')}\n        aria-label={t('action:Import_Description')}\n        type=\"button\"\n      >\n        <i className=\"verbum-import\" />\n      </button>\n      <button\n        className=\"verbum-action-button export\"\n        onClick={() =>\n          exportFile(editor, {\n            fileName: `Playground ${new Date().toISOString()}`,\n            source: 'Playground',\n          })\n        }\n        title={t('action:Export')}\n        aria-label={t('action:Export_Description')}\n        type=\"button\"\n      >\n        <i className=\"verbum-export\" />\n      </button>\n      <button\n        className=\"verbum-action-button clear\"\n        disabled={isEditorEmpty}\n        onClick={() => {\n          showModal(t('action:Clear_Editor'), (onClose) => (\n            <ShowClearDialog editor={editor} onClose={onClose} t={t} />\n          ));\n        }}\n        title={t('action:Clear')}\n        aria-label={t('action:Clear_Description')}\n        type=\"button\"\n      >\n        <i className=\"clear\" />\n      </button>\n      <button\n        className={`verbum-action-button ${isEditable ? 'unlock' : 'lock'}`}\n        onClick={() => {\n          editor.setEditable(!editor.isEditable());\n        }}\n        title={t('action:Read-Only_Mode')}\n        aria-label={`${isEditable ? t('action:Unlock') : t('action:Lock')} ${t(\n          'action:Read-Only_Mode'\n        )}`}\n        type=\"button\"\n      >\n        <i className={isEditable ? 'unlock' : 'lock'} />\n      </button>\n      <button\n        className=\"verbum-action-button\"\n        onClick={handleMarkdownToggle}\n        title={t('action:Convert_From_Markdown')}\n        aria-label={t('action:Convert_From_Markdown_Description')}\n        type=\"button\"\n      >\n        <i className=\"verbum-markdown\" />\n      </button>\n      {isCollab && (\n        <button\n          className=\"verbum-action-button connect\"\n          onClick={() => {\n            editor.dispatchCommand(TOGGLE_CONNECT_COMMAND, !connected);\n          }}\n          title={`${\n            connected ? t('action:Disconnect') : t('action:Connect')\n          } ${t('action:Collaborative')}`}\n          aria-label={`${\n            connected ? t('action:Disconnect_From') : t('action:Connect_To')\n          } ${t('action:Server')}`}\n          type=\"button\"\n        >\n          <i\n            className={connected ? t('action:disconnect') : t('action:connect')}\n          />\n        </button>\n      )}\n      {modal}\n    </div>\n  );\n}\n\nfunction ShowClearDialog({\n  editor,\n  onClose,\n  t,\n}: {\n  editor: LexicalEditor;\n  onClose: () => void;\n  t: TFunction;\n}): JSX.Element {\n  return (\n    <>\n      {t('action:Confirm_Clear')}\n      <div className=\"Modal__content\">\n        <Button\n          onClick={() => {\n            editor.dispatchCommand(CLEAR_EDITOR_COMMAND, undefined);\n            editor.focus();\n            onClose();\n          }}\n        >\n          {t('action:Clear')}\n        </Button>{' '}\n        <Button\n          onClick={() => {\n            editor.focus();\n            onClose();\n          }}\n        >\n          {t('action:Cancel')}\n        </Button>\n      </div>\n    </>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { AutoLinkPlugin } from '@lexical/react/LexicalAutoLinkPlugin';\nimport * as React from 'react';\n\nconst URL_MATCHER =\n  /((https?:\\/\\/(www\\.)?)|(www\\.))[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\nconst EMAIL_MATCHER =\n  /(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/;\n\nconst MATCHERS = [\n  (text) => {\n    const match = URL_MATCHER.exec(text);\n    return (\n      match && {\n        index: match.index,\n        length: match[0].length,\n        text: match[0],\n        url: match[0],\n      }\n    );\n  },\n  (text) => {\n    const match = EMAIL_MATCHER.exec(text);\n    return (\n      match && {\n        index: match.index,\n        length: match[0].length,\n        text: match[0],\n        url: `mailto:${match[0]}`,\n      }\n    );\n  },\n];\n\nexport default function LexicalAutoLinkPlugin(): JSX.Element {\n  return <AutoLinkPlugin matchers={MATCHERS} />;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {\n  Comment,\n  Comments,\n  CommentStore,\n  createComment,\n  createThread,\n  Thread,\n  useCommentStore,\n} from '../commenting';\nimport type {\n  EditorState,\n  LexicalCommand,\n  LexicalEditor,\n  NodeKey,\n} from 'lexical';\n\nimport './CommentPlugin.css';\n\nimport {\n  $createMarkNode,\n  $getMarkIDs,\n  $isMarkNode,\n  $unwrapMarkNode,\n  $wrapSelectionInMarkNode,\n  MarkNode,\n} from '@lexical/mark';\nimport { AutoFocusPlugin } from '@lexical/react/LexicalAutoFocusPlugin';\nimport { ClearEditorPlugin } from '@lexical/react/LexicalClearEditorPlugin';\nimport { LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin';\nimport { PlainTextPlugin } from '@lexical/react/LexicalPlainTextPlugin';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\nimport { createDOMRange, createRectsFromDOMRange } from '@lexical/selection';\nimport { $isRootTextContentEmpty, $rootTextContent } from '@lexical/text';\nimport { mergeRegister, registerNestedElementResolver } from '@lexical/utils';\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isRangeSelection,\n  $isTextNode,\n  CLEAR_EDITOR_COMMAND,\n  COMMAND_PRIORITY_EDITOR,\n  createCommand,\n  KEY_ESCAPE_COMMAND,\n} from 'lexical';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport useLayoutEffect from '../shared/src/useLayoutEffect';\n\nimport useModal from '../hooks/useModal';\nimport CommentEditorTheme from '../themes/CommentEditorTheme';\nimport Button from '../ui/Button';\nimport ContentEditable from '../ui/ContentEditable';\nimport Placeholder from '../ui/Placeholder';\nimport type { Doc } from 'yjs';\nimport { useCollaborationContext } from '@lexical/react/LexicalCollaborationContext';\nimport { WebsocketProvider } from 'y-websocket';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nexport const INSERT_INLINE_COMMAND: LexicalCommand<void> = createCommand();\n\nfunction AddCommentBox({\n  anchorKey,\n  editor,\n  onAddComment,\n}: {\n  anchorKey: NodeKey;\n  editor: LexicalEditor;\n  onAddComment: () => void;\n}): JSX.Element {\n  const boxRef = useRef<HTMLDivElement>(null);\n\n  const updatePosition = useCallback(() => {\n    const boxElem = boxRef.current;\n    const rootElement = editor.getRootElement();\n    const anchorElement = editor.getElementByKey(anchorKey);\n\n    if (boxElem !== null && rootElement !== null && anchorElement !== null) {\n      const { right } = rootElement.getBoundingClientRect();\n      const { top } = anchorElement.getBoundingClientRect();\n      boxElem.style.left = `${right - 20}px`;\n      boxElem.style.top = `${top - 30}px`;\n    }\n  }, [anchorKey, editor]);\n\n  useEffect(() => {\n    window.addEventListener('resize', updatePosition);\n\n    return () => {\n      window.removeEventListener('resize', updatePosition);\n    };\n  }, [editor, updatePosition]);\n\n  useLayoutEffect(() => {\n    updatePosition();\n  }, [anchorKey, editor, updatePosition]);\n\n  return (\n    <div className=\"CommentPlugin_AddCommentBox\" ref={boxRef}>\n      <button\n        className=\"CommentPlugin_AddCommentBox_button\"\n        onClick={onAddComment}\n        type=\"button\"\n      >\n        <i className=\"verbum-icon verbum-add-comment\" />\n      </button>\n    </div>\n  );\n}\n\nfunction EditorRefPlugin({\n  editorRef,\n}: {\n  editorRef: { current: null | LexicalEditor };\n}): null {\n  const [editor] = useLexicalComposerContext();\n\n  useLayoutEffect(() => {\n    editorRef.current = editor;\n    return () => {\n      editorRef.current = null;\n    };\n  }, [editor, editorRef]);\n\n  return null;\n}\n\nfunction EscapeHandlerPlugin({\n  onEscape,\n}: {\n  onEscape: (e: KeyboardEvent) => boolean;\n}): null {\n  const [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    return editor.registerCommand(\n      KEY_ESCAPE_COMMAND,\n      (event: KeyboardEvent) => {\n        return onEscape(event);\n      },\n      2\n    );\n  }, [editor, onEscape]);\n\n  return null;\n}\n\nfunction PlainTextEditor({\n  className,\n  autoFocus,\n  onEscape,\n  onChange,\n  editorRef,\n  placeholder = 'Type a comment...',\n}: {\n  autoFocus?: boolean;\n  className?: string;\n  editorRef?: { current: null | LexicalEditor };\n  onChange: (editorState: EditorState, editor: LexicalEditor) => void;\n  onEscape: (e: KeyboardEvent) => boolean;\n  placeholder?: string;\n}) {\n  const initialConfig = {\n    namespace: 'Commenting',\n    nodes: [],\n    onError: (error: Error) => {\n      throw error;\n    },\n    theme: CommentEditorTheme,\n  };\n\n  return (\n    <LexicalComposer initialConfig={initialConfig}>\n      <div className=\"CommentPlugin_CommentInputBox_EditorContainer\">\n        <PlainTextPlugin\n          contentEditable={<ContentEditable className={className} />}\n          placeholder={<Placeholder>{placeholder}</Placeholder>}\n          ErrorBoundary={LexicalErrorBoundary}\n        />\n        <OnChangePlugin onChange={onChange} />\n        <HistoryPlugin />\n        {autoFocus !== false && <AutoFocusPlugin />}\n        <EscapeHandlerPlugin onEscape={onEscape} />\n        <ClearEditorPlugin />\n        {editorRef !== undefined && <EditorRefPlugin editorRef={editorRef} />}\n      </div>\n    </LexicalComposer>\n  );\n}\n\nfunction useOnChange(\n  setContent: (text: string) => void,\n  setCanSubmit: (canSubmit: boolean) => void\n) {\n  return useCallback(\n    (editorState: EditorState, _editor: LexicalEditor) => {\n      editorState.read(() => {\n        setContent($rootTextContent());\n        setCanSubmit(!$isRootTextContentEmpty(_editor.isComposing(), true));\n      });\n    },\n    [setCanSubmit, setContent]\n  );\n}\n\nfunction CommentInputBox({\n  editor,\n  cancelAddComment,\n  submitAddComment,\n  t,\n}: {\n  cancelAddComment: () => void;\n  editor: LexicalEditor;\n  submitAddComment: (\n    commentOrThread: Comment | Thread,\n    isInlineComment: boolean\n  ) => void;\n  t: TFunction;\n}) {\n  const [content, setContent] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n  const boxRef = useRef<HTMLDivElement>(null);\n  const selectionState = useMemo(\n    () => ({\n      container: document.createElement('div'),\n      elements: [],\n    }),\n    []\n  );\n  const author = useCollabAuthorName();\n\n  const updateLocation = useCallback(() => {\n    editor.getEditorState().read(() => {\n      const selection = $getSelection();\n\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        const range = createDOMRange(\n          editor,\n          anchor.getNode(),\n          anchor.offset,\n          focus.getNode(),\n          focus.offset\n        );\n        const boxElem = boxRef.current;\n        if (range !== null && boxElem !== null) {\n          const { left, bottom, width } = range.getBoundingClientRect();\n          const selectionRects = createRectsFromDOMRange(editor, range);\n          let correctedLeft =\n            selectionRects.length === 1 ? left + width / 2 - 125 : left - 125;\n          if (correctedLeft < 10) {\n            correctedLeft = 10;\n          }\n          boxElem.style.left = `${correctedLeft}px`;\n          boxElem.style.top = `${bottom + 20}px`;\n          const selectionRectsLength = selectionRects.length;\n          const { container } = selectionState;\n          const elements: Array<HTMLSpanElement> = selectionState.elements;\n          const elementsLength = elements.length;\n\n          for (let i = 0; i < selectionRectsLength; i++) {\n            const selectionRect = selectionRects[i];\n            let elem: HTMLSpanElement = elements[i];\n            if (elem === undefined) {\n              elem = document.createElement('span');\n              elements[i] = elem;\n              container.appendChild(elem);\n            }\n            const color = '255, 212, 0';\n            const style = `position:absolute;top:${selectionRect.top}px;left:${selectionRect.left}px;height:${selectionRect.height}px;width:${selectionRect.width}px;background-color:rgba(${color}, 0.3);pointer-events:none;z-index:5;`;\n            elem.style.cssText = style;\n          }\n          for (let i = elementsLength - 1; i >= selectionRectsLength; i--) {\n            const elem = elements[i];\n            container.removeChild(elem);\n            elements.pop();\n          }\n        }\n      }\n    });\n  }, [editor, selectionState]);\n\n  useLayoutEffect(() => {\n    updateLocation();\n    const container = selectionState.container;\n    const body = document.body;\n    if (body !== null) {\n      body.appendChild(container);\n      return () => {\n        body.removeChild(container);\n      };\n    }\n  }, [selectionState.container, updateLocation]);\n\n  useEffect(() => {\n    window.addEventListener('resize', updateLocation);\n\n    return () => {\n      window.removeEventListener('resize', updateLocation);\n    };\n  }, [updateLocation]);\n\n  const onEscape = (event: KeyboardEvent): boolean => {\n    event.preventDefault();\n    cancelAddComment();\n    return true;\n  };\n\n  const submitComment = () => {\n    if (canSubmit) {\n      let quote = editor.getEditorState().read(() => {\n        const selection = $getSelection();\n        return selection !== null ? selection.getTextContent() : '';\n      });\n      if (quote.length > 100) {\n        quote = quote.slice(0, 99) + '…';\n      }\n      submitAddComment(\n        createThread(quote, [createComment(content, author)]),\n        true\n      );\n    }\n  };\n\n  const onChange = useOnChange(setContent, setCanSubmit);\n\n  return (\n    <div className=\"CommentPlugin_CommentInputBox\" ref={boxRef}>\n      <PlainTextEditor\n        className=\"CommentPlugin_CommentInputBox_Editor\"\n        onEscape={onEscape}\n        onChange={onChange}\n      />\n      <div className=\"CommentPlugin_CommentInputBox_Buttons\">\n        <Button\n          onClick={cancelAddComment}\n          className=\"CommentPlugin_CommentInputBox_Button\"\n        >\n          {t('action:Cancel')}\n        </Button>\n        <Button\n          onClick={submitComment}\n          disabled={!canSubmit}\n          className=\"CommentPlugin_CommentInputBox_Button primary\"\n        >\n          {t('action:Comment')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction CommentsComposer({\n  submitAddComment,\n  thread,\n  placeholder,\n}: {\n  placeholder?: string;\n  submitAddComment: (\n    commentOrThread: Comment,\n    isInlineComment: boolean,\n    // eslint-disable-next-line no-shadow\n    thread?: Thread\n  ) => void;\n  thread?: Thread;\n}) {\n  const [content, setContent] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n  const editorRef = useRef<LexicalEditor>(null);\n  const author = useCollabAuthorName();\n\n  const onChange = useOnChange(setContent, setCanSubmit);\n\n  const submitComment = () => {\n    if (canSubmit) {\n      submitAddComment(createComment(content, author), false, thread);\n      const editor = editorRef.current;\n      if (editor !== null) {\n        editor.dispatchCommand(CLEAR_EDITOR_COMMAND, undefined);\n      }\n    }\n  };\n\n  return (\n    <>\n      <PlainTextEditor\n        className=\"CommentPlugin_CommentsPanel_Editor\"\n        autoFocus={false}\n        onEscape={() => {\n          return true;\n        }}\n        onChange={onChange}\n        editorRef={editorRef}\n        placeholder={placeholder}\n      />\n      <Button\n        className=\"CommentPlugin_CommentsPanel_SendButton\"\n        onClick={submitComment}\n        disabled={!canSubmit}\n      >\n        <i className=\"send\" />\n      </Button>\n    </>\n  );\n}\n\nfunction ShowDeleteCommentOrThreadDialog({\n  commentOrThread,\n  deleteCommentOrThread,\n  onClose,\n  thread = undefined,\n  t,\n}: {\n  commentOrThread: Comment | Thread;\n\n  deleteCommentOrThread: (\n    comment: Comment | Thread,\n    // eslint-disable-next-line no-shadow\n    thread?: Thread\n  ) => void;\n  onClose: () => void;\n  thread?: Thread;\n  t: TFunction;\n}): JSX.Element {\n  return (\n    <>\n      {`${t('toolbar:commentPlugin.Delete_Comment_Description')} ${\n        commentOrThread.type\n      }?`}\n      <div className=\"Modal__content\">\n        <Button\n          onClick={() => {\n            deleteCommentOrThread(commentOrThread, thread);\n            onClose();\n          }}\n        >\n          {t('action:Delete')}\n        </Button>{' '}\n        <Button\n          onClick={() => {\n            onClose();\n          }}\n        >\n          {t('action:Cancel')}\n        </Button>\n      </div>\n    </>\n  );\n}\n\nfunction CommentsPanelListComment({\n  comment,\n  deleteComment,\n  thread,\n  rtf,\n  t,\n}: {\n  comment: Comment;\n  deleteComment: (\n    commentOrThread: Comment | Thread,\n    // eslint-disable-next-line no-shadow\n    thread?: Thread\n  ) => void;\n  thread?: Thread;\n  rtf: null; //FIXME: Intl.RelativeTimeFormat gives build error;\n  t: TFunction;\n}): JSX.Element {\n  const seconds = Math.round((comment.timeStamp - performance.now()) / 1000);\n  const minutes = Math.round(seconds / 60);\n  const [modal, showModal] = useModal();\n\n  return (\n    <li className=\"CommentPlugin_CommentsPanel_List_Comment\">\n      <div className=\"CommentPlugin_CommentsPanel_List_Details\">\n        <span className=\"CommentPlugin_CommentsPanel_List_Comment_Author\">\n          {comment.author}\n        </span>\n        <span className=\"CommentPlugin_CommentsPanel_List_Comment_Time\">\n          {/* · {seconds > -10 ? 'Just now' : rtf.format(minutes, 'minute')} */}\n        </span>\n      </div>\n      <p\n        className={\n          comment.deleted ? 'CommentPlugin_CommentsPanel_DeletedComment' : ''\n        }\n      >\n        {comment.content}\n      </p>\n      {!comment.deleted && (\n        <>\n          <Button\n            onClick={() => {\n              showModal(\n                t('toolbar:commentPlugin.Delete_Comment'),\n                (onClose) => (\n                  <ShowDeleteCommentOrThreadDialog\n                    commentOrThread={comment}\n                    deleteCommentOrThread={deleteComment}\n                    thread={thread}\n                    onClose={onClose}\n                    t={t}\n                  />\n                )\n              );\n            }}\n            className=\"CommentPlugin_CommentsPanel_List_DeleteButton\"\n          >\n            <i className=\"delete\" />\n          </Button>\n          {modal}\n        </>\n      )}\n    </li>\n  );\n}\n\nfunction CommentsPanelList({\n  activeIDs,\n  comments,\n  deleteCommentOrThread,\n  listRef,\n  markNodeMap,\n  submitAddComment,\n  t,\n}: {\n  activeIDs: Array<string>;\n  comments: Comments;\n  deleteCommentOrThread: (\n    commentOrThread: Comment | Thread,\n    thread?: Thread\n  ) => void;\n  listRef: { current: null | HTMLUListElement };\n  markNodeMap: Map<string, Set<NodeKey>>;\n  submitAddComment: (\n    commentOrThread: Comment | Thread,\n    isInlineComment: boolean,\n    thread?: Thread\n  ) => void;\n  t: TFunction;\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n  const [counter, setCounter] = useState(0);\n  const [modal, showModal] = useModal();\n  // const rtf = useMemo(\n  //   () =>\n  //     new Intl.RelativeTimeFormat('en', {\n  //       localeMatcher: 'best fit',\n  //       numeric: 'auto',\n  //       style: 'short',\n  //     }),\n  //   []\n  // ); //FIXME: it is closed to fix a build error\n  const rtf = null;\n\n  useEffect(() => {\n    // Used to keep the time stamp up to date\n    const id = setTimeout(() => {\n      setCounter(counter + 1);\n    }, 10000);\n\n    return () => {\n      clearTimeout(id);\n    };\n  }, [counter]);\n\n  return (\n    <ul className=\"CommentPlugin_CommentsPanel_List\" ref={listRef}>\n      {comments.map((commentOrThread) => {\n        const id = commentOrThread.id;\n        if (commentOrThread.type === 'thread') {\n          const handleClickThread = () => {\n            const markNodeKeys = markNodeMap.get(id);\n            if (\n              markNodeKeys !== undefined &&\n              (activeIDs === null || activeIDs.indexOf(id) === -1)\n            ) {\n              const activeElement = document.activeElement;\n              // Move selection to the start of the mark, so that we\n              // update the UI with the selected thread.\n              editor.update(\n                () => {\n                  const markNodeKey = Array.from(markNodeKeys)[0];\n                  const markNode = $getNodeByKey<MarkNode>(markNodeKey);\n                  if ($isMarkNode(markNode)) {\n                    markNode.selectStart();\n                  }\n                },\n                {\n                  onUpdate() {\n                    // Restore selection to the previous element\n                    if (activeElement !== null) {\n                      (activeElement as HTMLElement).focus();\n                    }\n                  },\n                }\n              );\n            }\n          };\n\n          return (\n            // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\n            <li\n              key={id}\n              onClick={handleClickThread}\n              className={`CommentPlugin_CommentsPanel_List_Thread ${\n                markNodeMap.has(id) ? 'interactive' : ''\n              } ${activeIDs.indexOf(id) === -1 ? '' : 'active'}`}\n            >\n              <div className=\"CommentPlugin_CommentsPanel_List_Thread_QuoteBox\">\n                <blockquote className=\"CommentPlugin_CommentsPanel_List_Thread_Quote\">\n                  {'> '}\n                  <span>{commentOrThread.quote}</span>\n                </blockquote>\n                {/* INTRODUCE DELETE THREAD HERE*/}\n                <Button\n                  onClick={() => {\n                    showModal(\n                      t('toolbar:commentPlugin.Delete_Thread'),\n                      (onClose) => (\n                        <ShowDeleteCommentOrThreadDialog\n                          commentOrThread={commentOrThread}\n                          deleteCommentOrThread={deleteCommentOrThread}\n                          onClose={onClose}\n                          t={t}\n                        />\n                      )\n                    );\n                  }}\n                  className=\"CommentPlugin_CommentsPanel_List_DeleteButton\"\n                >\n                  <i className=\"delete\" />\n                </Button>\n                {modal}\n              </div>\n              <ul className=\"CommentPlugin_CommentsPanel_List_Thread_Comments\">\n                {commentOrThread.comments.map((comment) => (\n                  <CommentsPanelListComment\n                    key={comment.id}\n                    comment={comment}\n                    deleteComment={deleteCommentOrThread}\n                    thread={commentOrThread}\n                    rtf={rtf}\n                    t={t}\n                  />\n                ))}\n              </ul>\n              <div className=\"CommentPlugin_CommentsPanel_List_Thread_Editor\">\n                <CommentsComposer\n                  submitAddComment={submitAddComment}\n                  thread={commentOrThread}\n                  placeholder={t('toolbar:commentPlugin.Reply_to_comment')}\n                />\n              </div>\n            </li>\n          );\n        }\n        return (\n          <CommentsPanelListComment\n            key={id}\n            comment={commentOrThread}\n            deleteComment={deleteCommentOrThread}\n            rtf={rtf}\n            t={t}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction CommentsPanel({\n  activeIDs,\n  deleteCommentOrThread,\n  comments,\n  markNodeMap,\n  submitAddComment,\n  t,\n}: {\n  activeIDs: Array<string>;\n  comments: Comments;\n  deleteCommentOrThread: (\n    commentOrThread: Comment | Thread,\n    thread?: Thread\n  ) => void;\n  markNodeMap: Map<string, Set<NodeKey>>;\n  submitAddComment: (\n    commentOrThread: Comment | Thread,\n    isInlineComment: boolean,\n    thread?: Thread\n  ) => void;\n  t: TFunction;\n}): JSX.Element {\n  const listRef = useRef<HTMLUListElement>(null);\n  const isEmpty = comments.length === 0;\n\n  return (\n    <div className=\"CommentPlugin_CommentsPanel\">\n      <h2 className=\"CommentPlugin_CommentsPanel_Heading\">\n        {t('toolbar:commentPlugin.Comments')}\n      </h2>\n      {isEmpty ? (\n        <div className=\"CommentPlugin_CommentsPanel_Empty\">\n          {t('toolbar:commentPlugin.No_Comments')}\n        </div>\n      ) : (\n        <CommentsPanelList\n          activeIDs={activeIDs}\n          comments={comments}\n          deleteCommentOrThread={deleteCommentOrThread}\n          listRef={listRef}\n          submitAddComment={submitAddComment}\n          markNodeMap={markNodeMap}\n          t={t}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction useCollabAuthorName(): string {\n  const collabContext = useCollaborationContext();\n  const { yjsDocMap, name } = collabContext;\n  return yjsDocMap.has('comments') ? name : 'Playground User';\n}\n\nexport default function CommentPlugin({\n  providerFactory,\n}: {\n  providerFactory?: (\n    id: string,\n    yjsDocMap: Map<string, Doc>\n  ) => WebsocketProvider;\n}): JSX.Element {\n  const collabContext = useCollaborationContext();\n  const [editor] = useLexicalComposerContext();\n  const commentStore = useMemo(() => new CommentStore(editor), [editor]);\n  const comments = useCommentStore(commentStore);\n  const markNodeMap = useMemo<Map<string, Set<NodeKey>>>(() => {\n    return new Map();\n  }, []);\n  const [activeAnchorKey, setActiveAnchorKey] = useState<NodeKey | null>();\n  const [activeIDs, setActiveIDs] = useState<Array<string>>([]);\n  const [showCommentInput, setShowCommentInput] = useState(false);\n  const [showComments, setShowComments] = useState(false);\n  const { yjsDocMap } = collabContext;\n  const { t } = useTranslation(['toolbar']);\n\n  useEffect(() => {\n    if (providerFactory) {\n      const provider = providerFactory('comments', yjsDocMap);\n      return commentStore.registerCollaboration(provider);\n    }\n  }, [commentStore, providerFactory, yjsDocMap]);\n\n  const cancelAddComment = useCallback(() => {\n    editor.update(() => {\n      const selection = $getSelection();\n      // Restore selection\n      if (selection !== null) {\n        selection.dirty = true;\n      }\n    });\n    setShowCommentInput(false);\n  }, [editor]);\n\n  const deleteCommentOrThread = useCallback(\n    (comment: Comment | Thread, thread?: Thread) => {\n      if (comment.type === 'comment') {\n        const deletionInfo = commentStore.deleteCommentOrThread(\n          comment,\n          thread\n        );\n        if (!deletionInfo) return;\n        const { markedComment, index } = deletionInfo;\n        commentStore.addComment(markedComment, thread, index);\n      } else {\n        commentStore.deleteCommentOrThread(comment);\n        // Remove ids from associated marks\n        const id = thread !== undefined ? thread.id : comment.id;\n        const markNodeKeys = markNodeMap.get(id);\n        if (markNodeKeys !== undefined) {\n          // Do async to avoid causing a React infinite loop\n          setTimeout(() => {\n            editor.update(() => {\n              for (const key of markNodeKeys) {\n                const node: null | MarkNode = $getNodeByKey(key);\n                if ($isMarkNode(node)) {\n                  node.deleteID(id);\n                  if (node.getIDs().length === 0) {\n                    $unwrapMarkNode(node);\n                  }\n                }\n              }\n            });\n          });\n        }\n      }\n    },\n    [commentStore, editor, markNodeMap]\n  );\n\n  const submitAddComment = useCallback(\n    (\n      commentOrThread: Comment | Thread,\n      isInlineComment: boolean,\n      thread?: Thread\n    ) => {\n      commentStore.addComment(commentOrThread, thread);\n      if (isInlineComment) {\n        editor.update(() => {\n          const selection = $getSelection();\n          if ($isRangeSelection(selection)) {\n            const focus = selection.focus;\n            const anchor = selection.anchor;\n            const isBackward = selection.isBackward();\n            const id = commentOrThread.id;\n\n            // Wrap content in a MarkNode\n            $wrapSelectionInMarkNode(selection, isBackward, id);\n\n            // Make selection collapsed at the end\n            if (isBackward) {\n              focus.set(anchor.key, anchor.offset, anchor.type);\n            } else {\n              anchor.set(focus.key, focus.offset, focus.type);\n            }\n          }\n        });\n        setShowCommentInput(false);\n      }\n    },\n    [commentStore, editor]\n  );\n\n  useEffect(() => {\n    const changedElems: Array<HTMLElement> = [];\n    for (let i = 0; i < activeIDs.length; i++) {\n      const id = activeIDs[i];\n      const keys = markNodeMap.get(id);\n      if (keys !== undefined) {\n        for (const key of keys) {\n          const elem = editor.getElementByKey(key);\n          if (elem !== null) {\n            elem.classList.add('selected');\n            changedElems.push(elem);\n            setShowComments(true);\n          }\n        }\n      }\n    }\n    return () => {\n      for (let i = 0; i < changedElems.length; i++) {\n        const changedElem = changedElems[i];\n        changedElem.classList.remove('selected');\n      }\n    };\n  }, [activeIDs, editor, markNodeMap]);\n\n  useEffect(() => {\n    const markNodeKeysToIDs: Map<NodeKey, Array<string>> = new Map();\n\n    return mergeRegister(\n      registerNestedElementResolver<MarkNode>(\n        editor,\n        MarkNode,\n        (from: MarkNode) => {\n          return $createMarkNode(from.getIDs());\n        },\n        (from: MarkNode, to: MarkNode) => {\n          // Merge the IDs\n          const ids = from.getIDs();\n          ids.forEach((id) => {\n            to.addID(id);\n          });\n        }\n      ),\n      editor.registerMutationListener(MarkNode, (mutations) => {\n        editor.getEditorState().read(() => {\n          for (const [key, mutation] of mutations) {\n            const node: null | MarkNode = $getNodeByKey(key);\n            let ids: NodeKey[] = [];\n\n            if (mutation === 'destroyed') {\n              ids = markNodeKeysToIDs.get(key) || [];\n            } else if ($isMarkNode(node)) {\n              ids = node.getIDs();\n            }\n\n            for (let i = 0; i < ids.length; i++) {\n              const id = ids[i];\n              let markNodeKeys = markNodeMap.get(id);\n              markNodeKeysToIDs.set(key, ids);\n\n              if (mutation === 'destroyed') {\n                if (markNodeKeys !== undefined) {\n                  markNodeKeys.delete(key);\n                  if (markNodeKeys.size === 0) {\n                    markNodeMap.delete(id);\n                  }\n                }\n              } else {\n                if (markNodeKeys === undefined) {\n                  markNodeKeys = new Set();\n                  markNodeMap.set(id, markNodeKeys);\n                }\n                if (!markNodeKeys.has(key)) {\n                  markNodeKeys.add(key);\n                }\n              }\n            }\n          }\n        });\n      }),\n      editor.registerUpdateListener(({ editorState, tags }) => {\n        editorState.read(() => {\n          const selection = $getSelection();\n          let hasActiveIds = false;\n          let hasAnchorKey = false;\n\n          if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n\n            if ($isTextNode(anchorNode)) {\n              const commentIDs = $getMarkIDs(\n                anchorNode,\n                selection.anchor.offset\n              );\n              if (commentIDs !== null) {\n                setActiveIDs(commentIDs);\n                hasActiveIds = true;\n              }\n              if (!selection.isCollapsed()) {\n                setActiveAnchorKey(anchorNode.getKey());\n                hasAnchorKey = true;\n              }\n            }\n          }\n          if (!hasActiveIds) {\n            setActiveIDs((_activeIds) =>\n              _activeIds.length === 0 ? _activeIds : []\n            );\n          }\n          if (!hasAnchorKey) {\n            setActiveAnchorKey(null);\n          }\n        });\n        if (!tags.has('collaboration')) {\n          setShowCommentInput(false);\n        }\n      }),\n      editor.registerCommand(\n        INSERT_INLINE_COMMAND,\n        () => {\n          const domSelection = window.getSelection();\n          if (domSelection !== null) {\n            domSelection.removeAllRanges();\n          }\n          setShowCommentInput(true);\n          return true;\n        },\n        COMMAND_PRIORITY_EDITOR\n      )\n    );\n  }, [editor, markNodeMap]);\n\n  const onAddComment = () => {\n    editor.dispatchCommand(INSERT_INLINE_COMMAND, undefined);\n  };\n\n  return (\n    <>\n      {showCommentInput &&\n        createPortal(\n          <CommentInputBox\n            editor={editor}\n            cancelAddComment={cancelAddComment}\n            submitAddComment={submitAddComment}\n            t={t}\n          />,\n          document.body\n        )}\n      {activeAnchorKey !== null &&\n        activeAnchorKey !== undefined &&\n        !showCommentInput &&\n        createPortal(\n          <AddCommentBox\n            anchorKey={activeAnchorKey}\n            editor={editor}\n            onAddComment={onAddComment}\n          />,\n          document.body\n        )}\n      {createPortal(\n        <Button\n          className={`CommentPlugin_ShowCommentsButton ${\n            showComments ? 'active' : ''\n          }`}\n          onClick={() => setShowComments(!showComments)}\n          title={\n            showComments\n              ? t('toolbar:commentPlugin.Hide_Comments')\n              : t('toolbar:commentPlugin.Show_Comments')\n          }\n        >\n          <i className=\"comments\" />\n        </Button>,\n        document.body\n      )}\n      {showComments &&\n        createPortal(\n          <CommentsPanel\n            comments={comments}\n            submitAddComment={submitAddComment}\n            deleteCommentOrThread={deleteCommentOrThread}\n            activeIDs={activeIDs}\n            markNodeMap={markNodeMap}\n            t={t}\n          />,\n          document.body\n        )}\n    </>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $isCodeHighlightNode } from '@lexical/code';\nimport { $isLinkNode, TOGGLE_LINK_COMMAND } from '@lexical/link';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { $isAtNodeEnd } from '@lexical/selection';\nimport { mergeRegister } from '@lexical/utils';\nimport {\n  $getSelection,\n  $isRangeSelection,\n  $isTextNode,\n  COMMAND_PRIORITY_LOW,\n  ElementNode,\n  FORMAT_TEXT_COMMAND,\n  LexicalEditor,\n  RangeSelection,\n  SELECTION_CHANGE_COMMAND,\n  TextNode,\n} from 'lexical';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { INSERT_INLINE_COMMAND } from './CommentPlugin';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nfunction setPopupPosition(\n  editor: HTMLElement,\n  rect: ClientRect,\n  rootElementRect: ClientRect\n): void {\n  let top = rect.top - 8 + window.pageYOffset;\n  let left =\n    rect.left + 340 + window.pageXOffset - editor.offsetWidth + rect.width;\n  if (\n    rect.width >= rootElementRect.width - 20 ||\n    left > rootElementRect.width - 150\n  ) {\n    left = rect.left;\n    top = rect.top - 50 + window.pageYOffset;\n  }\n  if (top < rootElementRect.top) {\n    top = rect.bottom + 20;\n  }\n  editor.style.opacity = '1';\n  editor.style.top = `${top}px`;\n  editor.style.left = `${left}px`;\n}\n\nfunction FloatingCharacterStylesEditor({\n  editor,\n  isLink,\n  isBold,\n  isItalic,\n  isUnderline,\n  isCode,\n  isStrikethrough,\n  isSubscript,\n  isSuperscript,\n  t,\n}: {\n  editor: LexicalEditor;\n  isBold: boolean;\n  isCode: boolean;\n  isItalic: boolean;\n  isLink: boolean;\n  isStrikethrough: boolean;\n  isSubscript: boolean;\n  isSuperscript: boolean;\n  isUnderline: boolean;\n  t: TFunction;\n}): JSX.Element {\n  const popupCharStylesEditorRef = useRef<HTMLDivElement | null>(null);\n  const mouseDownRef = useRef(false);\n\n  const insertLink = useCallback(() => {\n    if (!isLink) {\n      editor.dispatchCommand(TOGGLE_LINK_COMMAND, 'https://');\n    } else {\n      editor.dispatchCommand(TOGGLE_LINK_COMMAND, null);\n    }\n  }, [editor, isLink]);\n\n  const insertComment = () => {\n    editor.dispatchCommand(INSERT_INLINE_COMMAND, null);\n  };\n\n  const updateCharacterStylesEditor = useCallback(() => {\n    const selection = $getSelection();\n\n    const popupCharStylesEditorElem = popupCharStylesEditorRef.current;\n    const nativeSelection = window.getSelection();\n\n    if (popupCharStylesEditorElem === null) {\n      return;\n    }\n\n    const rootElement = editor.getRootElement();\n    if (\n      selection !== null &&\n      nativeSelection !== null &&\n      !nativeSelection.isCollapsed &&\n      rootElement !== null &&\n      rootElement.contains(nativeSelection.anchorNode)\n    ) {\n      const domRange = nativeSelection.getRangeAt(0);\n      const rootElementRect = rootElement.getBoundingClientRect();\n      let rect;\n\n      if (nativeSelection.anchorNode === rootElement) {\n        let inner = rootElement;\n        while (inner.firstElementChild != null) {\n          inner = inner.firstElementChild as HTMLElement;\n        }\n        rect = inner.getBoundingClientRect();\n      } else {\n        rect = domRange.getBoundingClientRect();\n      }\n\n      if (!mouseDownRef.current) {\n        setPopupPosition(popupCharStylesEditorElem, rect, rootElementRect);\n      }\n    }\n  }, [editor]);\n\n  useEffect(() => {\n    const onResize = () => {\n      editor.getEditorState().read(() => {\n        updateCharacterStylesEditor();\n      });\n    };\n    window.addEventListener('resize', onResize);\n\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [editor, updateCharacterStylesEditor]);\n\n  useEffect(() => {\n    editor.getEditorState().read(() => {\n      updateCharacterStylesEditor();\n    });\n    return mergeRegister(\n      editor.registerUpdateListener(({ editorState }) => {\n        editorState.read(() => {\n          updateCharacterStylesEditor();\n        });\n      }),\n\n      editor.registerCommand(\n        SELECTION_CHANGE_COMMAND,\n        () => {\n          updateCharacterStylesEditor();\n          return false;\n        },\n        COMMAND_PRIORITY_LOW\n      )\n    );\n  }, [editor, updateCharacterStylesEditor]);\n\n  return (\n    <div ref={popupCharStylesEditorRef} className=\"verbum-character-style-popup\">\n      <button\n        onClick={() => {\n          editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'bold');\n        }}\n        className={'verbum-popup-item spaced ' + (isBold ? 'active' : '')}\n        aria-label={t('toolbar:characterStylesPopupPlugin.Format_text_as_bold')}\n        type=\"button\"\n      >\n        <i className=\"verbum-format verbum-bold\" />\n      </button>\n      <button\n        onClick={() => {\n          editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'italic');\n        }}\n        className={'verbum-popup-item spaced ' + (isItalic ? 'active' : '')}\n        aria-label={t(\n          'toolbar:characterStylesPopupPlugin.Format_text_as_italics'\n        )}\n        type=\"button\"\n      >\n        <i className=\"verbum-format verbum-italic\" />\n      </button>\n      <button\n        onClick={() => {\n          editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'underline');\n        }}\n        className={'verbum-popup-item spaced ' + (isUnderline ? 'active' : '')}\n        aria-label={t(\n          'toolbar:characterStylesPopupPlugin.Format_text_to_underlined'\n        )}\n        type=\"button\"\n      >\n        <i className=\"verbum-format verbum-underline\" />\n      </button>\n      <button\n        onClick={() => {\n          editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'strikethrough');\n        }}\n        className={'verbum-popup-item spaced ' + (isStrikethrough ? 'active' : '')}\n        aria-label={t(\n          'toolbar:characterStylesPopupPlugin.Format_text_with_a_strikethrough'\n        )}\n        type=\"button\"\n      >\n        <i className=\"verbum-format verbum-strikethrough\" />\n      </button>\n      <button\n        onClick={() => {\n          editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'subscript');\n        }}\n        className={'verbum-popup-item spaced ' + (isSubscript ? 'active' : '')}\n        title=\"Subscript\"\n        aria-label={t('toolbar:characterStylesPopupPlugin.Format_Subscript')}\n        type=\"button\"\n      >\n        <i className=\"verbum-format verbum-subscript\" />\n      </button>\n      <button\n        onClick={() => {\n          editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'superscript');\n        }}\n        className={'verbum-popup-item spaced ' + (isSuperscript ? 'active' : '')}\n        title=\"Superscript\"\n        aria-label={t('toolbar:characterStylesPopupPlugin.Format_Superscript')}\n        type=\"button\"\n      >\n        <i className=\"verbum-format verbum-superscript\" />\n      </button>\n      <button\n        onClick={() => {\n          editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'code');\n        }}\n        className={'verbum-popup-item spaced ' + (isCode ? 'active' : '')}\n        aria-label={t('toolbar:characterStylesPopupPlugin.Insert_code_block')}\n        type=\"button\"\n      >\n        <i className=\"verbum-format verbum-code\" />\n      </button>\n      <button\n        onClick={insertLink}\n        className={'verbum-popup-item spaced ' + (isLink ? 'active' : '')}\n        aria-label={t('toolbar:characterStylesPopupPlugin.Insert_link')}\n        type=\"button\"\n      >\n        <i className=\"verbum-format verbum-link\" />\n      </button>\n      <button\n        onClick={insertComment}\n        className={'verbum-popup-item spaced ' + (isLink ? 'active' : '')}\n        aria-label={t('toolbar:characterStylesPopupPlugin.Add_comment')}\n        type=\"button\"\n      >\n        <i className=\"verbum-format verbum-add-comment\" />\n      </button>\n    </div>\n  );\n}\n\nfunction getSelectedNode(selection: RangeSelection): TextNode | ElementNode {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = selection.anchor.getNode();\n  const focusNode = selection.focus.getNode();\n  if (anchorNode === focusNode) {\n    return anchorNode;\n  }\n  const isBackward = selection.isBackward();\n  if (isBackward) {\n    return $isAtNodeEnd(focus) ? anchorNode : focusNode;\n  } else {\n    return $isAtNodeEnd(anchor) ? focusNode : anchorNode;\n  }\n}\n\nfunction useCharacterStylesPopup(editor: LexicalEditor): JSX.Element | null {\n  const [isText, setIsText] = useState(false);\n  const [isLink, setIsLink] = useState(false);\n  const [isBold, setIsBold] = useState(false);\n  const [isItalic, setIsItalic] = useState(false);\n  const [isUnderline, setIsUnderline] = useState(false);\n  const [isStrikethrough, setIsStrikethrough] = useState(false);\n  const [isSubscript, setIsSubscript] = useState(false);\n  const [isSuperscript, setIsSuperscript] = useState(false);\n  const [isCode, setIsCode] = useState(false);\n  const { t } = useTranslation(['toolbar']);\n\n  const updatePopup = useCallback(() => {\n    editor.getEditorState().read(() => {\n      const selection = $getSelection();\n      const nativeSelection = window.getSelection();\n      const rootElement = editor.getRootElement();\n\n      if (\n        nativeSelection !== null &&\n        (!$isRangeSelection(selection) ||\n          rootElement === null ||\n          !rootElement.contains(nativeSelection.anchorNode))\n      ) {\n        setIsText(false);\n        return;\n      }\n\n      if (!$isRangeSelection(selection)) {\n        return;\n      }\n\n      const node = getSelectedNode(selection);\n\n      // Update text format\n      setIsBold(selection.hasFormat('bold'));\n      setIsItalic(selection.hasFormat('italic'));\n      setIsUnderline(selection.hasFormat('underline'));\n      setIsStrikethrough(selection.hasFormat('strikethrough'));\n      setIsSubscript(selection.hasFormat('subscript'));\n      setIsSuperscript(selection.hasFormat('superscript'));\n      setIsCode(selection.hasFormat('code'));\n\n      // Update links\n      const parent = node.getParent();\n      if ($isLinkNode(parent) || $isLinkNode(node)) {\n        setIsLink(true);\n      } else {\n        setIsLink(false);\n      }\n\n      if (\n        !$isCodeHighlightNode(selection.anchor.getNode()) &&\n        selection.getTextContent() !== ''\n      ) {\n        setIsText($isTextNode(node));\n      } else {\n        setIsText(false);\n      }\n    });\n  }, [editor]);\n\n  useEffect(() => {\n    document.addEventListener('selectionchange', updatePopup);\n    return () => {\n      document.removeEventListener('selectionchange', updatePopup);\n    };\n  }, [updatePopup]);\n\n  useEffect(() => {\n    return editor.registerUpdateListener(() => {\n      updatePopup();\n    });\n  }, [editor, updatePopup]);\n\n  if (!isText || isLink) {\n    return null;\n  }\n\n  return createPortal(\n    <FloatingCharacterStylesEditor\n      editor={editor}\n      isLink={isLink}\n      isBold={isBold}\n      isItalic={isItalic}\n      isStrikethrough={isStrikethrough}\n      isSubscript={isSubscript}\n      isSuperscript={isSuperscript}\n      isUnderline={isUnderline}\n      isCode={isCode}\n      t={t}\n    />,\n    document.body\n  );\n}\n\nexport default function CharacterStylesPopupPlugin(): JSX.Element | null {\n  const [editor] = useLexicalComposerContext();\n  return useCharacterStylesPopup(editor);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { LinkNode } from '@lexical/link';\nimport type { LexicalEditor } from 'lexical';\n\nimport { $isLinkNode } from '@lexical/link';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { $getNearestNodeFromDOMNode } from 'lexical';\nimport { useEffect, useRef } from 'react';\n\ntype LinkFilter = (event: MouseEvent, linkNode: LinkNode) => boolean;\nexport default function ClickableLinkPlugin({\n  filter,\n  newTab = true,\n}: {\n  filter?: LinkFilter;\n  newTab?: boolean;\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n  const hasMoved = useRef(false);\n  useEffect(() => {\n    let prevOffsetX;\n    let prevOffsetY;\n\n    function onPointerDown(event: PointerEvent) {\n      prevOffsetX = event.offsetX;\n      prevOffsetY = event.offsetY;\n    }\n\n    function onPointerUp(event: PointerEvent) {\n      hasMoved.current =\n        event.offsetX !== prevOffsetX || event.offsetY !== prevOffsetY;\n    }\n\n    function onClick(e: Event) {\n      // Based on pointerdown/up we can check if cursor moved during click event,\n      // and ignore clicks with moves (to allow link text selection)\n      const hasMovedDuringClick = hasMoved.current;\n      hasMoved.current = false;\n      // $FlowExpectedError[incompatible-cast] onClick handler will get MouseEvent, safe to cast\n      const event = e as MouseEvent;\n      const linkDomNode = getLinkDomNode(event, editor);\n\n      if (linkDomNode === null) {\n        return;\n      }\n\n      const href = linkDomNode.getAttribute('href');\n\n      if (\n        linkDomNode.getAttribute('contenteditable') === 'false' ||\n        href === undefined\n      ) {\n        return;\n      }\n\n      let linkNode = null;\n      editor.update(() => {\n        const maybeLinkNode = $getNearestNodeFromDOMNode(linkDomNode);\n\n        if ($isLinkNode(maybeLinkNode)) {\n          linkNode = maybeLinkNode;\n        }\n      });\n\n      if (\n        linkNode === null ||\n        (filter !== undefined && !filter(event, linkNode))\n      ) {\n        return;\n      }\n\n      if (hasMovedDuringClick) {\n        return;\n      }\n\n      try {\n        window.open(\n          href,\n          newTab || event.metaKey || event.ctrlKey ? '_blank' : '_self'\n        );\n      } catch {\n        // It didn't work, which is better than throwing an exception!\n      }\n    }\n\n    return editor.registerRootListener(\n      (\n        rootElement: null | HTMLElement,\n        prevRootElement: null | HTMLElement\n      ) => {\n        if (prevRootElement !== null) {\n          prevRootElement.removeEventListener('pointerdown', onPointerDown);\n          prevRootElement.removeEventListener('pointerup', onPointerUp);\n          prevRootElement.removeEventListener('click', onClick);\n        }\n\n        if (rootElement !== null) {\n          rootElement.addEventListener('click', onClick);\n          rootElement.addEventListener('pointerdown', onPointerDown);\n          rootElement.addEventListener('pointerup', onPointerUp);\n        }\n      }\n    );\n  }, [editor, filter, newTab]);\n  return null;\n}\n\nfunction isLinkDomNode(domNode: Node): boolean {\n  return domNode.nodeName.toLowerCase() === 'a';\n}\n\nfunction getLinkDomNode(\n  event: MouseEvent,\n  editor: LexicalEditor\n): HTMLAnchorElement | null {\n  return editor.getEditorState().read(() => {\n    // $FlowExpectedError[incompatible-cast]\n    const domNode = event.target as Node;\n\n    if (isLinkDomNode(domNode)) {\n      // $FlowExpectedError[incompatible-cast]\n      return domNode as HTMLAnchorElement;\n    }\n\n    if (domNode.parentNode && isLinkDomNode(domNode.parentNode)) {\n      // $FlowExpectedError[incompatible-cast]\n      return domNode.parentNode as HTMLAnchorElement;\n    }\n\n    return null;\n  });\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { registerCodeHighlighting } from '@lexical/code';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { useEffect } from 'react';\n\nexport default function CodeHighlightPlugin(): JSX.Element | null {\n  const [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    return registerCodeHighlighting(editor);\n  }, [editor]);\n\n  return null;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { TextNode } from 'lexical';\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { useLexicalTextEntity } from '@lexical/react/useLexicalTextEntity';\nimport { useCallback, useEffect } from 'react';\n\nimport { $createKeywordNode, KeywordNode } from '../nodes/KeywordNode';\n\nconst KEYWORDS_REGEX =\n  /(^|$|[^A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎↃↄⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々〆〱-〵〻〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛥꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ])(congrats|congratulations|gratuluju|gratuluji|gratulujeme|blahopřeju|blahopřeji|blahopřejeme|Til lykke|Tillykke|Glückwunsch|Gratuliere|felicitaciones|enhorabuena|paljon onnea|onnittelut|Félicitations|gratula|gratulálok|gratulálunk|congratulazioni|complimenti|おめでとう|おめでとうございます|축하해|축하해요|gratulerer|Gefeliciteerd|gratulacje|Parabéns|parabéns|felicitações|felicitări|мои поздравления|поздравляем|поздравляю|gratulujem|blahoželám|ยินดีด้วย|ขอแสดงความยินดี|tebrikler|tebrik ederim|恭喜|祝贺你|恭喜你|恭喜|恭喜|baie geluk|veels geluk|অভিনন্দন|Čestitam|Čestitke|Čestitamo|Συγχαρητήρια|Μπράβο|અભિનંદન|badhai|बधाई|अभिनंदन|Честитам|Свака част|hongera|வாழ்த்துகள்|வாழ்த்துக்கள்|అభినందనలు|അഭിനന്ദനങ്ങൾ|Chúc mừng|מזל טוב|mazel tov|mazal tov)(^|$|[^A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎↃↄⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々〆〱-〵〻〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛥꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ])/i;\n\nexport default function KeywordsPlugin(): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    if (!editor.hasNodes([KeywordNode])) {\n      throw new Error('KeywordsPlugin: KeywordNode not registered on editor');\n    }\n  }, [editor]);\n\n  const createKeywordNode = useCallback((textNode: TextNode): KeywordNode => {\n    return $createKeywordNode(textNode.getTextContent());\n  }, []);\n\n  const getKeywordMatch = useCallback((text: string) => {\n    const matchArr = KEYWORDS_REGEX.exec(text);\n\n    if (matchArr === null) {\n      return null;\n    }\n\n    const hashtagLength = matchArr[2].length;\n    const startOffset = matchArr.index + matchArr[1].length;\n    const endOffset = startOffset + hashtagLength;\n    return {\n      end: endOffset,\n      start: startOffset,\n    };\n  }, []);\n\n  useLexicalTextEntity<KeywordNode>(\n    getKeywordMatch,\n    KeywordNode,\n    createKeywordNode\n  );\n\n  return null;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { RangeSelection } from 'lexical';\n\nimport { $getListDepth, $isListItemNode, $isListNode } from '@lexical/list';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n  $getSelection,\n  $isElementNode,\n  $isRangeSelection,\n  COMMAND_PRIORITY_CRITICAL,\n  ElementNode,\n  INDENT_CONTENT_COMMAND,\n} from 'lexical';\nimport { useEffect } from 'react';\n\ntype Props = Readonly<{\n  maxDepth: number | null | undefined;\n}>;\n\nfunction getElementNodesInSelection(\n  selection: RangeSelection\n): Set<ElementNode> {\n  const nodesInSelection = selection.getNodes();\n\n  if (nodesInSelection.length === 0) {\n    return new Set([\n      selection.anchor.getNode().getParentOrThrow(),\n      selection.focus.getNode().getParentOrThrow(),\n    ]);\n  }\n\n  return new Set(\n    nodesInSelection.map((n) => ($isElementNode(n) ? n : n.getParentOrThrow()))\n  );\n}\n\nfunction isIndentPermitted(maxDepth: number): boolean {\n  const selection = $getSelection();\n\n  if (!$isRangeSelection(selection)) {\n    return false;\n  }\n\n  const elementNodesInSelection: Set<ElementNode> =\n    getElementNodesInSelection(selection);\n\n  let totalDepth = 0;\n\n  for (const elementNode of elementNodesInSelection) {\n    if ($isListNode(elementNode)) {\n      totalDepth = Math.max($getListDepth(elementNode) + 1, totalDepth);\n    } else if ($isListItemNode(elementNode)) {\n      const parent = elementNode.getParent();\n\n      if (!$isListNode(parent)) {\n        throw new Error(\n          'ListMaxIndentLevelPlugin: A ListItemNode must have a ListNode for a parent.'\n        );\n      }\n\n      totalDepth = Math.max($getListDepth(parent) + 1, totalDepth);\n    }\n  }\n\n  return totalDepth <= maxDepth;\n}\n\nexport default function ListMaxIndentLevelPlugin({ maxDepth }: Props): null {\n  const [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    return editor.registerCommand(\n      INDENT_CONTENT_COMMAND,\n      () => !isIndentPermitted(maxDepth ?? 7),\n      COMMAND_PRIORITY_CRITICAL\n    );\n  }, [editor, maxDepth]);\n  return null;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nimport { MarkdownShortcutPlugin } from '@lexical/react/LexicalMarkdownShortcutPlugin';\nimport * as React from 'react';\n\nimport { PLAYGROUND_TRANSFORMERS } from './MarkdownTransformers';\n\nexport default function MarkdownPlugin(): JSX.Element {\n  return <MarkdownShortcutPlugin transformers={PLAYGROUND_TRANSFORMERS} />;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n  $getSelection,\n  $isRangeSelection,\n  $setSelection,\n  FOCUS_COMMAND,\n} from 'lexical';\nimport { useEffect } from 'react';\n\nconst COMMAND_PRIORITY_LOW = 1;\nconst TAB_TO_FOCUS_INTERVAL = 100;\n\nlet lastTabKeyDownTimestamp = 0;\nlet hasRegisteredKeyDownListener = false;\n\nfunction registerKeyTimeStampTracker() {\n  window.addEventListener(\n    'keydown',\n    (event: KeyboardEvent) => {\n      // Tab\n      if (event.keyCode === 9) {\n        lastTabKeyDownTimestamp = event.timeStamp;\n      }\n    },\n    true\n  );\n}\n\nexport default function TabFocusPlugin(): null {\n  const [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    if (!hasRegisteredKeyDownListener) {\n      registerKeyTimeStampTracker();\n      hasRegisteredKeyDownListener = true;\n    }\n\n    return editor.registerCommand(\n      FOCUS_COMMAND,\n      (event: FocusEvent) => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n          if (\n            lastTabKeyDownTimestamp + TAB_TO_FOCUS_INTERVAL >\n            event.timeStamp\n          ) {\n            $setSelection(selection.clone());\n          }\n        }\n        return false;\n      },\n      COMMAND_PRIORITY_LOW\n    );\n  }, [editor]);\n\n  return null;\n}\n","import { LexicalEditor } from 'lexical';\nimport React, { createContext } from 'react';\n\ninterface IEditorContext {\n  initialEditor: LexicalEditor;\n  activeEditor: LexicalEditor;\n  setActiveEditor: React.Dispatch<React.SetStateAction<LexicalEditor>>;\n}\n\nconst EditorContext = createContext<IEditorContext | null>(null);\n\nexport default EditorContext;\n","import { $isAtNodeEnd } from '@lexical/selection';\nimport { ElementNode, RangeSelection, TextNode } from 'lexical';\n\nexport function getSelectedNode(\n  selection: RangeSelection\n): TextNode | ElementNode {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = selection.anchor.getNode();\n  const focusNode = selection.focus.getNode();\n  if (anchorNode === focusNode) {\n    return anchorNode;\n  }\n  const isBackward = selection.isBackward();\n  if (isBackward) {\n    return $isAtNodeEnd(focus) ? anchorNode : focusNode;\n  } else {\n    return $isAtNodeEnd(anchor) ? focusNode : anchorNode;\n  }\n}\n","import { LexicalEditor } from 'lexical';\nimport React, { createContext } from 'react';\n\ninterface IToolbarContext {\n  isRTL: boolean;\n  isBold: boolean;\n  isItalic: boolean;\n  isUnderline: boolean;\n  isCode: boolean;\n  isLink: boolean;\n  isStrikethrough: boolean;\n  isSubscript: boolean;\n  isSuperscript: boolean;\n  canUndo: boolean;\n  canRedo: boolean;\n  fontFamily: string;\n  fontSize: string;\n  fontColor: string;\n  bgColor: string;\n  blockType: string;\n  codeLanguage: string;\n  selectedElementKey: string;\n  applyStyleText: (styles: Record<string, string>) => void;\n  insertLink: () => void;\n}\n\nconst ToolbarContext = createContext<IToolbarContext | null>(null);\n\nexport default ToolbarContext;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useEffect, useRef, useState } from 'react';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\n\nexport default function DropDown({\n  buttonLabel,\n  buttonAriaLabel,\n  buttonClassName,\n  buttonIconClassName,\n  children,\n  stopCloseOnClickSelf,\n}: {\n  buttonAriaLabel?: string;\n  buttonClassName: string;\n  buttonIconClassName?: string;\n  buttonLabel?: string;\n  children: JSX.Element | string | (JSX.Element | string)[];\n  stopCloseOnClickSelf?: boolean;\n}): JSX.Element {\n  const dropDownRef = useRef<HTMLDivElement | null>(null);\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n  const [showDropDown, setShowDropDown] = useState(false);\n\n  useEffect(() => {\n    const button = buttonRef.current;\n    const dropDown = dropDownRef.current;\n\n    if (showDropDown && button !== null && dropDown !== null) {\n      const { top, left } = button.getBoundingClientRect();\n      dropDown.style.top = `${top + 40}px`;\n      dropDown.style.left = `${Math.min(\n        left,\n        window.innerWidth - dropDown.offsetWidth - 20\n      )}px`;\n    }\n  }, [dropDownRef, buttonRef, showDropDown]);\n\n  useEffect(() => {\n    const button = buttonRef.current;\n\n    if (button !== null && showDropDown) {\n      const handle = (event: MouseEvent) => {\n        const target = event.target;\n        if (stopCloseOnClickSelf) {\n          if (dropDownRef.current.contains(target as Node)) return;\n        }\n        if (!button.contains(target as Node)) {\n          setShowDropDown(false);\n        }\n      };\n      document.addEventListener('click', handle);\n\n      return () => {\n        document.removeEventListener('click', handle);\n      };\n    }\n  }, [dropDownRef, buttonRef, showDropDown, stopCloseOnClickSelf]);\n\n  return (\n    <>\n      <button\n        aria-label={buttonAriaLabel || buttonLabel}\n        className={buttonClassName}\n        onClick={() => setShowDropDown(!showDropDown)}\n        ref={buttonRef}\n        type=\"button\"\n      >\n        {buttonIconClassName && <span className={buttonIconClassName} />}\n        {buttonLabel && (\n          <span className=\"verbum-text verbum-dropdown-button-text\">{buttonLabel}</span>\n        )}\n        <i className=\"verbum-chevron-down\" />\n      </button>\n\n      {showDropDown &&\n        createPortal(\n          <div className=\"verbum-dropdown\" ref={dropDownRef}>\n            {children}\n          </div>,\n          document.body\n        )}\n    </>\n  );\n}\n","import React, { useContext } from 'react';\nimport DropDown from '../../../ui/DropDown';\n\nimport {\n  FORMAT_ELEMENT_COMMAND,\n  INDENT_CONTENT_COMMAND,\n  LexicalEditor,\n  OUTDENT_CONTENT_COMMAND,\n} from 'lexical';\nimport EditorContext from '../../../context/EditorContext';\nimport ToolbarContext from '../../../context/ToolbarContext';\nimport { useTranslation } from 'react-i18next';\n\nfunction Divider(): JSX.Element {\n  return <div className=\"verbum-divider\" />;\n}\n\nconst AlignDropdown = () => {\n  const { activeEditor } = useContext(EditorContext);\n  const { isRTL } = useContext(ToolbarContext);\n  const { t } = useTranslation('toolbar');\n  return (\n    <DropDown\n      buttonLabel={t('toolbar:alignDropdown.Title')}\n      buttonAriaLabel={t('toolbar:alignDropdown.Description')}\n      buttonClassName=\"verbum-toolbar-item spaced alignment\"\n      buttonIconClassName=\"verbum-icon verbum-left-align\"\n    >\n      <button\n        onClick={() => {\n          activeEditor.dispatchCommand(FORMAT_ELEMENT_COMMAND, 'left');\n        }}\n        className=\"verbum-item\"\n        type=\"button\"\n      >\n        <i className=\"verbum-icon verbum-left-align\" />\n        <span className=\"verbum-text\">{t('toolbar:alignDropdown.LeftAlign')}</span>\n      </button>\n      <button\n        onClick={() => {\n          activeEditor.dispatchCommand(FORMAT_ELEMENT_COMMAND, 'center');\n        }}\n        className=\"verbum-item\"\n        type=\"button\"\n      >\n        <i className=\"verbum-icon verbum-center-align\" />\n        <span className=\"verbum-text\">{t('toolbar:alignDropdown.CenterAlign')}</span>\n      </button>\n      <button\n        onClick={() => {\n          activeEditor.dispatchCommand(FORMAT_ELEMENT_COMMAND, 'right');\n        }}\n        className=\"verbum-item\"\n        type=\"button\"\n      >\n        <i className=\"verbum-icon verbum-right-align\" />\n        <span className=\"verbum-text\">{t('toolbar:alignDropdown.RightAlign')}</span>\n      </button>\n      <button\n        onClick={() => {\n          activeEditor.dispatchCommand(FORMAT_ELEMENT_COMMAND, 'justify');\n        }}\n        className=\"verbum-item\"\n        type=\"button\"\n      >\n        <i className=\"verbum-icon verbum-justify-align\" />\n        <span className=\"verbum-text\">{t('toolbar:alignDropdown.JustifyAlign')}</span>\n      </button>\n      <Divider />\n      <button\n        onClick={() => {\n          activeEditor.dispatchCommand(OUTDENT_CONTENT_COMMAND, undefined);\n        }}\n        className=\"verbum-item\"\n        type=\"button\"\n      >\n        <i className={'icon ' + (isRTL ? 'indent' : 'outdent')} />\n        <span className=\"verbum-text\">{t('toolbar:alignDropdown.Outdent')}</span>\n      </button>\n      <button\n        onClick={() => {\n          activeEditor.dispatchCommand(INDENT_CONTENT_COMMAND, undefined);\n        }}\n        className=\"verbum-item\"\n        type=\"button\"\n      >\n        <i className={'icon ' + (isRTL ? 'outdent' : 'indent')} />\n        <span className=\"verbum-text\">{t('toolbar:alignDropdown.Indent')}</span>\n      </button>\n    </DropDown>\n  );\n};\n\nexport default AlignDropdown;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport './Input.css';\n\nimport * as React from 'react';\n\ntype Props = Readonly<{\n  'data-test-id'?: string;\n  label: string;\n  onChange: (string) => void;\n  placeholder?: string;\n  value: string;\n}>;\n\nexport default function TextInput({\n  label,\n  value,\n  onChange,\n  placeholder = '',\n  'data-test-id': dataTestId,\n}: Props): JSX.Element {\n  return (\n    <div className=\"Input__wrapper\">\n      <label className=\"Input__label\">{label}</label>\n      <input\n        type=\"text\"\n        className=\"Input__input\"\n        placeholder={placeholder}\n        value={value}\n        onChange={(e) => {\n          onChange(e.target.value);\n        }}\n        data-test-id={dataTestId}\n      />\n    </div>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport './Input.css';\n\nimport * as React from 'react';\n\ntype Props = Readonly<{\n  'data-test-id'?: string;\n  accept?: string;\n  label: string;\n  onChange: (files: FileList) => void;\n}>;\n\nexport default function FileInput({\n  accept,\n  label,\n  onChange,\n  'data-test-id': dataTestId,\n}: Props): JSX.Element {\n  return (\n    <div className=\"Input__wrapper\">\n      <label className=\"Input__label\">{label}</label>\n      <input\n        type=\"file\"\n        accept={accept}\n        className=\"Input__input\"\n        onChange={(e) => onChange(e.target.files)}\n        data-test-id={dataTestId}\n      />\n    </div>\n  );\n}\n","import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { $wrapNodeInElement, mergeRegister } from \"@lexical/utils\";\nimport {\n  $createParagraphNode,\n  $insertNodes,\n  $isRootOrShadowRoot,\n  COMMAND_PRIORITY_EDITOR,\n  createCommand,\n  LexicalCommand\n} from \"lexical\";\nimport { useEffect } from \"react\";\n\nimport { $createImageNode, ImageNode, ImagePayload } from \"../nodes/ImageNode\";\n\nexport type InsertImagePayload = Readonly<ImagePayload>;\n\nexport const INSERT_IMAGE_COMMAND: LexicalCommand<InsertImagePayload> = createCommand(\n  \"INSERT_IMAGE_COMMAND\"\n);\n\nexport default function ImagesPlugin({\n  captionsEnabled\n}: {\n  captionsEnabled?: boolean;\n}): JSX.Element | null {\n  const [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    if (!editor.hasNodes([ImageNode])) {\n      throw new Error(\"ImagesPlugin: ImageNode not registered on editor\");\n    }\n\n    return mergeRegister(\n      editor.registerCommand<InsertImagePayload>(\n        INSERT_IMAGE_COMMAND,\n        (payload) => {\n          const imageNode = $createImageNode(payload);\n          $insertNodes([imageNode]);\n          if ($isRootOrShadowRoot(imageNode.getParentOrThrow())) {\n            $wrapNodeInElement(imageNode, $createParagraphNode).selectEnd();\n          }\n\n          return true;\n        },\n        COMMAND_PRIORITY_EDITOR\n      )\n    );\n  }, [captionsEnabled, editor]);\n\n  return null;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { LexicalCommand } from 'lexical';\n\nimport 'katex/dist/katex.css';\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n  $getSelection,\n  $isRangeSelection,\n  COMMAND_PRIORITY_EDITOR,\n  createCommand,\n} from 'lexical';\nimport { useEffect } from 'react';\n\nimport { $createEquationNode, EquationNode } from '../nodes/EquationNode';\n\ntype CommandPayload = {\n  equation: string;\n  inline: boolean;\n};\n\nexport const INSERT_EQUATION_COMMAND: LexicalCommand<CommandPayload> =\n  createCommand();\n\nexport default function EquationsPlugin(): JSX.Element | null {\n  const [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    if (!editor.hasNodes([EquationNode])) {\n      throw new Error(\n        'EquationsPlugins: EquationsNode not registered on editor'\n      );\n    }\n\n    return editor.registerCommand<CommandPayload>(\n      INSERT_EQUATION_COMMAND,\n      (payload) => {\n        const { equation, inline } = payload;\n        const selection = $getSelection();\n\n        if ($isRangeSelection(selection)) {\n          const equationNode = $createEquationNode(equation, inline);\n          selection.insertNodes([equationNode]);\n        }\n\n        return true;\n      },\n      COMMAND_PRIORITY_EDITOR\n    );\n  }, [editor]);\n\n  return null;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport type { LexicalCommand } from 'lexical';\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n  $getSelection,\n  $isRangeSelection,\n  COMMAND_PRIORITY_EDITOR,\n  createCommand,\n} from 'lexical';\nimport { useEffect } from 'react';\n\nimport { $createExcalidrawNode, ExcalidrawNode } from '../nodes/ExcalidrawNode';\n\nexport const INSERT_EXCALIDRAW_COMMAND: LexicalCommand<void> = createCommand();\nexport default function ExcalidrawPlugin(): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    if (!editor.hasNodes([ExcalidrawNode])) {\n      throw new Error(\n        'ExcalidrawPlugin: ExcalidrawNode not registered on editor'\n      );\n    }\n\n    return editor.registerCommand(\n      INSERT_EXCALIDRAW_COMMAND,\n      () => {\n        const selection = $getSelection();\n\n        if ($isRangeSelection(selection)) {\n          const excalidrawNode = $createExcalidrawNode();\n          selection.insertNodes([excalidrawNode]);\n        }\n\n        return true;\n      },\n      COMMAND_PRIORITY_EDITOR\n    );\n  }, [editor]);\n\n  return null;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { LexicalCommand } from 'lexical';\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n  $getSelection,\n  $isRangeSelection,\n  $isRootNode,\n  COMMAND_PRIORITY_EDITOR,\n  createCommand,\n} from 'lexical';\nimport { useEffect } from 'react';\n\nimport { $createPollNode, PollNode } from '../nodes/PollNode';\n\nexport const INSERT_POLL_COMMAND: LexicalCommand<string> = createCommand();\n\nexport default function PollPlugin(): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    if (!editor.hasNodes([PollNode])) {\n      throw new Error('PollPlugin: PollNode not registered on editor');\n    }\n\n    return editor.registerCommand<string>(\n      INSERT_POLL_COMMAND,\n      (payload) => {\n        const selection = $getSelection();\n\n        if ($isRangeSelection(selection)) {\n          const question = payload;\n          const pollNode = $createPollNode(question);\n\n          if ($isRootNode(selection.anchor.getNode())) {\n            selection.insertParagraph();\n          }\n\n          selection.insertNodes([pollNode]);\n        }\n\n        return true;\n      },\n      COMMAND_PRIORITY_EDITOR\n    );\n  }, [editor]);\n  return null;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { LexicalCommand } from 'lexical';\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n  $createParagraphNode,\n  $getSelection,\n  $isRangeSelection,\n  COMMAND_PRIORITY_EDITOR,\n  createCommand,\n} from 'lexical';\nimport { useEffect } from 'react';\n\nimport { $createTweetNode, TweetNode } from '../nodes/TweetNode';\n\nexport const INSERT_TWEET_COMMAND: LexicalCommand<string> = createCommand();\n\nexport default function TwitterPlugin(): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    if (!editor.hasNodes([TweetNode])) {\n      throw new Error('TwitterPlugin: TweetNode not registered on editor');\n    }\n\n    return editor.registerCommand<string>(\n      INSERT_TWEET_COMMAND,\n      (payload) => {\n        const selection = $getSelection();\n\n        if ($isRangeSelection(selection)) {\n          const focusNode = selection.focus.getNode();\n\n          if (focusNode !== null) {\n            const tweetNode = $createTweetNode(payload);\n            selection.focus\n              .getNode()\n              .getTopLevelElementOrThrow()\n              .insertAfter(tweetNode);\n            const paragraphNode = $createParagraphNode();\n            tweetNode.insertAfter(paragraphNode);\n            paragraphNode.select();\n          }\n        }\n\n        return true;\n      },\n      COMMAND_PRIORITY_EDITOR\n    );\n  }, [editor]);\n\n  return null;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { LexicalCommand } from 'lexical';\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n  $createParagraphNode,\n  $getSelection,\n  $isRangeSelection,\n  COMMAND_PRIORITY_EDITOR,\n  createCommand,\n} from 'lexical';\nimport { useEffect } from 'react';\n\nimport { $createYouTubeNode, YouTubeNode } from '../nodes/YouTubeNode';\n\nexport const INSERT_YOUTUBE_COMMAND: LexicalCommand<string> = createCommand();\n\nexport default function YouTubePlugin(): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    if (!editor.hasNodes([YouTubeNode])) {\n      throw new Error('YouTubePlugin: YouTubeNode not registered on editor');\n    }\n\n    return editor.registerCommand<string>(\n      INSERT_YOUTUBE_COMMAND,\n      (payload) => {\n        const selection = $getSelection();\n\n        if ($isRangeSelection(selection)) {\n          const focusNode = selection.focus.getNode();\n\n          if (focusNode !== null) {\n            const youTubeNode = $createYouTubeNode(payload);\n            selection.focus\n              .getNode()\n              .getTopLevelElementOrThrow()\n              .insertAfter(youTubeNode);\n            const paragraphNode = $createParagraphNode();\n            youTubeNode.insertAfter(paragraphNode);\n            paragraphNode.select();\n          }\n        }\n\n        return true;\n      },\n      COMMAND_PRIORITY_EDITOR\n    );\n  }, [editor]);\n\n  return null;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport './KatexEquationAlterer.css';\n\nimport * as React from 'react';\nimport { useCallback, useState } from 'react';\n\nimport Button from '../ui/Button';\nimport KatexRenderer from './KatexRenderer';\n\ntype Props = {\n  initialEquation?: string;\n  onConfirm: (string, boolean) => void;\n};\n\nexport default function KatexEquationAlterer({\n  onConfirm,\n  initialEquation = '',\n}: Props): JSX.Element {\n  const [equation, setEquation] = useState<string>(initialEquation);\n  const [inline, setInline] = useState<boolean>(true);\n\n  const onClick = useCallback(() => {\n    onConfirm(equation, inline);\n  }, [onConfirm, equation, inline]);\n\n  const onCheckboxChange = useCallback(() => {\n    setInline(!inline);\n  }, [setInline, inline]);\n\n  return (\n    <>\n      <div className=\"KatexEquationAlterer_defaultRow\">\n        Inline\n        <input type=\"checkbox\" checked={inline} onChange={onCheckboxChange} />\n      </div>\n      <div className=\"KatexEquationAlterer_defaultRow\">Equation </div>\n      <div className=\"KatexEquationAlterer_centerRow\">\n        {inline ? (\n          <input\n            onChange={(event) => {\n              setEquation(event.target.value);\n            }}\n            value={equation}\n            className=\"KatexEquationAlterer_textArea\"\n          />\n        ) : (\n          <textarea\n            onChange={(event) => {\n              setEquation(event.target.value);\n            }}\n            value={equation}\n            className=\"KatexEquationAlterer_textArea\"\n          />\n        )}\n      </div>\n      <div className=\"KatexEquationAlterer_defaultRow\">Visualization </div>\n      <div className=\"KatexEquationAlterer_centerRow\">\n        <KatexRenderer\n          equation={equation}\n          inline={false}\n          onClick={() => null}\n        />\n      </div>\n      <div className=\"KatexEquationAlterer_dialogActions\">\n        <Button onClick={onClick}>Confirm</Button>\n      </div>\n    </>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport type { Cell } from '@lexical/table';\nimport type { LexicalEditor } from 'lexical';\n\nimport './TableCellResizer.css';\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n  $getTableColumnIndexFromTableCellNode,\n  $getTableNodeFromLexicalNodeOrThrow,\n  $getTableRowIndexFromTableCellNode,\n  $isTableCellNode,\n  $isTableRowNode,\n  getCellFromTarget,\n} from '@lexical/table';\nimport {\n  $getNearestNodeFromDOMNode,\n  $getSelection,\n  DEPRECATED_$isGridSelection,\n  COMMAND_PRIORITY_HIGH,\n  SELECTION_CHANGE_COMMAND,\n} from 'lexical';\nimport * as React from 'react';\nimport {\n  ReactPortal,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { createPortal } from 'react-dom';\n\ntype MousePosition = {\n  x: number;\n  y: number;\n};\n\ntype MouseDraggingDirection = 'right' | 'bottom';\n\nconst MIN_ROW_HEIGHT = 33;\nconst MIN_COLUMN_WIDTH = 50;\n\nfunction TableCellResizer({ editor }: { editor: LexicalEditor }): JSX.Element {\n  const targetRef = useRef<HTMLElement | null>(null);\n  const resizerRef = useRef<HTMLDivElement | null>(null);\n  const tableRectRef = useRef<ClientRect | null>(null);\n\n  const mouseStartPosRef = useRef<MousePosition | null>(null);\n  const [mouseCurrentPos, updateMouseCurrentPos] =\n    useState<MousePosition | null>(null);\n\n  const [activeCell, updateActiveCell] = useState<Cell | null>(null);\n  const [isSelectingGrid, updateIsSelectingGrid] = useState<boolean>(false);\n  const [draggingDirection, updateDraggingDirection] =\n    useState<MouseDraggingDirection | null>(null);\n\n  useEffect(() => {\n    return editor.registerCommand(\n      SELECTION_CHANGE_COMMAND,\n      (payload) => {\n        const selection = $getSelection();\n        const isGridSelection = DEPRECATED_$isGridSelection(selection);\n\n        if (isSelectingGrid !== isGridSelection) {\n          updateIsSelectingGrid(isGridSelection);\n        }\n\n        return false;\n      },\n      COMMAND_PRIORITY_HIGH\n    );\n  });\n\n  const resetState = useCallback(() => {\n    updateActiveCell(null);\n    targetRef.current = null;\n    updateDraggingDirection(null);\n    mouseStartPosRef.current = null;\n    tableRectRef.current = null;\n  }, []);\n\n  useEffect(() => {\n    const onMouseMove = (event: MouseEvent) => {\n      setTimeout(() => {\n        const target = event.target;\n\n        if (draggingDirection) {\n          updateMouseCurrentPos({\n            x: event.clientX,\n            y: event.clientY,\n          });\n          return;\n        }\n\n        if (resizerRef.current && resizerRef.current.contains(target as Node)) {\n          return;\n        }\n\n        if (targetRef.current !== target) {\n          targetRef.current = target as HTMLElement;\n          const cell = getCellFromTarget(target as HTMLElement);\n\n          if (cell && activeCell !== cell) {\n            editor.update(() => {\n              const tableCellNode = $getNearestNodeFromDOMNode(cell.elem);\n              if (!tableCellNode) {\n                throw new Error('TableCellResizer: Table cell node not found.');\n              }\n\n              const tableNode =\n                $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n              const tableElement = editor.getElementByKey(tableNode.getKey());\n\n              if (!tableElement) {\n                throw new Error('TableCellResizer: Table element not found.');\n              }\n\n              targetRef.current = target as HTMLElement;\n              tableRectRef.current = tableElement.getBoundingClientRect();\n              updateActiveCell(cell);\n            });\n          } else if (cell == null) {\n            resetState();\n          }\n        }\n      }, 0);\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove);\n    };\n  }, [activeCell, draggingDirection, editor, resetState]);\n\n  const isHeightChanging = (direction: MouseDraggingDirection) => {\n    if (direction === 'bottom') return true;\n    return false;\n  };\n\n  const updateRowHeight = useCallback(\n    (newHeight: number) => {\n      if (!activeCell) {\n        throw new Error('TableCellResizer: Expected active cell.');\n      }\n\n      editor.update(() => {\n        const tableCellNode = $getNearestNodeFromDOMNode(activeCell.elem);\n        if (!$isTableCellNode(tableCellNode)) {\n          throw new Error('TableCellResizer: Table cell node not found.');\n        }\n\n        const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n\n        const tableRowIndex = $getTableRowIndexFromTableCellNode(tableCellNode);\n\n        const tableRows = tableNode.getChildren();\n\n        if (tableRowIndex >= tableRows.length || tableRowIndex < 0) {\n          throw new Error('Expected table cell to be inside of table row.');\n        }\n\n        const tableRow = tableRows[tableRowIndex];\n\n        if (!$isTableRowNode(tableRow)) {\n          throw new Error('Expected table row');\n        }\n\n        tableRow.setHeight(newHeight);\n      });\n    },\n    [activeCell, editor]\n  );\n\n  const updateColumnWidth = useCallback(\n    (newWidth: number) => {\n      if (!activeCell) {\n        throw new Error('TableCellResizer: Expected active cell.');\n      }\n      editor.update(() => {\n        const tableCellNode = $getNearestNodeFromDOMNode(activeCell.elem);\n        if (!$isTableCellNode(tableCellNode)) {\n          throw new Error('TableCellResizer: Table cell node not found.');\n        }\n\n        const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n\n        const tableColumnIndex =\n          $getTableColumnIndexFromTableCellNode(tableCellNode);\n\n        const tableRows = tableNode.getChildren();\n\n        for (let r = 0; r < tableRows.length; r++) {\n          const tableRow = tableRows[r];\n\n          if (!$isTableRowNode(tableRow)) {\n            throw new Error('Expected table row');\n          }\n\n          const tableCells = tableRow.getChildren();\n\n          if (tableColumnIndex >= tableCells.length || tableColumnIndex < 0) {\n            throw new Error('Expected table cell to be inside of table row.');\n          }\n\n          const tableCell = tableCells[tableColumnIndex];\n\n          if (!$isTableCellNode(tableCell)) {\n            throw new Error('Expected table cell');\n          }\n\n          tableCell.setWidth(newWidth);\n        }\n      });\n    },\n    [activeCell, editor]\n  );\n\n  const toggleResize = useCallback(\n    (direction) => (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (!activeCell) {\n        throw new Error('TableCellResizer: Expected active cell.');\n      }\n\n      if (draggingDirection === direction && mouseStartPosRef.current) {\n        const { x, y } = mouseStartPosRef.current;\n\n        if (!activeCell) {\n          return;\n        }\n\n        const { height, width } = activeCell.elem.getBoundingClientRect();\n\n        if (isHeightChanging(direction)) {\n          const heightChange = Math.abs(event.clientY - y);\n\n          const isShrinking = direction === 'bottom' && y > event.clientY;\n\n          updateRowHeight(\n            Math.max(\n              isShrinking ? height - heightChange : heightChange + height,\n              MIN_ROW_HEIGHT\n            )\n          );\n        } else {\n          const widthChange = Math.abs(event.clientX - x);\n\n          const isShrinking = direction === 'right' && x > event.clientX;\n\n          updateColumnWidth(\n            Math.max(\n              isShrinking ? width - widthChange : widthChange + width,\n              MIN_COLUMN_WIDTH\n            )\n          );\n        }\n\n        resetState();\n      } else {\n        mouseStartPosRef.current = {\n          x: event.clientX,\n          y: event.clientY,\n        };\n        updateMouseCurrentPos(mouseStartPosRef.current);\n        updateDraggingDirection(direction);\n      }\n    },\n    [\n      activeCell,\n      draggingDirection,\n      resetState,\n      updateColumnWidth,\n      updateRowHeight,\n    ]\n  );\n\n  const getResizers = useCallback(() => {\n    if (activeCell) {\n      const { height, width, top, left } =\n        activeCell.elem.getBoundingClientRect();\n\n      const styles = {\n        bottom: {\n          backgroundColor: 'none',\n          cursor: 'row-resize',\n          height: '10px',\n          left: `${window.pageXOffset + left}px`,\n          top: `${window.pageYOffset + top + height}px`,\n          width: `${width}px`,\n        },\n        right: {\n          backgroundColor: 'none',\n          cursor: 'col-resize',\n          height: `${height}px`,\n          left: `${window.pageXOffset + left + width}px`,\n          top: `${window.pageYOffset + top}px`,\n          width: '10px',\n        },\n      };\n\n      const tableRect = tableRectRef.current;\n\n      if (draggingDirection && mouseCurrentPos && tableRect) {\n        if (isHeightChanging(draggingDirection)) {\n          styles[draggingDirection].left = `${\n            window.pageXOffset + tableRect.left\n          }px`;\n          styles[draggingDirection].top = `${\n            window.pageYOffset + mouseCurrentPos.y\n          }px`;\n          styles[draggingDirection].height = '3px';\n          styles[draggingDirection].width = `${tableRect.width}px`;\n        } else {\n          styles[draggingDirection].top = `${\n            window.pageYOffset + tableRect.top\n          }px`;\n          styles[draggingDirection].left = `${\n            window.pageXOffset + mouseCurrentPos.x\n          }px`;\n          styles[draggingDirection].width = '3px';\n          styles[draggingDirection].height = `${tableRect.height}px`;\n        }\n\n        styles[draggingDirection].backgroundColor = '#adf';\n      }\n\n      return styles;\n    }\n\n    return {\n      bottom: null,\n      left: null,\n      right: null,\n      top: null,\n    };\n  }, [activeCell, draggingDirection, mouseCurrentPos]);\n\n  const resizerStyles = getResizers();\n\n  return (\n    <div ref={resizerRef}>\n      {activeCell != null && !isSelectingGrid && (\n        <>\n          <div\n            className=\"TableCellResizer__resizer TableCellResizer__ui\"\n            style={resizerStyles.right}\n            onMouseDown={toggleResize('right')}\n            onMouseUp={toggleResize('right')}\n          />\n          <div\n            className=\"TableCellResizer__resizer TableCellResizer__ui\"\n            style={resizerStyles.bottom}\n            onMouseDown={toggleResize('bottom')}\n            onMouseUp={toggleResize('bottom')}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default function TableCellResizerPlugin(): ReactPortal {\n  const [editor] = useLexicalComposerContext();\n\n  return useMemo(\n    () => createPortal(<TableCellResizer editor={editor} />, document.body),\n    [editor]\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n  $deleteTableColumn,\n  $getElementGridForTableNode,\n  $getTableCellNodeFromLexicalNode,\n  $getTableColumnIndexFromTableCellNode,\n  $getTableNodeFromLexicalNodeOrThrow,\n  $getTableRowIndexFromTableCellNode,\n  $insertTableColumn,\n  $insertTableRow,\n  $isTableCellNode,\n  $isTableRowNode,\n  $removeTableRowAtIndex,\n  getTableSelectionFromTableElement,\n  HTMLTableElementWithWithTableSelectionState,\n  TableCellHeaderStates,\n  TableCellNode,\n} from '@lexical/table';\nimport { TFunction } from 'i18next';\nimport {\n  $getSelection,\n  DEPRECATED_$isGridSelection,\n  $isRangeSelection,\n  $setSelection,\n} from 'lexical';\nimport * as React from 'react';\nimport { ReactPortal, useCallback, useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useTranslation } from 'react-i18next';\n\ntype TableCellActionMenuProps = Readonly<{\n  contextRef: { current: null | HTMLElement };\n  onClose: () => void;\n  setIsMenuOpen: (isOpen: boolean) => void;\n  tableCellNode: TableCellNode;\n  t: TFunction;\n}>;\n\nfunction TableActionMenu({\n  onClose,\n  tableCellNode: _tableCellNode,\n  setIsMenuOpen,\n  contextRef,\n  t,\n}: TableCellActionMenuProps) {\n  const [editor] = useLexicalComposerContext();\n  const dropDownRef = useRef<HTMLDivElement | null>(null);\n  const [tableCellNode, updateTableCellNode] = useState(_tableCellNode);\n  const [selectionCounts, updateSelectionCounts] = useState({\n    columns: 1,\n    rows: 1,\n  });\n\n  useEffect(() => {\n    return editor.registerMutationListener(TableCellNode, (nodeMutations) => {\n      const nodeUpdated =\n        nodeMutations.get(tableCellNode.getKey()) === 'updated';\n\n      if (nodeUpdated) {\n        editor.getEditorState().read(() => {\n          updateTableCellNode(tableCellNode.getLatest());\n        });\n      }\n    });\n  }, [editor, tableCellNode]);\n\n  useEffect(() => {\n    editor.getEditorState().read(() => {\n      const selection = $getSelection();\n\n      if (DEPRECATED_$isGridSelection(selection)) {\n        const selectionShape = selection.getShape();\n\n        updateSelectionCounts({\n          columns: selectionShape.toX - selectionShape.fromX + 1,\n          rows: selectionShape.toY - selectionShape.fromY + 1,\n        });\n      }\n    });\n  }, [editor]);\n\n  useEffect(() => {\n    const menuButtonElement = contextRef.current;\n    const dropDownElement = dropDownRef.current;\n\n    if (menuButtonElement != null && dropDownElement != null) {\n      const menuButtonRect = menuButtonElement.getBoundingClientRect();\n\n      dropDownElement.style.opacity = '1';\n\n      dropDownElement.style.left = `${\n        menuButtonRect.left + menuButtonRect.width + window.pageXOffset + 5\n      }px`;\n\n      dropDownElement.style.top = `${\n        menuButtonRect.top + window.pageYOffset\n      }px`;\n    }\n  }, [contextRef, dropDownRef]);\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (\n        dropDownRef.current != null &&\n        contextRef.current != null &&\n        !dropDownRef.current.contains(event.target as Node) &&\n        !contextRef.current.contains(event.target as Node)\n      ) {\n        setIsMenuOpen(false);\n      }\n    }\n\n    window.addEventListener('click', handleClickOutside);\n\n    return () => window.removeEventListener('click', handleClickOutside);\n  }, [setIsMenuOpen, contextRef]);\n\n  const clearTableSelection = useCallback(() => {\n    editor.update(() => {\n      if (tableCellNode.isAttached()) {\n        const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n        const tableElement = editor.getElementByKey(\n          tableNode.getKey()\n        ) as HTMLTableElementWithWithTableSelectionState;\n\n        if (!tableElement) {\n          throw new Error('Expected to find tableElement in DOM');\n        }\n\n        const tableSelection = getTableSelectionFromTableElement(tableElement);\n        if (tableSelection !== null) {\n          tableSelection.clearHighlight();\n        }\n\n        tableNode.markDirty();\n        updateTableCellNode(tableCellNode.getLatest());\n      }\n\n      $setSelection(null);\n    });\n  }, [editor, tableCellNode]);\n\n  const insertTableRowAtSelection = useCallback(\n    (shouldInsertAfter: boolean) => {\n      editor.update(() => {\n        const selection = $getSelection();\n\n        const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n\n        let tableRowIndex;\n\n        if (DEPRECATED_$isGridSelection(selection)) {\n          const selectionShape = selection.getShape();\n          tableRowIndex = shouldInsertAfter\n            ? selectionShape.toY\n            : selectionShape.fromY;\n        } else {\n          tableRowIndex = $getTableRowIndexFromTableCellNode(tableCellNode);\n        }\n\n        const grid = $getElementGridForTableNode(editor, tableNode);\n\n        $insertTableRow(\n          tableNode,\n          tableRowIndex,\n          shouldInsertAfter,\n          selectionCounts.rows,\n          grid\n        );\n\n        clearTableSelection();\n\n        onClose();\n      });\n    },\n    [editor, tableCellNode, selectionCounts.rows, clearTableSelection, onClose]\n  );\n\n  const insertTableColumnAtSelection = useCallback(\n    (shouldInsertAfter: boolean) => {\n      editor.update(() => {\n        const selection = $getSelection();\n\n        const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n\n        let tableColumnIndex;\n\n        if (DEPRECATED_$isGridSelection(selection)) {\n          const selectionShape = selection.getShape();\n          tableColumnIndex = shouldInsertAfter\n            ? selectionShape.toX\n            : selectionShape.fromX;\n        } else {\n          tableColumnIndex =\n            $getTableColumnIndexFromTableCellNode(tableCellNode);\n        }\n\n        const grid = $getElementGridForTableNode(editor, tableNode);\n\n        $insertTableColumn(\n          tableNode,\n          tableColumnIndex,\n          shouldInsertAfter,\n          selectionCounts.columns,\n          grid\n        );\n\n        clearTableSelection();\n\n        onClose();\n      });\n    },\n    [\n      editor,\n      tableCellNode,\n      selectionCounts.columns,\n      clearTableSelection,\n      onClose,\n    ]\n  );\n\n  const deleteTableRowAtSelection = useCallback(() => {\n    editor.update(() => {\n      const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n      const tableRowIndex = $getTableRowIndexFromTableCellNode(tableCellNode);\n\n      $removeTableRowAtIndex(tableNode, tableRowIndex);\n\n      clearTableSelection();\n      onClose();\n    });\n  }, [editor, tableCellNode, clearTableSelection, onClose]);\n\n  const deleteTableAtSelection = useCallback(() => {\n    editor.update(() => {\n      const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n      tableNode.remove();\n\n      clearTableSelection();\n      onClose();\n    });\n  }, [editor, tableCellNode, clearTableSelection, onClose]);\n\n  const deleteTableColumnAtSelection = useCallback(() => {\n    editor.update(() => {\n      const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n\n      const tableColumnIndex =\n        $getTableColumnIndexFromTableCellNode(tableCellNode);\n\n      $deleteTableColumn(tableNode, tableColumnIndex);\n\n      clearTableSelection();\n      onClose();\n    });\n  }, [editor, tableCellNode, clearTableSelection, onClose]);\n\n  const toggleTableRowIsHeader = useCallback(() => {\n    editor.update(() => {\n      const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n\n      const tableRowIndex = $getTableRowIndexFromTableCellNode(tableCellNode);\n\n      const tableRows = tableNode.getChildren();\n\n      if (tableRowIndex >= tableRows.length || tableRowIndex < 0) {\n        throw new Error('Expected table cell to be inside of table row.');\n      }\n\n      const tableRow = tableRows[tableRowIndex];\n\n      if (!$isTableRowNode(tableRow)) {\n        throw new Error('Expected table row');\n      }\n\n      tableRow.getChildren().forEach((tableCell) => {\n        if (!$isTableCellNode(tableCell)) {\n          throw new Error('Expected table cell');\n        }\n\n        tableCell.toggleHeaderStyle(TableCellHeaderStates.ROW);\n      });\n\n      clearTableSelection();\n      onClose();\n    });\n  }, [editor, tableCellNode, clearTableSelection, onClose]);\n\n  const toggleTableColumnIsHeader = useCallback(() => {\n    editor.update(() => {\n      const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n\n      const tableColumnIndex =\n        $getTableColumnIndexFromTableCellNode(tableCellNode);\n\n      const tableRows = tableNode.getChildren();\n\n      for (let r = 0; r < tableRows.length; r++) {\n        const tableRow = tableRows[r];\n\n        if (!$isTableRowNode(tableRow)) {\n          throw new Error('Expected table row');\n        }\n\n        const tableCells = tableRow.getChildren();\n\n        if (tableColumnIndex >= tableCells.length || tableColumnIndex < 0) {\n          throw new Error('Expected table cell to be inside of table row.');\n        }\n\n        const tableCell = tableCells[tableColumnIndex];\n\n        if (!$isTableCellNode(tableCell)) {\n          throw new Error('Expected table cell');\n        }\n\n        tableCell.toggleHeaderStyle(TableCellHeaderStates.COLUMN);\n      }\n\n      clearTableSelection();\n      onClose();\n    });\n  }, [editor, tableCellNode, clearTableSelection, onClose]);\n\n  return createPortal(\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    <div\n      className=\"verbum-dropdown\"\n      ref={dropDownRef}\n      onClick={(e) => {\n        e.stopPropagation();\n      }}\n    >\n      <button\n        className=\"verbum-item\"\n        onClick={() => insertTableRowAtSelection(false)}\n        type=\"button\"\n      >\n        <span className=\"verbum-text\">\n          {t('toolbar:tableActionMenuPlugin.Insert')}{' '}\n          {selectionCounts.rows === 1\n            ? t('toolbar:tableActionMenuPlugin.row')\n            : `${selectionCounts.rows} ${t(\n                'toolbar:tableActionMenuPlugin.rows'\n              )}`}{' '}\n          {t('toolbar:tableActionMenuPlugin.above')}\n        </span>\n      </button>\n      <button\n        className=\"verbum-item\"\n        onClick={() => insertTableRowAtSelection(true)}\n        type=\"button\"\n      >\n        <span className=\"verbum-text\">\n          {t('toolbar:tableActionMenuPlugin.Insert')}{' '}\n          {selectionCounts.rows === 1\n            ? t('toolbar:tableActionMenuPlugin.row')\n            : `${selectionCounts.rows} ${t(\n                'toolbar:tableActionMenuPlugin.rows'\n              )}`}{' '}\n          {t('toolbar:tableActionMenuPlugin.below')}\n        </span>\n      </button>\n      <hr />\n      <button\n        className=\"verbum-item\"\n        onClick={() => insertTableColumnAtSelection(false)}\n        type=\"button\"\n      >\n        <span className=\"verbum-text\">\n          {t('toolbar:tableActionMenuPlugin.Insert')}{' '}\n          {selectionCounts.columns === 1\n            ? t('toolbar:tableActionMenuPlugin.column')\n            : `${selectionCounts.columns} ${t(\n                'toolbar:tableActionMenuPlugin.columns'\n              )}`}{' '}\n          {t('toolbar:tableActionMenuPlugin.left')}\n        </span>\n      </button>\n      <button\n        className=\"verbum-item\"\n        onClick={() => insertTableColumnAtSelection(true)}\n        type=\"button\"\n      >\n        <span className=\"verbum-text\">\n          {t('toolbar:tableActionMenuPlugin.Insert')}{' '}\n          {selectionCounts.columns === 1\n            ? t('toolbar:tableActionMenuPlugin.column')\n            : `${selectionCounts.columns} ${t(\n                'toolbar:tableActionMenuPlugin.columns'\n              )}`}{' '}\n          {t('toolbar:tableActionMenuPlugin.right')}\n        </span>\n      </button>\n      <hr />\n      <button\n        className=\"verbum-item\"\n        onClick={() => deleteTableColumnAtSelection()}\n        type=\"button\"\n      >\n        <span className=\"verbum-text\">\n          {t('toolbar:tableActionMenuPlugin.Delete_column')}\n        </span>\n      </button>\n      <button\n        className=\"verbum-item\"\n        onClick={() => deleteTableRowAtSelection()}\n        type=\"button\"\n      >\n        <span className=\"verbum-text\">\n          {t('toolbar:tableActionMenuPlugin.Delete_row')}\n        </span>\n      </button>\n      <button\n        className=\"verbum-item\"\n        onClick={() => deleteTableAtSelection()}\n        type=\"button\"\n      >\n        <span className=\"verbum-text\">\n          {t('toolbar:tableActionMenuPlugin.Delete_table')}\n        </span>\n      </button>\n      <hr />\n      <button\n        className=\"verbum-item\"\n        onClick={() => toggleTableRowIsHeader()}\n        type=\"button\"\n      >\n        <span className=\"verbum-text\">\n          {(tableCellNode.__headerState & TableCellHeaderStates.ROW) ===\n          TableCellHeaderStates.ROW\n            ? t('action:Remove')\n            : t('action:Add')}{' '}\n          {t('toolbar:tableActionMenuPlugin.row_header')}\n        </span>\n      </button>\n      <button\n        className=\"verbum-item\"\n        onClick={() => toggleTableColumnIsHeader()}\n        type=\"button\"\n      >\n        <span className=\"verbum-text\">\n          {(tableCellNode.__headerState & TableCellHeaderStates.COLUMN) ===\n          TableCellHeaderStates.COLUMN\n            ? t('action:Remove')\n            : t('action:Add ')}{' '}\n          {t('toolbar:tableActionMenuPlugin.column_header')}\n        </span>\n      </button>\n    </div>,\n    document.body\n  );\n}\n\nfunction TableCellActionMenuContainer(): JSX.Element {\n  const [editor] = useLexicalComposerContext();\n\n  const menuButtonRef = useRef(null);\n  const menuRootRef = useRef(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const [tableCellNode, setTableMenuCellNode] = useState<TableCellNode | null>(\n    null\n  );\n  const { t } = useTranslation(['toolbar', 'action']);\n\n  const moveMenu = useCallback(() => {\n    const menu = menuButtonRef.current;\n    const selection = $getSelection();\n    const nativeSelection = window.getSelection();\n    const activeElement = document.activeElement;\n\n    if (selection == null || menu == null) {\n      setTableMenuCellNode(null);\n      return;\n    }\n\n    const rootElement = editor.getRootElement();\n\n    if (\n      $isRangeSelection(selection) &&\n      rootElement !== null &&\n      nativeSelection !== null &&\n      rootElement.contains(nativeSelection.anchorNode)\n    ) {\n      const tableCellNodeFromSelection = $getTableCellNodeFromLexicalNode(\n        selection.anchor.getNode()\n      );\n\n      if (tableCellNodeFromSelection == null) {\n        setTableMenuCellNode(null);\n        return;\n      }\n\n      const tableCellParentNodeDOM = editor.getElementByKey(\n        tableCellNodeFromSelection.getKey()\n      );\n\n      if (tableCellParentNodeDOM == null) {\n        setTableMenuCellNode(null);\n        return;\n      }\n\n      setTableMenuCellNode(tableCellNodeFromSelection);\n    } else if (!activeElement) {\n      setTableMenuCellNode(null);\n    }\n  }, [editor]);\n\n  useEffect(() => {\n    return editor.registerUpdateListener(() => {\n      editor.getEditorState().read(() => {\n        moveMenu();\n      });\n    });\n  });\n\n  useEffect(() => {\n    const menuButtonDOM = menuButtonRef.current as HTMLButtonElement | null;\n\n    if (menuButtonDOM != null && tableCellNode != null) {\n      const tableCellNodeDOM = editor.getElementByKey(tableCellNode.getKey());\n\n      if (tableCellNodeDOM != null) {\n        const tableCellRect = tableCellNodeDOM.getBoundingClientRect();\n        const menuRect = menuButtonDOM.getBoundingClientRect();\n\n        menuButtonDOM.style.opacity = '1';\n\n        menuButtonDOM.style.left = `${\n          tableCellRect.left +\n          window.pageXOffset -\n          menuRect.width +\n          tableCellRect.width -\n          10\n        }px`;\n\n        menuButtonDOM.style.top = `${\n          tableCellRect.top + window.pageYOffset + 5\n        }px`;\n      } else {\n        menuButtonDOM.style.opacity = '0';\n      }\n    }\n  }, [menuButtonRef, tableCellNode, editor]);\n\n  const prevTableCellDOM = useRef(tableCellNode);\n\n  useEffect(() => {\n    if (prevTableCellDOM.current !== tableCellNode) {\n      setIsMenuOpen(false);\n    }\n\n    prevTableCellDOM.current = tableCellNode;\n  }, [prevTableCellDOM, tableCellNode]);\n\n  return (\n    <div className=\"verbum-table-cell-action-button-container\" ref={menuButtonRef}>\n      {tableCellNode != null && (\n        <>\n          <button\n            className=\"verbum-table-cell-action-button chevron-down\"\n            onClick={(e) => {\n              e.stopPropagation();\n              setIsMenuOpen(!isMenuOpen);\n            }}\n            ref={menuRootRef}\n            type=\"button\"\n          >\n            <i className=\"verbum-chevron-down\" />\n          </button>\n          {isMenuOpen && (\n            <TableActionMenu\n              contextRef={menuRootRef}\n              setIsMenuOpen={setIsMenuOpen}\n              onClose={() => setIsMenuOpen(false)}\n              tableCellNode={tableCellNode}\n              t={t}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default function TableActionMenuPlugin(): ReactPortal {\n  return createPortal(<TableCellActionMenuContainer />, document.body);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n  $createHorizontalRuleNode,\n  INSERT_HORIZONTAL_RULE_COMMAND,\n} from '@lexical/react/LexicalHorizontalRuleNode';\nimport {\n  $getSelection,\n  $isRangeSelection,\n  COMMAND_PRIORITY_EDITOR,\n} from 'lexical';\nimport { useEffect } from 'react';\n\nexport default function HorizontalRulePlugin(): null {\n  const [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    return editor.registerCommand(\n      INSERT_HORIZONTAL_RULE_COMMAND,\n      (type) => {\n        const selection = $getSelection();\n\n        if (!$isRangeSelection(selection)) {\n          return false;\n        }\n\n        const focusNode = selection.focus.getNode();\n\n        if (focusNode !== null) {\n          const horizontalRuleNode = $createHorizontalRuleNode();\n          selection.insertParagraph();\n          selection.focus\n            .getNode()\n            .getTopLevelElementOrThrow()\n            .insertBefore(horizontalRuleNode);\n        }\n\n        return true;\n      },\n      COMMAND_PRIORITY_EDITOR\n    );\n  }, [editor]);\n\n  return null;\n}\n","import React, { useState, useCallback, useContext } from 'react';\nimport { $getRoot, LexicalEditor, RangeSelection } from 'lexical';\nimport DropDown from '../../../ui/DropDown';\nimport Button from '../../../ui/Button';\nimport TextInput from '../../../ui/TextInput';\nimport FileInput from '../../../ui/FileInput';\nimport type { InsertImagePayload } from '../../ImagesPlugin';\nimport ImagesPlugin, { INSERT_IMAGE_COMMAND } from '../../ImagesPlugin';\nimport { INSERT_TABLE_COMMAND } from '@lexical/table';\nimport { INSERT_HORIZONTAL_RULE_COMMAND } from '@lexical/react/LexicalHorizontalRuleNode';\nimport EquationsPlugin, {\n  INSERT_EQUATION_COMMAND,\n} from '../../EquationsPlugin';\nimport ExcalidrawPlugin, {\n  INSERT_EXCALIDRAW_COMMAND,\n} from '../../ExcalidrawPlugin';\nimport PollPlugin, { INSERT_POLL_COMMAND } from '../../PollPlugin';\nimport TwitterPlugin, { INSERT_TWEET_COMMAND } from '../../TwitterPlugin';\nimport YouTubePlugin, { INSERT_YOUTUBE_COMMAND } from '../../YouTubePlugin';\nimport { $createStickyNode } from '../../../nodes/StickyNode';\nimport KatexEquationAlterer from '../../../ui/KatexEquationAlterer';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport useModal from '../../../hooks/useModal';\nimport TableCellResizer from '../../TableCellResizer';\nimport { TablePlugin } from '@lexical/react/LexicalTablePlugin';\nimport TableCellActionMenuPlugin from '../../TableActionMenuPlugin';\nimport HorizontalRulePlugin from '../../HorizontalRulePlugin';\nimport EditorContext from '../../../context/EditorContext';\n\n// Taken from https://stackoverflow.com/a/9102270\nconst YOUTUBE_ID_PARSER =\n  /^.*(youtu\\.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n\nconst parseYouTubeVideoID = (url: string) => {\n  const urlMatches = url.match(YOUTUBE_ID_PARSER);\n\n  return urlMatches?.[2].length === 11 ? urlMatches[2] : null;\n};\n\n//#region Inserting different modules\nfunction InsertImageDialog({\n  activeEditor,\n  onClose,\n}: {\n  activeEditor: LexicalEditor;\n  onClose: () => void;\n}): JSX.Element {\n  const [mode, setMode] = useState<null | 'url' | 'file'>(null);\n\n  const onClick = (payload: InsertImagePayload) => {\n    activeEditor.dispatchCommand(INSERT_IMAGE_COMMAND, payload);\n    onClose();\n  };\n\n  return (\n    <>\n      {!mode && (\n        <div className=\"ToolbarPlugin__dialogButtonsList\">\n          <Button\n            data-test-id=\"image-modal-option-sample\"\n            onClick={() =>\n              onClick({\n                altText: 'Yellow flower in tilt shift lens',\n                src: null, //yellowFlowerImage,\n              })\n            }\n          >\n            Sample\n          </Button>\n          <Button\n            data-test-id=\"image-modal-option-url\"\n            onClick={() => setMode('url')}\n          >\n            URL\n          </Button>\n          <Button\n            data-test-id=\"image-modal-option-file\"\n            onClick={() => setMode('file')}\n          >\n            File\n          </Button>\n        </div>\n      )}\n      {mode === 'url' && <InsertImageUriDialogBody onClick={onClick} />}\n      {mode === 'file' && <InsertImageUploadedDialogBody onClick={onClick} />}\n    </>\n  );\n}\n\nfunction InsertTableDialog({\n  activeEditor,\n  onClose,\n}: {\n  activeEditor: LexicalEditor;\n  onClose: () => void;\n}): JSX.Element {\n  const [rows, setRows] = useState('5');\n  const [columns, setColumns] = useState('5');\n\n  const onClick = () => {\n    activeEditor.dispatchCommand(INSERT_TABLE_COMMAND, { columns, rows });\n    onClose();\n  };\n\n  return (\n    <>\n      <TextInput label=\"No of rows\" onChange={setRows} value={rows} />\n      <TextInput label=\"No of columns\" onChange={setColumns} value={columns} />\n      <div\n        className=\"ToolbarPlugin__dialogActions\"\n        data-test-id=\"table-model-confirm-insert\"\n      >\n        <Button onClick={onClick}>Confirm</Button>\n      </div>\n    </>\n  );\n}\n\nfunction InsertPollDialog({\n  activeEditor,\n  onClose,\n}: {\n  activeEditor: LexicalEditor;\n  onClose: () => void;\n}): JSX.Element {\n  const [question, setQuestion] = useState('');\n\n  const onClick = () => {\n    activeEditor.dispatchCommand(INSERT_POLL_COMMAND, question);\n    onClose();\n  };\n\n  return (\n    <>\n      <TextInput label=\"Question\" onChange={setQuestion} value={question} />\n      <div className=\"ToolbarPlugin__dialogActions\">\n        <Button disabled={question.trim() === ''} onClick={onClick}>\n          Confirm\n        </Button>\n      </div>\n    </>\n  );\n}\n\nconst VALID_TWITTER_URL = /twitter.com\\/[0-9a-zA-Z]{1,20}\\/status\\/([0-9]*)/g;\n\nfunction InsertTweetDialog({\n  activeEditor,\n  onClose,\n}: {\n  activeEditor: LexicalEditor;\n  onClose: () => void;\n}): JSX.Element {\n  const [text, setText] = useState('');\n\n  const onClick = () => {\n    const tweetID = text.split('status/')?.[1]?.split('?')?.[0];\n    activeEditor.dispatchCommand(INSERT_TWEET_COMMAND, tweetID);\n    onClose();\n  };\n\n  const isDisabled = text === '' || !text.match(VALID_TWITTER_URL);\n\n  return (\n    <>\n      <TextInput\n        label=\"Tweet URL\"\n        placeholder=\"i.e. https://twitter.com/jack/status/20\"\n        onChange={setText}\n        value={text}\n      />\n      <div className=\"ToolbarPlugin__dialogActions\">\n        <Button disabled={isDisabled} onClick={onClick}>\n          Confirm\n        </Button>\n      </div>\n    </>\n  );\n}\n\nfunction InsertImageUriDialogBody({\n  onClick,\n}: {\n  onClick: (payload: InsertImagePayload) => void;\n}) {\n  const [src, setSrc] = useState('');\n  const [altText, setAltText] = useState('');\n\n  const isDisabled = src === '';\n\n  return (\n    <>\n      <TextInput\n        label=\"Image URL\"\n        placeholder=\"i.e. https://source.unsplash.com/random\"\n        onChange={setSrc}\n        value={src}\n        data-test-id=\"image-modal-url-input\"\n      />\n      <TextInput\n        label=\"Alt Text\"\n        placeholder=\"Random unsplash image\"\n        onChange={setAltText}\n        value={altText}\n        data-test-id=\"image-modal-alt-text-input\"\n      />\n      <div className=\"ToolbarPlugin__dialogActions\">\n        <Button\n          data-test-id=\"image-modal-confirm-btn\"\n          disabled={isDisabled}\n          onClick={() => onClick({ altText, src })}\n        >\n          Confirm\n        </Button>\n      </div>\n    </>\n  );\n}\n\nfunction InsertImageUploadedDialogBody({\n  onClick,\n}: {\n  onClick: (payload: InsertImagePayload) => void;\n}) {\n  const [src, setSrc] = useState('');\n  const [altText, setAltText] = useState('');\n\n  const isDisabled = src === '';\n\n  const loadImage = (files: FileList) => {\n    const reader = new FileReader();\n    reader.onload = function () {\n      if (typeof reader.result === 'string') {\n        setSrc(reader.result);\n      }\n      return '';\n    };\n    reader.readAsDataURL(files[0]);\n  };\n\n  return (\n    <>\n      <FileInput\n        label=\"Image Upload\"\n        onChange={loadImage}\n        accept=\"image/*\"\n        data-test-id=\"image-modal-file-upload\"\n      />\n      <TextInput\n        label=\"Alt Text\"\n        placeholder=\"Descriptive alternative text\"\n        onChange={setAltText}\n        value={altText}\n        data-test-id=\"image-modal-alt-text-input\"\n      />\n      <div className=\"ToolbarPlugin__dialogActions\">\n        <Button\n          data-test-id=\"image-modal-file-upload-btn\"\n          disabled={isDisabled}\n          onClick={() => onClick({ altText, src })}\n        >\n          Confirm\n        </Button>\n      </div>\n    </>\n  );\n}\n\nfunction InsertYouTubeDialog({\n  activeEditor,\n  onClose,\n}: {\n  activeEditor: LexicalEditor;\n  onClose: () => void;\n}): JSX.Element {\n  const [text, setText] = useState('');\n\n  const onClick = () => {\n    const videoID = parseYouTubeVideoID(text);\n    if (videoID) {\n      activeEditor.dispatchCommand(INSERT_YOUTUBE_COMMAND, videoID);\n    }\n    onClose();\n  };\n\n  const isDisabled = text === '' || !parseYouTubeVideoID(text);\n\n  return (\n    <>\n      <TextInput\n        data-test-id=\"youtube-embed-modal-url\"\n        label=\"YouTube URL\"\n        placeholder=\"i.e. https://www.youtube.com/watch?v=jNQXAC9IVRw\"\n        onChange={setText}\n        value={text}\n      />\n      <div className=\"ToolbarPlugin__dialogActions\">\n        <Button\n          data-test-id=\"youtube-embed-modal-submit-btn\"\n          disabled={isDisabled}\n          onClick={onClick}\n        >\n          Confirm\n        </Button>\n      </div>\n    </>\n  );\n}\n\nfunction InsertEquationDialog({\n  activeEditor,\n  onClose,\n}: {\n  activeEditor: LexicalEditor;\n  onClose: () => void;\n}): JSX.Element {\n  const onEquationConfirm = useCallback(\n    (equation: string, inline: boolean) => {\n      activeEditor.dispatchCommand(INSERT_EQUATION_COMMAND, {\n        equation,\n        inline,\n      });\n      onClose();\n    },\n    [activeEditor, onClose]\n  );\n\n  return <KatexEquationAlterer onConfirm={onEquationConfirm} />;\n}\n\n//#endregion Inserting different modules\n\nexport interface IInsertDropdownProps {\n  enableTable?: boolean;\n  enableYoutube?: boolean;\n  enableTwitter?: boolean;\n  enablePoll?: boolean;\n  enableImage?: boolean;\n  enableEquations?: boolean;\n  enableExcalidraw?: boolean;\n  enableHorizontalRule?: boolean;\n  enableStickyNote?: boolean;\n}\n\nconst InsertDropdown: React.FC<IInsertDropdownProps> = ({\n  enableTable = true,\n  enableImage = true,\n  enableYoutube = false,\n  enableTwitter = false,\n  enablePoll = false,\n  enableEquations = false,\n  enableExcalidraw = false,\n  enableHorizontalRule = false,\n  enableStickyNote = false,\n}: IInsertDropdownProps) => {\n  const { initialEditor, activeEditor } = useContext(EditorContext);\n  const [modal, showModal] = useModal();\n\n  return (\n    <div>\n      {enableTable && (\n        <>\n          <TablePlugin />\n          <TableCellActionMenuPlugin />\n          <TableCellResizer />\n        </>\n      )}\n      {enableYoutube && <YouTubePlugin />}\n      {enableTwitter && <TwitterPlugin />}\n      {enablePoll && <PollPlugin />}\n      {enableImage && <ImagesPlugin />}\n      {enableEquations && <EquationsPlugin />}\n      {enableExcalidraw && <ExcalidrawPlugin />}\n      {enableHorizontalRule && <HorizontalRulePlugin />}\n\n      <DropDown\n        buttonClassName=\"verbum-toolbar-item spaced\"\n        buttonLabel=\"Insert\"\n        buttonAriaLabel=\"Insert specialized editor node\"\n        buttonIconClassName=\"verbum-icon verbum-plus\"\n      >\n        {enableHorizontalRule && (\n          <button\n            onClick={() => {\n              activeEditor.dispatchCommand(\n                INSERT_HORIZONTAL_RULE_COMMAND,\n                undefined\n              );\n            }}\n            className=\"verbum-item\"\n            type=\"button\"\n          >\n            <i className=\"verbum-icon verbum-horizontal-rule\" />\n            <span className=\"verbum-text\">Horizontal Rule</span>\n          </button>\n        )}\n        {enableImage && (\n          <button\n            onClick={() => {\n              showModal('Insert Image', (onClose) => (\n                <InsertImageDialog\n                  activeEditor={activeEditor}\n                  onClose={onClose}\n                />\n              ));\n            }}\n            className=\"verbum-item\"\n            type=\"button\"\n          >\n            <i className=\"verbum-icon verbum-image\" />\n            <span className=\"verbum-text\">Image</span>\n          </button>\n        )}\n        {enableExcalidraw && (\n          <button\n            onClick={() => {\n              activeEditor.dispatchCommand(\n                INSERT_EXCALIDRAW_COMMAND,\n                undefined\n              );\n            }}\n            className=\"item\"\n            type=\"button\"\n          >\n            <i className=\"icon diagram-2\" />\n            <span className=\"text\">Excalidraw</span>\n          </button>\n        )}\n        {enableTable && (\n          <div>\n            <button\n              onClick={() => {\n                showModal('Insert Table', (onClose) => (\n                  <InsertTableDialog\n                    activeEditor={activeEditor}\n                    onClose={onClose}\n                  />\n                ));\n              }}\n              className=\"verbum-item\"\n              type=\"button\"\n            >\n              <i className=\"verbum-icon verbum-table\" />\n              <span className=\"verbum-text\">Table</span>\n            </button>\n          </div>\n        )}\n        {enablePoll && (\n          <button\n            onClick={() => {\n              showModal('Insert Poll', (onClose) => (\n                <InsertPollDialog\n                  activeEditor={activeEditor}\n                  onClose={onClose}\n                />\n              ));\n            }}\n            className=\"verbum-item\"\n            type=\"button\"\n          >\n            <i className=\"verbum-icon verbum-poll\" />\n            <span className=\"verbum-text\">Poll</span>\n          </button>\n        )}\n        {enableTwitter && (\n          <button\n            onClick={() => {\n              showModal('Insert Tweet', (onClose) => (\n                <InsertTweetDialog\n                  activeEditor={activeEditor}\n                  onClose={onClose}\n                />\n              ));\n            }}\n            className=\"verbum-item\"\n            type=\"button\"\n          >\n            <i className=\"verbum-icon verbum-tweet\" />\n            <span className=\"verbum-text\">Tweet</span>\n          </button>\n        )}\n        {enableYoutube && (\n          <button\n            onClick={() => {\n              showModal('Insert YouTube Video', (onClose) => (\n                <InsertYouTubeDialog\n                  activeEditor={activeEditor}\n                  onClose={onClose}\n                />\n              ));\n            }}\n            className=\"verbum-item\"\n            type=\"button\"\n          >\n            <i className=\"verbum-icon verbum-youtube\" />\n            <span className=\"verbum-text\">YouTube Video</span>\n          </button>\n        )}\n        {enableEquations && (\n          <button\n            onClick={() => {\n              showModal('Insert Equation', (onClose) => (\n                <InsertEquationDialog\n                  activeEditor={activeEditor}\n                  onClose={onClose}\n                />\n              ));\n            }}\n            className=\"item\"\n            type=\"button\"\n          >\n            <i className=\"icon equation\" />\n            <span className=\"text\">Equation</span>\n          </button>\n        )}\n        {enableStickyNote && (\n          <button\n            onClick={() => {\n              initialEditor.update(() => {\n                const root = $getRoot();\n                const stickyNode = $createStickyNode(0, 0);\n                root.append(stickyNode);\n              });\n            }}\n            className=\"verbum-item\"\n            type=\"button\"\n          >\n            <i className=\"verbum-icon verbum-sticky\" />\n            <span className=\"verbum-text\">Sticky Note</span>\n          </button>\n        )}\n      </DropDown>\n      {modal}\n    </div>\n  );\n};\n\nexport default InsertDropdown;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\nimport { CAN_USE_DOM } from './canUseDOM';\n\nconst documentMode =\n  // @ts-ignore\n  CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\n\nexport const IS_APPLE: boolean =\n  CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\n\nexport const IS_FIREFOX: boolean =\n  CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\n\nexport const CAN_USE_BEFORE_INPUT: boolean =\n  CAN_USE_DOM && 'InputEvent' in window && !documentMode\n    ? 'getTargetRanges' in new window.InputEvent('input')\n    : false;\n\nexport const IS_SAFARI: boolean =\n  CAN_USE_DOM && /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent);\n\nexport const IS_IOS: boolean =\n  CAN_USE_DOM &&\n  /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n  !(window as any).MSStream;\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\n// export const IS_CHROME: boolean = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\n// export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport ToolbarContext from '../../../context/ToolbarContext';\nimport { UNDO_COMMAND } from 'lexical';\nimport EditorContext from '../../../context/EditorContext';\nimport { IS_APPLE } from '../../../shared/src/environment';\nimport { useTranslation } from 'react-i18next';\n\nconst UndoButton = () => {\n  const { canUndo } = useContext(ToolbarContext);\n  const { activeEditor } = useContext(EditorContext);\n  const { t } = useTranslation('toolbar');\n  return (\n    <button\n      disabled={!canUndo}\n      onClick={() => {\n        activeEditor.dispatchCommand(UNDO_COMMAND, undefined);\n      }}\n      title={\n        IS_APPLE\n          ? `${t('toolbar:undoButton.Title')} (⌘Z)`\n          : `${t('toolbar:undoButton.Title')} (Ctrl+Z)`\n      }\n      className=\"verbum-toolbar-item spaced\"\n      aria-label={t('toolbar:undoButton.Description')}\n      type=\"button\"\n    >\n      <i className=\"verbum-format verbum-undo\" />\n    </button>\n  );\n};\n\nexport default UndoButton;\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport ToolbarContext from '../../../context/ToolbarContext';\nimport { REDO_COMMAND } from 'lexical';\nimport EditorContext from '../../../context/EditorContext';\nimport { IS_APPLE } from '../../../shared/src/environment';\nimport { useTranslation } from 'react-i18next';\n\nconst RedoButton = () => {\n  const { canRedo } = useContext(ToolbarContext);\n  const { activeEditor } = useContext(EditorContext);\n  const { t } = useTranslation('toolbar');\n  return (\n    <button\n      disabled={!canRedo}\n      onClick={() => {\n        activeEditor.dispatchCommand(REDO_COMMAND, undefined);\n      }}\n      title={\n        IS_APPLE\n          ? `${t('toolbar:redoButton.Title')} (⌘Y)`\n          : `${t('toolbar:redoButton.Title')} (Ctrl+Y)`\n      }\n      className=\"verbum-toolbar-item\"\n      aria-label={t('toolbar:redoButton.Description')}\n      type=\"button\"\n    >\n      <i className=\"verbum-format verbum-redo\" />\n    </button>\n  );\n};\n\nexport default RedoButton;\n","import React from 'react';\n\nconst Select = ({\n  onChange,\n  className,\n  options,\n  value,\n}: {\n  className: string;\n  onChange: (event: { target: { value: string } }) => void;\n  options: [string, string][];\n  value: string;\n}): JSX.Element => {\n  return (\n    <select className={className} onChange={onChange} value={value}>\n      {options.map(([option, text]) => (\n        <option key={option} value={option}>\n          {text}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nexport default Select;\n","import { $isCodeNode } from '@lexical/code';\nimport { $getNodeByKey } from 'lexical';\nimport React, { useCallback, useContext } from 'react';\nimport EditorContext from '../../../context/EditorContext';\nimport Select from '../../../ui/Select';\nimport ToolbarContext from '../../../context/ToolbarContext';\n\nconst CODE_LANGUAGE_OPTIONS: [string, string][] = [\n  ['', '- Select language -'],\n  ['c', 'C'],\n  ['clike', 'C-like'],\n  ['css', 'CSS'],\n  ['html', 'HTML'],\n  ['js', 'JavaScript'],\n  ['markdown', 'Markdown'],\n  ['objc', 'Objective-C'],\n  ['plain', 'Plain Text'],\n  ['py', 'Python'],\n  ['rust', 'Rust'],\n  ['sql', 'SQL'],\n  ['swift', 'Swift'],\n  ['xml', 'XML'],\n];\n\nconst CodeLanguageDropdown = () => {\n  const { activeEditor } = useContext(EditorContext);\n  const { selectedElementKey, codeLanguage } = useContext(ToolbarContext);\n  const onCodeLanguageSelect = useCallback(\n    (e) => {\n      activeEditor.update(() => {\n        if (selectedElementKey !== null) {\n          const node = $getNodeByKey(selectedElementKey);\n          if ($isCodeNode(node)) {\n            console.log(e.target.value);\n            node.setLanguage(e.target.value);\n          }\n        }\n      });\n    },\n    [activeEditor, selectedElementKey]\n  );\n\n  return (\n    <>\n      <Select\n        className=\"verbum-toolbar-item code-language\"\n        onChange={onCodeLanguageSelect}\n        options={CODE_LANGUAGE_OPTIONS}\n        value={codeLanguage}\n      />\n      <i className=\"verbum-chevron-down inside\" />\n    </>\n  );\n};\n\nexport default CodeLanguageDropdown;\n","import { $createCodeNode } from '@lexical/code';\nimport {\n  INSERT_CHECK_LIST_COMMAND,\n  INSERT_ORDERED_LIST_COMMAND,\n  INSERT_UNORDERED_LIST_COMMAND,\n  REMOVE_LIST_COMMAND,\n} from '@lexical/list';\nimport { $createHeadingNode, $createQuoteNode } from '@lexical/rich-text';\nimport { $wrapNodes } from '@lexical/selection';\nimport {\n  $createParagraphNode,\n  $getSelection,\n  $isRangeSelection,\n  LexicalEditor,\n} from 'lexical';\nimport React, { useContext } from 'react';\nimport EditorContext from '../../../context/EditorContext';\nimport DropDown from '../../../ui/DropDown';\nimport ToolbarContext from '../../../context/ToolbarContext';\nimport { useTranslation } from 'react-i18next';\n\nconst BlockFormatDropdown = () => {\n  const { initialEditor } = useContext(EditorContext);\n  const { blockType } = useContext(ToolbarContext);\n  const { t } = useTranslation('toolbar');\n  const formatParagraph = () => {\n    if (blockType !== 'paragraph') {\n      initialEditor.update(() => {\n        const selection = $getSelection();\n\n        if ($isRangeSelection(selection)) {\n          $wrapNodes(selection, () => $createParagraphNode());\n        }\n      });\n    }\n  };\n\n  const formatHeading = (headingSize) => {\n    if (blockType !== headingSize) {\n      initialEditor.update(() => {\n        const selection = $getSelection();\n\n        if ($isRangeSelection(selection)) {\n          $wrapNodes(selection, () => $createHeadingNode(headingSize));\n        }\n      });\n    }\n  };\n\n  const formatBulletList = () => {\n    if (blockType !== 'bullet') {\n      initialEditor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, undefined);\n    } else {\n      initialEditor.dispatchCommand(REMOVE_LIST_COMMAND, undefined);\n    }\n  };\n\n  const formatCheckList = () => {\n    if (blockType !== 'check') {\n      initialEditor.dispatchCommand(INSERT_CHECK_LIST_COMMAND, undefined);\n    } else {\n      initialEditor.dispatchCommand(REMOVE_LIST_COMMAND, undefined);\n    }\n  };\n\n  const formatNumberedList = () => {\n    if (blockType !== 'number') {\n      initialEditor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, undefined);\n    } else {\n      initialEditor.dispatchCommand(REMOVE_LIST_COMMAND, undefined);\n    }\n  };\n\n  const formatQuote = () => {\n    if (blockType !== 'quote') {\n      initialEditor.update(() => {\n        const selection = $getSelection();\n\n        if ($isRangeSelection(selection)) {\n          $wrapNodes(selection, () => $createQuoteNode());\n        }\n      });\n    }\n  };\n\n  const formatCode = () => {\n    if (blockType !== 'code') {\n      initialEditor.update(() => {\n        const selection = $getSelection();\n\n        if ($isRangeSelection(selection)) {\n          if (selection.isCollapsed()) {\n            $wrapNodes(selection, () => $createCodeNode());\n          } else {\n            const textContent = selection.getTextContent();\n            const codeNode = $createCodeNode();\n            selection.removeText();\n            selection.insertNodes([codeNode]);\n            selection.insertRawText(textContent);\n          }\n        }\n      });\n    }\n  };\n\n  return (\n    <DropDown\n      buttonLabel={t(`blockFormatDropdown.${blockType}`)}\n      buttonAriaLabel={t('toolbar:blockFormatDropdown.Description')}\n      buttonClassName=\"verbum-toolbar-item verbum-block-controls\"\n      buttonIconClassName={'icon block-type ' + blockType}\n    >\n      <button className=\"verbum-item\" onClick={formatParagraph} type=\"button\">\n        <span className=\"verbum-icon verbum-paragraph\" />\n        <span className=\"verbum-text\">{t('toolbar:blockFormatDropdown.paragraph')}</span>\n        {blockType === 'paragraph' && <span className=\"active\" />}\n      </button>\n      <button\n        className=\"verbum-item\"\n        onClick={() => formatHeading('h1')}\n        type=\"button\"\n      >\n        <span className=\"verbum-icon verbum-h1\" />\n        <span className=\"verbum-text\">\n          {t('toolbar:blockFormatDropdown.h1')}\n        </span>\n        {blockType === 'h1' && <span className=\"active\" />}\n      </button>\n      <button\n        className=\"verbum-item\"\n        onClick={() => formatHeading('h2')}\n        type=\"button\"\n      >\n        <span className=\"verbum-icon verbum-h2\" />\n        <span className=\"verbum-text\">\n          {t('toolbar:blockFormatDropdown.h2')}\n        </span>\n        {blockType === 'h2' && <span className=\"active\" />}\n      </button>\n      <button\n        className=\"verbum-item\"\n        onClick={() => formatHeading('h3')}\n        type=\"button\"\n      >\n        <span className=\"verbum-icon verbum-h3\" />\n        <span className=\"verbum-text\">\n          {t('toolbar:blockFormatDropdown.h3')}\n        </span>\n        {blockType === 'h3' && <span className=\"active\" />}\n      </button>\n      <button className=\"verbum-item\" onClick={formatBulletList} type=\"button\">\n        <span className=\"verbum-icon verbum-bullet-list\" />\n        <span className=\"verbum-text\">\n          {t('toolbar:blockFormatDropdown.bullet')}\n        </span>\n        {blockType === 'bullet' && <span className=\"active\" />}\n      </button>\n      <button className=\"verbum-item\" onClick={formatNumberedList} type=\"button\">\n        <span className=\"verbum-icon verbum-numbered-list\" />\n        <span className=\"verbum-text\">\n          {t('toolbar:blockFormatDropdown.number')}\n        </span>\n        {blockType === 'number' && <span className=\"active\" />}\n      </button>\n      <button className=\"verbum-item\" onClick={formatCheckList} type=\"button\">\n        <span className=\"verbum-icon verbum-check-list\" />\n        <span className=\"verbum-text\">\n          {t('toolbar:blockFormatDropdown.check')}\n        </span>\n        {blockType === 'check' && <span className=\"active\" />}\n      </button>\n      <button className=\"verbum-item\" onClick={formatQuote} type=\"button\">\n        <span className=\"verbum-icon verbum-quote\" />\n        <span className=\"verbum-text\">{t('toolbar:blockFormatDropdown.quote')}</span>\n        {blockType === 'quote' && <span className=\"active\" />}\n      </button>\n      <button className=\"verbum-item\" onClick={formatCode} type=\"button\">\n        <span className=\"verbum-icon verbum-code\" />\n        <span className=\"verbum-text\">\n          {t('toolbar:blockFormatDropdown.code')}\n        </span>\n        {blockType === 'code' && <span className=\"active\" />}\n      </button>\n    </DropDown>\n  );\n};\n\nexport default BlockFormatDropdown;\n","import React from 'react';\n\nexport default function Divider(): JSX.Element {\n  return <div className=\"divider\" />;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {$isCodeNode} from '@lexical/code';\nimport {$isLinkNode, TOGGLE_LINK_COMMAND} from '@lexical/link';\nimport {$isListNode, ListNode} from '@lexical/list';\nimport {$isHeadingNode} from '@lexical/rich-text';\nimport {$getSelectionStyleValueForProperty, $isParentElementRTL, $patchStyleText,} from '@lexical/selection';\nimport {$getNearestNodeOfType, mergeRegister} from '@lexical/utils';\nimport {\n    $getSelection,\n    $isRangeSelection,\n    CAN_REDO_COMMAND,\n    CAN_UNDO_COMMAND,\n    COMMAND_PRIORITY_CRITICAL,\n    SELECTION_CHANGE_COMMAND,\n} from 'lexical';\nimport * as React from 'react';\nimport {useCallback, useContext, useEffect, useState} from 'react';\nimport useChild from 'use-child';\nimport {getSelectedNode} from '../../utils/node.util';\nimport EditorContext from '../../context/EditorContext';\nimport ToolbarContext from '../../context/ToolbarContext';\nimport AlignDropdown from './components/AlignDropdown';\nimport InsertDropdown from './components/InsertDropdown';\nimport './ToolbarPlugin.css';\nimport UndoButton from './components/UndoButton';\nimport RedoButton from './components/RedoButton';\nimport CodeLanguageDropdown from './components/CodeLanguageDropdown';\nimport BlockFormatDropdown from './components/BlockFormatDropdown';\nimport Divider from '../../ui/Divider';\n\nconst supportedBlockTypes = new Set([\n    'paragraph',\n    'quote',\n    'code',\n    'h1',\n    'h2',\n    'h3',\n    'bullet',\n    'number',\n    'check',\n]);\n\nconst CODE_LANGUAGE_MAP = {\n    javascript: 'js',\n    md: 'markdown',\n    plaintext: 'plain',\n    python: 'py',\n    text: 'plain',\n};\n\ninterface IToolbarProps {\n    children?: React.ReactElement | React.ReactElement[];\n    defaultFontSize?: string /** The default selected font size in the toolbar */\n    ;\n    defaultFontColor?: string /** The default selected font color in the toolbar */\n    ;\n    defaultBgColor?: string /** The default selected background color in the toolbar */\n    ;\n    defaultFontFamily?: string /** The default selected font family in the toolbar */\n    ;\n}\n\nconst ToolbarPlugin = ({\n                           children,\n                           defaultFontSize = '15px',\n                           defaultFontColor = '#000',\n                           defaultBgColor = '#fff',\n                           defaultFontFamily = 'Arial',\n                       }: IToolbarProps) => {\n    const [insertExists, InsertComponent] = useChild(children, InsertDropdown);\n    const [alignExists, AlignComponent] = useChild(children, AlignDropdown);\n\n    const {initialEditor, activeEditor, setActiveEditor} =\n        useContext(EditorContext);\n    const [blockType, setBlockType] = useState('paragraph');\n    const [selectedElementKey, setSelectedElementKey] = useState(null);\n    const [fontSize, setFontSize] = useState<string>(defaultFontSize);\n    const [fontColor, setFontColor] = useState<string>(defaultFontColor);\n    const [bgColor, setBgColor] = useState<string>(defaultBgColor);\n    const [fontFamily, setFontFamily] = useState<string>(defaultFontFamily);\n    const [isLink, setIsLink] = useState(false);\n    const [isBold, setIsBold] = useState(false);\n    const [isItalic, setIsItalic] = useState(false);\n    const [isUnderline, setIsUnderline] = useState(false);\n    const [isStrikethrough, setIsStrikethrough] = useState(false);\n    const [isSubscript, setIsSubscript] = useState(false);\n    const [isSuperscript, setIsSuperscript] = useState(false);\n    const [isCode, setIsCode] = useState(false);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [isRTL, setIsRTL] = useState(false);\n    const [codeLanguage, setCodeLanguage] = useState<string>('');\n\n    const updateToolbar = useCallback(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            const element =\n                anchorNode.getKey() === 'root'\n                    ? anchorNode\n                    : anchorNode.getTopLevelElementOrThrow();\n            const elementKey = element.getKey();\n            const elementDOM = activeEditor.getElementByKey(elementKey);\n\n            // Update text format\n            setIsBold(selection.hasFormat('bold'));\n            setIsItalic(selection.hasFormat('italic'));\n            setIsUnderline(selection.hasFormat('underline'));\n            setIsStrikethrough(selection.hasFormat('strikethrough'));\n            setIsSubscript(selection.hasFormat('subscript'));\n            setIsSuperscript(selection.hasFormat('superscript'));\n            setIsCode(selection.hasFormat('code'));\n            setIsRTL($isParentElementRTL(selection));\n\n            // Update links\n            const node = getSelectedNode(selection);\n            const parent = node.getParent();\n            if ($isLinkNode(parent) || $isLinkNode(node)) {\n                setIsLink(true);\n            } else {\n                setIsLink(false);\n            }\n\n            if (elementDOM !== null) {\n                setSelectedElementKey(elementKey);\n                if ($isListNode(element)) {\n                    const parentList = $getNearestNodeOfType<ListNode>(\n                        anchorNode,\n                        ListNode\n                    );\n                    const type = parentList\n                        ? parentList.getListType()\n                        : element.getListType();\n                    setBlockType(type);\n                } else {\n                    const type = $isHeadingNode(element)\n                        ? element.getTag()\n                        : element.getType();\n                    setBlockType(type);\n                    if ($isCodeNode(element)) {\n                        const language = element.getLanguage();\n                        setCodeLanguage(\n                            language ? CODE_LANGUAGE_MAP[language] || language : ''\n                        );\n                        return;\n                    }\n                }\n            }\n            // Hande buttons\n            setFontSize(\n                $getSelectionStyleValueForProperty(\n                    selection,\n                    'font-size',\n                    defaultFontSize\n                )\n            );\n            setFontColor(\n                $getSelectionStyleValueForProperty(selection, 'color', defaultFontColor)\n            );\n            setBgColor(\n                $getSelectionStyleValueForProperty(\n                    selection,\n                    'background-color',\n                    defaultBgColor\n                )\n            );\n\n            setFontFamily(\n                $getSelectionStyleValueForProperty(\n                    selection,\n                    'font-family',\n                    defaultFontFamily\n                )\n            );\n        }\n    }, [activeEditor]);\n\n    useEffect(() => {\n        return initialEditor.registerCommand(\n            SELECTION_CHANGE_COMMAND,\n            (_payload, newEditor) => {\n                updateToolbar();\n                setActiveEditor(newEditor);\n                return false;\n            },\n            COMMAND_PRIORITY_CRITICAL\n        );\n    }, [initialEditor, updateToolbar]);\n\n    useEffect(() => {\n        return mergeRegister(\n            activeEditor.registerUpdateListener(({editorState}) => {\n                editorState.read(() => {\n                    updateToolbar();\n                });\n            }),\n            activeEditor.registerCommand<boolean>(\n                CAN_UNDO_COMMAND,\n                (payload) => {\n                    setCanUndo(payload);\n                    return false;\n                },\n                COMMAND_PRIORITY_CRITICAL\n            ),\n            activeEditor.registerCommand<boolean>(\n                CAN_REDO_COMMAND,\n                (payload) => {\n                    setCanRedo(payload);\n                    return false;\n                },\n                COMMAND_PRIORITY_CRITICAL\n            )\n        );\n    }, [activeEditor, updateToolbar]);\n\n    const applyStyleText = useCallback(\n        (styles: Record<string, string>) => {\n            activeEditor.update(() => {\n                const selection = $getSelection();\n                if ($isRangeSelection(selection)) {\n                    $patchStyleText(selection, styles);\n                }\n            });\n        },\n        [activeEditor]\n    );\n\n    const insertLink = useCallback(() => {\n        if (!isLink) {\n            initialEditor.dispatchCommand(TOGGLE_LINK_COMMAND, 'https://');\n        } else {\n            initialEditor.dispatchCommand(TOGGLE_LINK_COMMAND, null);\n        }\n    }, [initialEditor, isLink]);\n\n    return (\n        <ToolbarContext.Provider\n            value={{\n                isRTL,\n                canUndo,\n                canRedo,\n                fontFamily,\n                fontSize,\n                fontColor,\n                bgColor,\n                isBold,\n                isItalic,\n                isUnderline,\n                isCode,\n                isLink,\n                applyStyleText,\n                insertLink,\n                isStrikethrough,\n                isSubscript,\n                isSuperscript,\n                selectedElementKey,\n                codeLanguage,\n                blockType,\n            }}\n        >\n            <div className=\"verbum-toolbar\">\n                <UndoButton/>\n                <RedoButton/>\n                <Divider/>\n                {supportedBlockTypes.has(blockType) &&\n                    activeEditor === initialEditor && (\n                        <>\n                            <BlockFormatDropdown/>\n                            <Divider/>\n                        </>\n                    )}\n                {blockType === 'code' ? (\n                    <>\n                        <CodeLanguageDropdown/>\n                        <Divider/>\n                        {alignExists && AlignComponent}\n                    </>\n                ) : (\n                    <>{children}</>\n                )}\n            </div>\n        </ToolbarContext.Provider>\n    );\n};\n\nexport default ToolbarPlugin;\n","import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n  LexicalTypeaheadMenuPlugin,\n  QueryMatch,\n  TypeaheadOption,\n  useBasicTypeaheadTriggerMatch,\n} from '@lexical/react/LexicalTypeaheadMenuPlugin';\nimport { $createTextNode, TextNode } from 'lexical';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { $createMentionNode } from '../nodes/MentionNode';\nimport { $createAutoLinkNode } from '@lexical/link';\n\nimport './MentionsPlugin.css';\n\ntype SearchData<A> = (p: string) => Promise<A[]>;\n\nconst PUNCTUATION =\n  '\\\\.,\\\\+\\\\*\\\\?\\\\$\\\\@\\\\|#{}\\\\(\\\\)\\\\^\\\\-\\\\[\\\\]\\\\\\\\/!%\\'\"~=<>_:;';\nconst NAME = '\\\\b[A-Z][^\\\\s' + PUNCTUATION + ']';\n\nconst DocumentMentionsRegex = {\n  NAME,\n  PUNCTUATION,\n};\n\nconst CapitalizedNameMentionsRegex = new RegExp(\n  '(^|[^#])((?:' + DocumentMentionsRegex.NAME + '{' + 1 + ',})$)'\n);\n\nconst PUNC = DocumentMentionsRegex.PUNCTUATION;\n\nconst TRIGGERS = ['@'].join('');\n\n// Chars we expect to see in a mention (non-space, non-punctuation).\nconst VALID_CHARS = '[^' + TRIGGERS + PUNC + '\\\\s]';\n\n// Non-standard series of chars. Each series must be preceded and followed by\n// a valid char.\nconst VALID_JOINS =\n  '(?:' +\n  '\\\\.[ |$]|' + // E.g. \"r. \" in \"Mr. Smith\"\n  ' |' + // E.g. \" \" in \"Josh Duck\"\n  '[' +\n  PUNC +\n  ']|' + // E.g. \"-' in \"Salier-Hellendag\"\n  ')';\n\nconst LENGTH_LIMIT = 75;\n\nconst AtSignMentionsRegex = new RegExp(\n  '(^|\\\\s|\\\\()(' +\n    '[' +\n    TRIGGERS +\n    ']' +\n    '((?:' +\n    VALID_CHARS +\n    VALID_JOINS +\n    '){0,' +\n    LENGTH_LIMIT +\n    '})' +\n    ')$'\n);\n\n// 50 is the longest alias length limit.\nconst ALIAS_LENGTH_LIMIT = 50;\n\n// Regex used to match alias.\nconst AtSignMentionsRegexAliasRegex = new RegExp(\n  '(^|\\\\s|\\\\()(' +\n    '[' +\n    TRIGGERS +\n    ']' +\n    '((?:' +\n    VALID_CHARS +\n    '){0,' +\n    ALIAS_LENGTH_LIMIT +\n    '})' +\n    ')$'\n);\n\n// At most, 5 suggestions are shown in the popup.\nconst SUGGESTION_LIST_LENGTH_LIMIT = 5;\n\nconst mentionsCache = new Map();\n\nfunction useMentionLookupService<A>(\n  mentionString: string | null,\n  mentionData: SearchData<A>\n) {\n  const [results, setResults] = useState<Array<A>>([]);\n\n  useEffect(() => {\n    const cachedResults = mentionsCache.get(mentionString);\n\n    if (mentionString == null) {\n      setResults([]);\n      return;\n    }\n\n    if (cachedResults === null) {\n      return;\n    } else if (cachedResults !== undefined) {\n      setResults(cachedResults);\n      return;\n    }\n\n    mentionsCache.set(mentionString, null);\n\n    mentionData(mentionString).then((results) => {\n      mentionsCache.set(mentionString, results);\n      setResults(results);\n    });\n  }, [mentionString]);\n\n  return results;\n}\n\nfunction checkForCapitalizedNameMentions(\n  text: string,\n  minMatchLength: number\n): QueryMatch | null {\n  const match = CapitalizedNameMentionsRegex.exec(text);\n  if (match !== null) {\n    // The strategy ignores leading whitespace but we need to know it's\n    // length to add it to the leadOffset\n    const maybeLeadingWhitespace = match[1];\n\n    const matchingString = match[2];\n    if (matchingString != null && matchingString.length >= minMatchLength) {\n      return {\n        leadOffset: match.index + maybeLeadingWhitespace.length,\n        matchingString,\n        replaceableString: matchingString,\n      };\n    }\n  }\n  return null;\n}\n\nfunction checkForAtSignMentions(\n  text: string,\n  minMatchLength: number\n): QueryMatch | null {\n  let match = AtSignMentionsRegex.exec(text);\n\n  if (match === null) {\n    match = AtSignMentionsRegexAliasRegex.exec(text);\n  }\n  if (match !== null) {\n    // The strategy ignores leading whitespace but we need to know it's\n    // length to add it to the leadOffset\n    const maybeLeadingWhitespace = match[1];\n\n    const matchingString = match[3];\n    if (matchingString.length >= minMatchLength) {\n      return {\n        leadOffset: match.index + maybeLeadingWhitespace.length,\n        matchingString,\n        replaceableString: match[2],\n      };\n    }\n  }\n  return null;\n}\n\nfunction getPossibleQueryMatch(text: string): QueryMatch | null {\n  const match = checkForAtSignMentions(text, 1);\n  return match === null ? checkForCapitalizedNameMentions(text, 3) : match;\n}\n\nclass MentionTypeaheadOption extends TypeaheadOption {\n  name: string;\n  picture: JSX.Element;\n  url: string;\n\n  constructor(name: string, picture: JSX.Element, url?: string) {\n    super(name);\n    this.name = name;\n    this.picture = picture;\n    this.url = url;\n  }\n}\n\nfunction MentionsTypeaheadMenuItem({\n  index,\n  isSelected,\n  onClick,\n  onMouseEnter,\n  option,\n}: {\n  index: number;\n  isSelected: boolean;\n  onClick: () => void;\n  onMouseEnter: () => void;\n  option: MentionTypeaheadOption;\n}) {\n  let className = 'item';\n  if (isSelected) {\n    className += ' selected';\n  }\n  return (\n    <li\n      key={option.key}\n      tabIndex={-1}\n      className={className}\n      ref={option.setRefElement}\n      role=\"option\"\n      aria-selected={isSelected}\n      id={'typeahead-item-' + index}\n      onMouseEnter={onMouseEnter}\n      onClick={onClick}\n    >\n      {option.picture}\n      <span className=\"verbum-text\">{option.name}</span>\n    </li>\n  );\n}\n\nexport default function MentionsPlugin<A>(props: {\n  searchData: SearchData<A>;\n  getTypeaheadValues: (result: A) => {\n    url: string;\n    value: string;\n    picture: JSX.Element;\n  };\n}): JSX.Element | null {\n  const { searchData, getTypeaheadValues } = props;\n\n  const [editor] = useLexicalComposerContext();\n\n  const [queryString, setQueryString] = useState<string | null>(null);\n\n  const results = useMentionLookupService(queryString, searchData);\n\n  const checkForSlashTriggerMatch = useBasicTypeaheadTriggerMatch('/', {\n    minLength: 0,\n  });\n\n  const options = useMemo(\n    () =>\n      results\n        .map(\n          (result) =>\n            new MentionTypeaheadOption(\n              getTypeaheadValues(result).value,\n              getTypeaheadValues(result).picture,\n              getTypeaheadValues(result).url\n            )\n        )\n        .slice(0, SUGGESTION_LIST_LENGTH_LIMIT),\n    [results]\n  );\n\n  const onSelectOption = useCallback(\n    (\n      selectedOption: MentionTypeaheadOption,\n      nodeToReplace: TextNode | null,\n      closeMenu: () => void\n    ) => {\n      editor.update(() => {\n        if (nodeToReplace) {\n          const mentionNode = $createMentionNode(`@${selectedOption.name}`);\n          const linkNode = $createAutoLinkNode(selectedOption.url);\n          linkNode.append(mentionNode);\n          nodeToReplace.replace(linkNode);\n          linkNode.select();\n        }\n        closeMenu();\n      });\n    },\n    [editor]\n  );\n\n  const checkForMentionMatch = useCallback(\n    (text: string) => {\n      const mentionMatch = getPossibleQueryMatch(text);\n      const slashMatch = checkForSlashTriggerMatch(text, editor);\n      return !slashMatch && mentionMatch ? mentionMatch : null;\n    },\n    [checkForSlashTriggerMatch, editor]\n  );\n\n  return (\n    <LexicalTypeaheadMenuPlugin<MentionTypeaheadOption>\n      onQueryChange={setQueryString}\n      onSelectOption={onSelectOption}\n      triggerFn={checkForMentionMatch}\n      options={options}\n      menuRenderFn={(\n        anchorElementRef,\n        { selectedIndex, selectOptionAndCleanUp, setHighlightedIndex }\n      ) =>\n        anchorElementRef && results.length\n          ? ReactDOM.createPortal(\n              <div className=\"verbum-typeahead-popover verbum-mentions-menu\">\n                <ul>\n                  {options.map((option, i: number) => (\n                    <MentionsTypeaheadMenuItem\n                      index={i}\n                      isSelected={selectedIndex === i}\n                      onClick={() => {\n                        setHighlightedIndex(i);\n                        selectOptionAndCleanUp(option);\n                      }}\n                      onMouseEnter={() => {\n                        setHighlightedIndex(i);\n                      }}\n                      key={option.key}\n                      option={option}\n                    />\n                  ))}\n                </ul>\n              </div>,\n              anchorElementRef.current\n            )\n          : null\n      }\n    />\n  );\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport './ColorPicker.css';\n\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport * as React from 'react';\n\nimport DropDown from './DropDown';\n\ninterface ColorPickerProps {\n  buttonAriaLabel?: string;\n  buttonClassName: string;\n  buttonIconClassName?: string;\n  buttonLabel?: string;\n  color?: string;\n  children?: JSX.Element;\n  onChange?: (color: string) => void;\n  title?: string;\n}\n\nconst basicColors = [\n  '#d0021b',\n  '#f5a623',\n  '#f8e71c',\n  '#8b572a',\n  '#7ed321',\n  '#417505',\n  '#bd10e0',\n  '#9013fe',\n  '#4a90e2',\n  '#50e3c2',\n  '#b8e986',\n  '#000000',\n  '#4a4a4a',\n  '#9b9b9b',\n  '#ffffff',\n];\n\nconst WIDTH = 214;\nconst HEIGHT = 150;\n\nexport default function ColorPicker({\n  color,\n  children,\n  onChange,\n  ...rest\n}: Readonly<ColorPickerProps>): JSX.Element {\n  const [selfColor, setSelfColor] = useState(transformColor('hex', color));\n\n  const saturationPosition = useMemo(\n    () => ({\n      x: (selfColor.hsv.s / 100) * WIDTH,\n      y: ((100 - selfColor.hsv.v) / 100) * HEIGHT,\n    }),\n    [selfColor.hsv.s, selfColor.hsv.v]\n  );\n\n  const huePosition = useMemo(\n    () => ({\n      x: (selfColor.hsv.h / 360) * WIDTH,\n    }),\n    [selfColor.hsv]\n  );\n\n  const onMoveSaturation = ({ x, y }: Position) => {\n    const newHsv = {\n      ...selfColor.hsv,\n      s: (x / WIDTH) * 100,\n      v: 100 - (y / HEIGHT) * 100,\n    };\n    const newColor = transformColor('hsv', newHsv);\n    setSelfColor(newColor);\n  };\n\n  const onMoveHue = ({ x }: Position) => {\n    const newHsv = { ...selfColor.hsv, h: (x / WIDTH) * 360 };\n    const newColor = transformColor('hsv', newHsv);\n\n    setSelfColor(newColor);\n  };\n\n  useEffect(() => {\n    onChange(selfColor.hex);\n  }, [selfColor, onChange]);\n\n  useEffect(() => {\n    if (color === undefined) return;\n    setSelfColor(transformColor('hex', color));\n  }, [color]);\n\n  return (\n    <DropDown {...rest} stopCloseOnClickSelf={true}>\n      <div className=\"verbum-color-picker-wrapper\" style={{ width: WIDTH }}>\n        <div className=\"verbum-color-picker-basic-color\">\n          {basicColors.map((basicColor) => (\n            <button\n              className={basicColor === selfColor.hex ? ' active' : ''}\n              key={basicColor}\n              style={{ backgroundColor: basicColor }}\n              onClick={() => setSelfColor(transformColor('hex', basicColor))}\n              type=\"button\"\n            />\n          ))}\n        </div>\n        <MoveWrapper\n          className=\"verbum-color-picker-saturation\"\n          style={{ backgroundColor: `hsl(${selfColor.hsv.h}, 100%, 50%)` }}\n          onChange={onMoveSaturation}\n        >\n          <div\n            className=\"verbum-color-picker-saturation_cursor\"\n            style={{\n              backgroundColor: selfColor.hex,\n              left: saturationPosition.x,\n              top: saturationPosition.y,\n            }}\n          />\n        </MoveWrapper>\n        <MoveWrapper className=\"verbum-color-picker-hue\" onChange={onMoveHue}>\n          <div\n            className=\"verbum-color-picker-hue_cursor\"\n            style={{\n              backgroundColor: `hsl(${selfColor.hsv.h}, 100%, 50%)`,\n              left: huePosition.x,\n            }}\n          />\n        </MoveWrapper>\n        <div className=\"verbum-color-picker-info\">\n          <span>{selfColor.hex}</span>\n          <div\n            className=\"verbum-color-picker-color\"\n            style={{ backgroundColor: selfColor.hex }}\n          />\n        </div>\n      </div>\n      {children}\n    </DropDown>\n  );\n}\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\ninterface MoveWrapperProps {\n  className?: string;\n  style?: React.CSSProperties;\n  onChange: (position: Position) => void;\n  children: JSX.Element;\n}\n\nfunction MoveWrapper({\n  className,\n  style,\n  onChange,\n  children,\n}: MoveWrapperProps) {\n  const divRef = useRef<HTMLDivElement>(null);\n\n  const move = (e: React.MouseEvent | MouseEvent): void => {\n    if (divRef.current) {\n      const { current: div } = divRef;\n      const { width, height, left, top } = div.getBoundingClientRect();\n\n      const x = clamp(e.clientX - left, width, 0);\n      const y = clamp(e.clientY - top, height, 0);\n\n      onChange({ x, y });\n    }\n  };\n\n  const onMouseDown = (e: React.MouseEvent): void => {\n    if (e.button !== 0) return;\n\n    move(e);\n\n    const onMouseMove = (_e: MouseEvent): void => {\n      move(_e);\n    };\n\n    const onMouseUp = (_e: MouseEvent): void => {\n      document.removeEventListener('mousemove', onMouseMove, false);\n      document.removeEventListener('mouseup', onMouseUp, false);\n\n      move(_e);\n    };\n\n    document.addEventListener('mousemove', onMouseMove, false);\n    document.addEventListener('mouseup', onMouseUp, false);\n  };\n\n  return (\n    <div\n      ref={divRef}\n      className={className}\n      style={style}\n      onMouseDown={onMouseDown}\n    >\n      {children}\n    </div>\n  );\n}\n\nfunction clamp(value: number, max: number, min: number) {\n  return value > max ? max : value < min ? min : value;\n}\n\ninterface RGB {\n  b: number;\n  g: number;\n  r: number;\n}\ninterface HSV {\n  h: number;\n  s: number;\n  v: number;\n}\ninterface Color {\n  hex: string;\n  hsv: HSV;\n  rgb: RGB;\n}\n\nexport function toHex(value: string): string {\n  if (!value.startsWith('#')) {\n    const ctx = document.createElement('canvas').getContext('2d');\n\n    if (!ctx) {\n      throw new Error('2d context not supported or canvas already initialized');\n    }\n\n    ctx.fillStyle = value;\n\n    return ctx.fillStyle;\n  } else if (value.length === 4 || value.length === 5) {\n    value = value\n      .split('')\n      .map((v, i) => (i ? v + v : '#'))\n      .join('');\n\n    return value;\n  } else if (value.length === 7 || value.length === 9) {\n    return value;\n  }\n\n  return '#000000';\n}\n\nfunction hex2rgb(hex: string): RGB {\n  const rbgArr = hex\n    .replace(\n      /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,\n      (m, r, g, b) => '#' + r + r + g + g + b + b\n    )\n    .substring(1)\n    .match(/.{2}/g)\n    .map((x) => parseInt(x, 16));\n\n  return {\n    b: rbgArr[2],\n    g: rbgArr[1],\n    r: rbgArr[0],\n  };\n}\n\nfunction rgb2hsv({ r, g, b }: RGB): HSV {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  const max = Math.max(r, g, b);\n  const d = max - Math.min(r, g, b);\n\n  const h = d\n    ? (max === r\n        ? (g - b) / d + (g < b ? 6 : 0)\n        : max === g\n        ? 2 + (b - r) / d\n        : 4 + (r - g) / d) * 60\n    : 0;\n  const s = max ? (d / max) * 100 : 0;\n  const v = max * 100;\n\n  return { h, s, v };\n}\n\nfunction hsv2rgb({ h, s, v }: HSV): RGB {\n  s /= 100;\n  v /= 100;\n\n  const i = ~~(h / 60);\n  const f = h / 60 - i;\n  const p = v * (1 - s);\n  const q = v * (1 - s * f);\n  const t = v * (1 - s * (1 - f));\n  const index = i % 6;\n\n  const r = Math.round([v, q, p, p, t, v][index] * 255);\n  const g = Math.round([t, v, v, q, p, p][index] * 255);\n  const b = Math.round([p, p, t, v, v, q][index] * 255);\n\n  return { b, g, r };\n}\n\nfunction rgb2hex({ b, g, r }: RGB): string {\n  return '#' + [r, g, b].map((x) => x.toString(16).padStart(2, '0')).join('');\n}\n\nfunction transformColor<M extends keyof Color, C extends Color[M]>(\n  format: M,\n  color: C\n): Color {\n  let hex: Color['hex'] = toHex('#121212');\n  let rgb: Color['rgb'] = hex2rgb(hex);\n  let hsv: Color['hsv'] = rgb2hsv(rgb);\n\n  if (format === 'hex') {\n    const value = color as Color['hex'];\n\n    hex = toHex(value);\n    rgb = hex2rgb(hex);\n    hsv = rgb2hsv(rgb);\n  } else if (format === 'rgb') {\n    const value = color as Color['rgb'];\n\n    rgb = value;\n    hex = rgb2hex(rgb);\n    hsv = rgb2hsv(rgb);\n  } else if (format === 'hsv') {\n    const value = color as Color['hsv'];\n\n    hsv = value;\n    rgb = hsv2rgb(hsv);\n    hex = rgb2hex(rgb);\n  }\n\n  return { hex, hsv, rgb };\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport './LinkPreview.css';\n\nimport * as React from 'react';\nimport { Suspense } from 'react';\n\n// Cached responses or running request promises\nconst PREVIEW_CACHE = {};\n\nconst URL_MATCHER =\n  /((https?:\\/\\/(www\\.)?)|(www\\.))[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\nfunction useSuspenseRequest(url: string) {\n  let cached = PREVIEW_CACHE[url];\n\n  if (!url.match(URL_MATCHER)) {\n    return { preview: null };\n  }\n\n  if (!cached) {\n    cached = PREVIEW_CACHE[url] = fetch(\n      `/api/link-preview?url=${encodeURI(url)}`\n    )\n      .then((response) => response.json())\n      .then((preview) => {\n        PREVIEW_CACHE[url] = preview;\n        return preview;\n      })\n      .catch(() => {\n        PREVIEW_CACHE[url] = { preview: null };\n      });\n  }\n\n  if (cached instanceof Promise) {\n    throw cached;\n  }\n\n  return cached;\n}\n\nfunction LinkPreviewContent({\n  url,\n}: Readonly<{\n  url: string;\n}>): JSX.Element {\n  const { preview } = useSuspenseRequest(url);\n  if (preview === null) {\n    return null;\n  }\n  return (\n    <div className=\"LinkPreview__container\">\n      {preview.img && (\n        <div className=\"LinkPreview__imageWrapper\">\n          <img\n            src={preview.img}\n            alt={preview.title}\n            className=\"LinkPreview__image\"\n          />\n        </div>\n      )}\n      {preview.domain && (\n        <div className=\"LinkPreview__domain\">{preview.domain}</div>\n      )}\n      {preview.title && (\n        <div className=\"LinkPreview__title\">{preview.title}</div>\n      )}\n      {preview.description && (\n        <div className=\"LinkPreview__description\">{preview.description}</div>\n      )}\n    </div>\n  );\n}\n\nfunction Glimmer(props): JSX.Element {\n  return (\n    <div\n      className=\"LinkPreview__glimmer\"\n      {...props}\n      style={{\n        animationDelay: (props.index || 0) * 300,\n        ...(props.style || {}),\n      }}\n    />\n  );\n}\n\nexport default function LinkPreview({\n  url,\n}: Readonly<{\n  url: string;\n}>): JSX.Element {\n  return (\n    <Suspense\n      fallback={\n        <>\n          <Glimmer style={{ height: '80px' }} index={0} />\n          <Glimmer style={{ width: '60%' }} index={1} />\n          <Glimmer style={{ width: '80%' }} index={2} />\n        </>\n      }\n    >\n      <LinkPreviewContent url={url} />\n    </Suspense>\n  );\n}\n","import { $isLinkNode, TOGGLE_LINK_COMMAND } from '@lexical/link';\nimport { $isAtNodeEnd } from '@lexical/selection';\nimport { mergeRegister } from '@lexical/utils';\nimport {\n  $getSelection,\n  $isRangeSelection,\n  COMMAND_PRIORITY_LOW,\n  ElementNode,\n  LexicalEditor,\n  RangeSelection,\n  SELECTION_CHANGE_COMMAND,\n  TextNode,\n} from 'lexical';\nimport React from 'react';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport LinkPreview from '../../../ui/LinkPreview';\nimport { getSelectedNode } from '../../../utils/node.util';\n\nfunction positionEditorElement(editor, rect) {\n  if (rect === null) {\n    editor.style.opacity = '0';\n    editor.style.top = '-1000px';\n    editor.style.left = '-1000px';\n  } else {\n    editor.style.opacity = '1';\n    editor.style.top = `${rect.top + rect.height + window.pageYOffset + 10}px`;\n    editor.style.left = `${\n      rect.left + window.pageXOffset - editor.offsetWidth / 2 + rect.width / 2\n    }px`;\n  }\n}\n\nfunction FloatingLinkEditor({\n  editor,\n}: {\n  editor: LexicalEditor;\n}): JSX.Element {\n  const editorRef = useRef<HTMLDivElement | null>(null);\n  const inputRef = useRef(null);\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditMode, setEditMode] = useState(false);\n  const [lastSelection, setLastSelection] = useState(null);\n\n  const updateLinkEditor = useCallback(() => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      const node = getSelectedNode(selection);\n      const parent = node.getParent();\n      if ($isLinkNode(parent)) {\n        setLinkUrl(parent.getURL());\n      } else if ($isLinkNode(node)) {\n        setLinkUrl(node.getURL());\n      } else {\n        setLinkUrl('');\n      }\n    }\n    const editorElem = editorRef.current;\n    const nativeSelection = window.getSelection();\n    const activeElement = document.activeElement;\n\n    if (editorElem === null) {\n      return;\n    }\n\n    const rootElement = editor.getRootElement();\n    if (\n      selection !== null &&\n      !nativeSelection.isCollapsed &&\n      rootElement !== null &&\n      rootElement.contains(nativeSelection.anchorNode)\n    ) {\n      const domRange = nativeSelection.getRangeAt(0);\n      let rect;\n      if (nativeSelection.anchorNode === rootElement) {\n        let inner = rootElement;\n        while (inner.firstElementChild != null) {\n          inner = inner.firstElementChild as HTMLElement;\n        }\n        rect = inner.getBoundingClientRect();\n      } else {\n        rect = domRange.getBoundingClientRect();\n      }\n\n      positionEditorElement(editorElem, rect);\n      setLastSelection(selection);\n    } else if (!activeElement || activeElement.className !== 'link-input') {\n      positionEditorElement(editorElem, null);\n      setLastSelection(null);\n      setEditMode(false);\n      setLinkUrl('');\n    }\n\n    return true;\n  }, [editor]);\n\n  useEffect(() => {\n    const onResize = () => {\n      editor.getEditorState().read(() => {\n        updateLinkEditor();\n      });\n    };\n    window.addEventListener('resize', onResize);\n\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [editor, updateLinkEditor]);\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerUpdateListener(({ editorState }) => {\n        editorState.read(() => {\n          updateLinkEditor();\n        });\n      }),\n\n      editor.registerCommand(\n        SELECTION_CHANGE_COMMAND,\n        () => {\n          updateLinkEditor();\n          return true;\n        },\n        COMMAND_PRIORITY_LOW\n      )\n    );\n  }, [editor, updateLinkEditor]);\n\n  useEffect(() => {\n    editor.getEditorState().read(() => {\n      updateLinkEditor();\n    });\n  }, [editor, updateLinkEditor]);\n\n  useEffect(() => {\n    if (isEditMode && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isEditMode]);\n\n  return (\n    <div ref={editorRef} className=\"verbum-link-editor\">\n      {isEditMode ? (\n        <input\n          ref={inputRef}\n          className=\"link-input\"\n          value={linkUrl}\n          onChange={(event) => {\n            setLinkUrl(event.target.value);\n          }}\n          onKeyDown={(event) => {\n            if (event.key === 'Enter') {\n              event.preventDefault();\n              if (lastSelection !== null) {\n                if (linkUrl !== '') {\n                  editor.dispatchCommand(TOGGLE_LINK_COMMAND, linkUrl);\n                }\n                setEditMode(false);\n              }\n            } else if (event.key === 'Escape') {\n              event.preventDefault();\n              setEditMode(false);\n            }\n          }}\n        />\n      ) : (\n        <>\n          <div className=\"link-input\">\n            <a href={linkUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n              {linkUrl}\n            </a>\n            <div\n              className=\"link-edit\"\n              role=\"button\"\n              tabIndex={0}\n              onMouseDown={(event) => event.preventDefault()}\n              onClick={() => {\n                setEditMode(true);\n              }}\n            />\n          </div>\n          <LinkPreview url={linkUrl} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default FloatingLinkEditor;\n","import React, { useCallback, useContext } from 'react';\nimport Select from '../../../ui/Select';\nimport ToolbarContext from '../../../context/ToolbarContext';\nimport { FontOptions } from '../../../types';\n\nconst defaultFontFamilyOptions: FontOptions = [\n  ['Arial', 'Arial'],\n  ['Courier New', 'Courier New'],\n  ['Georgia', 'Georgia'],\n  ['Times New Roman', 'Times New Roman'],\n  ['Trebuchet MS', 'Trebuchet MS'],\n  ['Verdana', 'Verdana'],\n];\n\ninterface IFontFamilyDropdown {\n  fontOptions?: FontOptions;\n}\n\nconst FontFamilyDropdown = ({\n  fontOptions = defaultFontFamilyOptions,\n}: IFontFamilyDropdown) => {\n  const { fontFamily, applyStyleText } = useContext(ToolbarContext);\n\n  const onFontFamilySelect = useCallback(\n    (e) => {\n      applyStyleText({ 'font-family': e.target.value });\n    },\n    [applyStyleText]\n  );\n\n  return (\n    <>\n      <Select\n        className=\"verbum-toolbar-item verbum-font-family\"\n        onChange={onFontFamilySelect}\n        options={fontOptions}\n        value={fontFamily}\n      />\n      <i className=\"verbum-chevron-down inside\" />\n    </>\n  );\n};\n\nexport default FontFamilyDropdown;\n","import React, { useCallback, useContext } from 'react';\nimport Select from '../../../ui/Select';\nimport ToolbarContext from '../../../context/ToolbarContext';\nimport { FontOptions } from '../../../types';\n\nconst defaultFontSizeOptions: FontOptions = [\n  ['10px', '10px'],\n  ['11px', '11px'],\n  ['12px', '12px'],\n  ['13px', '13px'],\n  ['14px', '14px'],\n  ['15px', '15px'],\n  ['16px', '16px'],\n  ['17px', '17px'],\n  ['18px', '18px'],\n  ['19px', '19px'],\n  ['20px', '20px'],\n];\n\ninterface IFontSizeDropdown {\n  fontSizeOptions?: FontOptions;\n}\n\nconst FontSizeDropdown = ({\n  fontSizeOptions = defaultFontSizeOptions,\n}: IFontSizeDropdown) => {\n  const { fontSize, applyStyleText } = useContext(ToolbarContext);\n\n  const onFontSizeSelect = useCallback(\n    (e) => {\n      applyStyleText({ 'font-size': e.target.value });\n    },\n    [applyStyleText]\n  );\n\n  return (\n    <>\n      <Select\n        className=\"verbum-toolbar-item verbum-font-size\"\n        onChange={onFontSizeSelect}\n        options={fontSizeOptions}\n        value={fontSize}\n      />\n      <i className=\"verbum-chevron-down inside\" />\n    </>\n  );\n};\n\nexport default FontSizeDropdown;\n","import type { LexicalEditor, NodeKey } from 'lexical';\n\nimport * as React from 'react';\nimport { Suspense, useRef } from 'react';\n\nconst imageCache = new Set();\n\nfunction useSuspenseImage(src: string) {\n  if (!imageCache.has(src)) {\n    throw new Promise((resolve) => {\n      const img = new Image();\n      img.src = src;\n      img.onload = () => {\n        imageCache.add(src);\n        resolve(null);\n      };\n    });\n  }\n}\n\nfunction LazyImage({\n  altText,\n  className,\n  imageRef,\n  src,\n  width,\n  height,\n  maxWidth,\n}: {\n  altText: string;\n  className: string | null;\n  height: 'inherit' | number;\n  imageRef: { current: null | HTMLImageElement };\n  maxWidth: number;\n  src: string;\n  width: 'inherit' | number;\n}): JSX.Element {\n  useSuspenseImage(src);\n  return (\n    <img\n      className={className || undefined}\n      src={src}\n      alt={altText}\n      ref={imageRef}\n      style={{\n        height,\n        maxWidth,\n        width,\n      }}\n    />\n  );\n}\n\nexport default function ImageComponent({\n  src,\n  altText,\n  width,\n  height,\n  maxWidth,\n}: {\n  altText: string;\n  caption: LexicalEditor;\n  height: 'inherit' | number;\n  maxWidth: number;\n  nodeKey: NodeKey;\n  resizable: boolean;\n  showCaption: boolean;\n  src: string;\n  width: 'inherit' | number;\n  captionsEnabled: boolean;\n}): JSX.Element {\n  const imageRef = useRef<null | HTMLImageElement>(null);\n\n  return (\n    <Suspense fallback={null}>\n      <>\n        <div>\n          <LazyImage\n            className=\"\"\n            src={src}\n            altText={altText}\n            imageRef={imageRef}\n            width={width}\n            height={height}\n            maxWidth={maxWidth}\n          />\n        </div>\n      </>\n    </Suspense>\n  );\n}\n","import React, { useCallback, useContext } from 'react';\nimport ToolbarContext from '../../../context/ToolbarContext';\nimport ColorPicker from '../../../ui/ColorPicker';\nimport { useTranslation } from 'react-i18next';\n\nconst BackgroundColorPicker = () => {\n  const { bgColor, applyStyleText } = useContext(ToolbarContext);\n  const { t } = useTranslation('toolbar');\n\n  const onBgColorSelect = useCallback(\n    (value: string) => {\n      applyStyleText({ 'background-color': value });\n    },\n    [applyStyleText]\n  );\n\n  return (\n    <ColorPicker\n      buttonClassName=\"verbum-toolbar-item verbum-color-picker\"\n      buttonAriaLabel={t('toolbar:backgroundColorPicker.Description')}\n      buttonIconClassName=\"verbum-icon verbum-bg-color\"\n      color={bgColor}\n      onChange={onBgColorSelect}\n      title=\"bg color\"\n    />\n  );\n};\n\nexport default BackgroundColorPicker;\n","import { FORMAT_TEXT_COMMAND } from 'lexical';\nimport React from 'react';\nimport { useContext } from 'react';\nimport { IS_APPLE } from '../../../shared/src/environment';\nimport EditorContext from '../../../context/EditorContext';\nimport ToolbarContext from '../../../context/ToolbarContext';\nimport { useTranslation } from 'react-i18next';\n\nconst BoldButton = () => {\n  const { activeEditor } = useContext(EditorContext);\n  const { isBold } = useContext(ToolbarContext);\n  const { t } = useTranslation('toolbar');\n\n  return (\n    <button\n      onClick={() => {\n        activeEditor.dispatchCommand(FORMAT_TEXT_COMMAND, 'bold');\n      }}\n      className={'verbum-toolbar-item spaced ' + (isBold ? 'active' : '')}\n      title={\n        IS_APPLE\n          ? `${t('toolbar:boldButton.Title')} (⌘B)`\n          : `${t('toolbar:boldButton.Title')} (Ctrl + B)`\n      }\n      aria-label={`${t('toolbar:boldButton.Description')} ${\n        IS_APPLE ? '⌘B' : 'Ctrl+B'\n      }`}\n      type=\"button\"\n    >\n      <i className=\"verbum-format verbum-bold\" />\n    </button>\n  );\n};\n\nexport default BoldButton;\n","import { FORMAT_TEXT_COMMAND } from 'lexical';\nimport React from 'react';\nimport { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport EditorContext from '../../../context/EditorContext';\nimport ToolbarContext from '../../../context/ToolbarContext';\n\nconst CodeFormatButton = () => {\n  const { activeEditor } = useContext(EditorContext);\n  const { isCode } = useContext(ToolbarContext);\n  const { t } = useTranslation('toolbar');\n\n  return (\n    <button\n      onClick={() => {\n        activeEditor.dispatchCommand(FORMAT_TEXT_COMMAND, 'code');\n      }}\n      className={'verbum-toolbar-item spaced ' + (isCode ? 'active' : '')}\n      title={t('toolbar:codeFormatButton.Description')}\n      aria-label={t('toolbar:codeFormatButton.Description')}\n      type=\"button\"\n    >\n      <i className=\"verbum-format verbum-code\" />\n    </button>\n  );\n};\n\nexport default CodeFormatButton;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { AutoFocusPlugin } from '@lexical/react/LexicalAutoFocusPlugin';\nimport { CheckListPlugin } from '@lexical/react/LexicalCheckListPlugin';\nimport { ClearEditorPlugin } from '@lexical/react/LexicalClearEditorPlugin';\nimport { HashtagPlugin } from '@lexical/react/LexicalHashtagPlugin';\nimport { LinkPlugin } from '@lexical/react/LexicalLinkPlugin';\nimport { ListPlugin } from '@lexical/react/LexicalListPlugin';\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\nimport React, { ReactNode, useEffect, useState } from 'react';\nimport { useRef } from 'react';\n\nimport { useSettings } from './context/SettingsContext';\nimport { useSharedHistoryContext } from './context/SharedHistoryContext';\nimport ActionsPlugin from './plugins/ActionsPlugin';\nimport AutoLinkPlugin from './plugins/AutoLinkPlugin';\nimport CharacterStylesPopupPlugin from './plugins/CharacterStylesPopupPlugin';\nimport ClickableLinkPlugin from './plugins/ClickableLinkPlugin';\nimport CodeHighlightPlugin from './plugins/CodeHighlightPlugin';\nimport EmojisPlugin from './plugins/EmojisPlugin';\nimport KeywordsPlugin from './plugins/KeywordsPlugin';\nimport ListMaxIndentLevelPlugin from './plugins/ListMaxIndentLevelPlugin';\nimport MarkdownShortcutPlugin from './plugins/MarkdownShortcutPlugin';\nimport SpeechToTextPlugin from './plugins/SpeechToTextPlugin';\nimport TabFocusPlugin from './plugins/TabFocusPlugin';\nimport ContentEditable from './ui/ContentEditable';\nimport Placeholder from './ui/Placeholder';\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport EditorContext from './context/EditorContext';\nimport { LexicalEditor } from 'lexical';\nimport { useTranslation } from 'react-i18next';\n\ninterface IEditorProps {\n  children?: ReactNode;\n  hashtagsEnabled?: boolean;\n  autoLinkEnabled?: boolean;\n  emojisEnabled?: boolean;\n  actionsEnabled?: boolean;\n  placeholder?: string;\n  listMaxIndent?: number;\n  isEditable?: boolean;\n  locale?: 'en' | 'fr' | 'ptBr' | 'ru' | null;\n  onChange?: (editorState: string, editorInstance?: LexicalEditor) => void;\n}\n\nconst Editor = ({\n  children,\n  hashtagsEnabled = false,\n  autoLinkEnabled = false,\n  emojisEnabled = false,\n  actionsEnabled = false,\n  listMaxIndent = 7,\n  placeholder = '',\n  isEditable = true,\n  locale = null,\n  onChange,\n}: IEditorProps) => {\n  const [editor] = useLexicalComposerContext();\n  const [activeEditor, setActiveEditor] = useState(editor);\n\n  const editorStateRef = useRef(null);\n  const { historyState } = useSharedHistoryContext();\n  const {\n    settings: { isRichText },\n  } = useSettings();\n  const placeholderComponent = <Placeholder>{placeholder}</Placeholder>;\n\n  const { i18n } = useTranslation();\n\n  useEffect(() => {\n    editor.setEditable(isEditable);\n\n    if (locale) i18n.changeLanguage(locale);\n  }, []);\n\n  return (\n    <EditorContext.Provider\n      value={{ initialEditor: editor, activeEditor, setActiveEditor }}\n    >\n      {children}\n      <div className={`verbum-editor-container`}>\n        <AutoFocusPlugin />\n        <ClearEditorPlugin />\n        {hashtagsEnabled && <HashtagPlugin />}\n        <KeywordsPlugin />\n        <SpeechToTextPlugin />\n        {autoLinkEnabled && <AutoLinkPlugin />}\n\n        <>\n          <RichTextPlugin\n            contentEditable={<ContentEditable />}\n            placeholder={placeholderComponent}\n            ErrorBoundary={LexicalErrorBoundary}\n          />\n          <OnChangePlugin\n            onChange={(editorState) => {\n              onChange?.(JSON.stringify(editorState), activeEditor);\n              return (editorStateRef.current = editorState);\n            }}\n          />\n          <MarkdownShortcutPlugin />\n          <CodeHighlightPlugin />\n          <ListPlugin />\n          <CheckListPlugin />\n          <ListMaxIndentLevelPlugin maxDepth={listMaxIndent} />\n          <LinkPlugin />\n          <ClickableLinkPlugin />\n          <CharacterStylesPopupPlugin />\n          <TabFocusPlugin />\n        </>\n\n        <HistoryPlugin externalHistoryState={historyState} />\n        {actionsEnabled && <ActionsPlugin isRichText={isRichText} />}\n      </div>\n    </EditorContext.Provider>\n  );\n};\n\nexport default Editor;\n","import {\n  LexicalComposer,\n  InitialEditorStateType,\n} from '@lexical/react/LexicalComposer';\nimport React from 'react';\nimport PlaygroundNodes from './nodes/PlaygroundNodes';\nimport PlaygroundEditorTheme from './themes/PlaygroundEditorTheme';\nimport './EditorComposer.css';\nimport i18n from './locale';\nimport { I18nextProvider } from 'react-i18next';\n\ninterface IEditorComposer {\n  children: React.ReactElement;\n  initialEditorState?: InitialEditorStateType;\n}\n\nconst EditorComposer = ({ children, initialEditorState }: IEditorComposer) => {\n  const initialConfig = {\n    namespace: 'VerbumEditor',\n    nodes: [...PlaygroundNodes],\n    onError: (error) => {\n      throw error;\n    },\n    theme: PlaygroundEditorTheme,\n    editorState: initialEditorState,\n  };\n  return (\n    <LexicalComposer initialConfig={initialConfig}>\n      <I18nextProvider i18n={i18n}>\n          <div className=\"verbum-editor-shell\">{children}</div>\n      </I18nextProvider>\n    </LexicalComposer>\n  );\n};\n\nexport default EditorComposer;\n","import React from 'react';\nimport { useContext } from 'react';\nimport EditorContext from '../../../context/EditorContext';\nimport ToolbarContext from '../../../context/ToolbarContext';\nimport FloatingLinkEditor from './FloatingLinkEditor';\nimport { createPortal } from 'react-dom';\nimport { useTranslation } from 'react-i18next';\n\nconst InsertLinkButton = () => {\n  const { activeEditor } = useContext(EditorContext);\n  const { isLink, insertLink } = useContext(ToolbarContext);\n  const { t } = useTranslation('toolbar');\n\n  return (\n    <>\n      <button\n        onClick={insertLink}\n        className={'verbum-toolbar-item spaced ' + (isLink ? 'active' : '')}\n        aria-label={t('toolbar:insertLinkButton.Description')}\n        title={t('toolbar:insertLinkButton.Description')}\n        type=\"button\"\n      >\n        <i className=\"verbum-format verbum-link\" />\n      </button>\n      {isLink &&\n        createPortal(\n          <FloatingLinkEditor editor={activeEditor} />,\n          document.body\n        )}\n    </>\n  );\n};\n\nexport default InsertLinkButton;\n","import { FORMAT_TEXT_COMMAND } from 'lexical';\nimport React from 'react';\nimport { useContext } from 'react';\nimport { IS_APPLE } from '../../../shared/src/environment';\nimport EditorContext from '../../../context/EditorContext';\nimport ToolbarContext from '../../../context/ToolbarContext';\nimport { useTranslation } from 'react-i18next';\n\nconst ItalicButton = () => {\n  const { activeEditor } = useContext(EditorContext);\n  const { isItalic } = useContext(ToolbarContext);\n  const { t } = useTranslation('toolbar');\n\n  return (\n    <button\n      onClick={() => {\n        activeEditor.dispatchCommand(FORMAT_TEXT_COMMAND, 'italic');\n      }}\n      className={'verbum-toolbar-item spaced ' + (isItalic ? 'active' : '')}\n      title={\n        IS_APPLE\n          ? `${t('toolbar:italicButton.Title')} (⌘I)`\n          : `${t('toolbar:italicButton.Title')} (Ctrl+I)`\n      }\n      aria-label={`${t('toolbar:italicButton.Description')} ${\n        IS_APPLE ? '⌘I' : 'Ctrl+I'\n      }`}\n      type=\"button\"\n    >\n      <i className=\"verbum-format verbum-italic\" />\n    </button>\n  );\n};\n\nexport default ItalicButton;\n","import React, { useCallback, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport ToolbarContext from '../../../context/ToolbarContext';\nimport ColorPicker from '../../../ui/ColorPicker';\n\nconst TextColorPicker = () => {\n  const { fontColor, applyStyleText } = useContext(ToolbarContext);\n  const { t } = useTranslation('toolbar');\n\n  const onFontColorSelect = useCallback(\n    (value: string) => {\n      applyStyleText({ color: value });\n    },\n    [applyStyleText]\n  );\n\n  return (\n    <ColorPicker\n      buttonClassName=\"verbum-toolbar-item verbum-color-picker\"\n      buttonAriaLabel={t('toolbar:textColorPicker.Description')}\n      buttonIconClassName=\"verbum-icon verbum-font-color\"\n      color={fontColor}\n      onChange={onFontColorSelect}\n      title=\"text color\"\n    />\n  );\n};\n\nexport default TextColorPicker;\n","import { FORMAT_TEXT_COMMAND } from 'lexical';\nimport React, { useContext } from 'react';\nimport DropDown from '../../../ui/DropDown';\nimport EditorContext from '../../../context/EditorContext';\nimport ToolbarContext from '../../../context/ToolbarContext';\nimport { useTranslation } from 'react-i18next';\n\nconst TextFormatDropdown = () => {\n  const { activeEditor } = useContext(EditorContext);\n  const { isStrikethrough, isSubscript, isSuperscript } =\n    useContext(ToolbarContext);\n  const { t } = useTranslation('toolbar');\n  return (\n    <DropDown\n      buttonClassName=\"verbum-toolbar-item spaced\"\n      buttonLabel=\"\"\n      buttonAriaLabel={t('toolbar:textFormatDropdown.Description')}\n      buttonIconClassName=\"verbum-icon verbum-dropdown-more\"\n    >\n      <button\n        onClick={() => {\n          activeEditor.dispatchCommand(FORMAT_TEXT_COMMAND, 'strikethrough');\n        }}\n        className={\n          'item ' + (isStrikethrough ? 'active dropdown-item-active' : '')\n        }\n        title={t('toolbar:textFormatDropdown.Options.Strikethrough.Label')}\n        aria-label={t(\n          'toolbar:textFormatDropdown.Options.Strikethrough.Description'\n        )}\n        type=\"button\"\n      >\n        <i className=\"verbum-icon verbum-strikethrough\" />\n        <span className=\"verbum-text\">\n          {t('toolbar:textFormatDropdown.Options.Strikethrough.Label')}\n        </span>\n      </button>\n      <button\n        onClick={() => {\n          activeEditor.dispatchCommand(FORMAT_TEXT_COMMAND, 'subscript');\n        }}\n        className={'item ' + (isSubscript ? 'active dropdown-item-active' : '')}\n        title={t('toolbar:textFormatDropdown.Options.Subscript.Label')}\n        aria-label={t(\n          'toolbar:textFormatDropdown.Options.Subscript.Description'\n        )}\n        type=\"button\"\n      >\n        <i className=\"verbum-icon verbum-subscript\" />\n        <span className=\"verbum-text\">\n          {t('toolbar:textFormatDropdown.Options.Subscript.Label')}\n        </span>\n      </button>\n      <button\n        onClick={() => {\n          activeEditor.dispatchCommand(FORMAT_TEXT_COMMAND, 'superscript');\n        }}\n        className={\n          'item ' + (isSuperscript ? 'active dropdown-item-active' : '')\n        }\n        title={t('toolbar:textFormatDropdown.Options.Superscript.Label')}\n        aria-label={t(\n          'toolbar:textFormatDropdown.Options.Superscript.Description'\n        )}\n        type=\"button\"\n      >\n        <i className=\"verbum-icon verbum-superscript\" />\n        <span className=\"verbum-text\">\n          {t('toolbar:textFormatDropdown.Options.Superscript.Label')}\n        </span>\n      </button>\n    </DropDown>\n  );\n};\n\nexport default TextFormatDropdown;\n","import { FORMAT_TEXT_COMMAND } from 'lexical';\nimport React from 'react';\nimport { useContext } from 'react';\nimport { IS_APPLE } from '../../../shared/src/environment';\nimport EditorContext from '../../../context/EditorContext';\nimport ToolbarContext from '../../../context/ToolbarContext';\nimport { useTranslation } from 'react-i18next';\n\nconst UnderlineButton = () => {\n  const { activeEditor } = useContext(EditorContext);\n  const { isUnderline } = useContext(ToolbarContext);\n  const { t } = useTranslation('toolbar');\n\n  return (\n    <button\n      onClick={() => {\n        activeEditor.dispatchCommand(FORMAT_TEXT_COMMAND, 'underline');\n      }}\n      className={'verbum-toolbar-item spaced ' + (isUnderline ? 'active' : '')}\n      title={\n        IS_APPLE\n          ? `${t('toolbar:underlineButton.Title')} (⌘U)`\n          : `${t('toolbar:underlineButton.Title')} (Ctrl+U)`\n      }\n      aria-label={`${t('toolbar:underlineButton.Description')} ${\n        IS_APPLE ? '⌘U' : 'Ctrl+U'\n      }`}\n      type=\"button\"\n    >\n      <i className=\"verbum-format verbum-underline\" />\n    </button>\n  );\n};\n\nexport default UnderlineButton;\n"],"names":["__className","EmojiNode","TextNode","[object Object]","node","__text","__key","constructor","className","text","key","super","createDOM","config","dom","document","createElement","inner","appendChild","updateDOM","prevNode","firstChild","serializedNode","setMode","setFormat","format","setDetail","detail","mode","setStyle","style","exportJSON","this","getClassName","type","getLatest","styleInject","css","ref","insertAt","head","getElementsByTagName","insertBefore","styleSheet","cssText","createTextNode","EquationEditor","equation","setEquation","inline","inputRef","React","InlineEquationEditor","BlockEquationEditor","onChange","event","target","value","autoFocus","KatexRenderer","onClick","katexElementRef","useRef","useEffect","katexElement","current","katex","render","displayMode","errorColor","output","strict","throwOnError","trust","role","tabIndex","EquationComponent","nodeKey","editor","useLexicalComposerContext","equationValue","setEquationValue","useState","showEquationEditor","setShowEquationEditor","onHide","useCallback","restoreSelection","update","$getNodeByKey","$isEquationNode","selectNext","mergeRegister","registerCommand","SELECTION_CHANGE_COMMAND","payload","activeElement","COMMAND_PRIORITY_HIGH","KEY_ESCAPE_COMMAND","EquationNode","DecoratorNode","__equation","__inline","$createEquationNode","getEquation","version","_config","getWritable","decorate","clamp","min","max","Math","ImageResizer","onResizeStart","onResizeEnd","imageRef","maxWidth","showCaption","setShowCaption","buttonRef","positioningRef","currentHeight","currentWidth","direction","isResizing","ratio","startHeight","startWidth","startX","startY","editorRootElement","getRootElement","maxWidthContainer","getBoundingClientRect","width","maxHeightContainer","height","handlePointerDown","image","positioning","clientX","clientY","cursorDir","setProperty","body","setStartCursor","addEventListener","handlePointerMove","handlePointerUp","isVertical","diff","floor","removeEventListener","onPointerDown","Direction","ExcalidrawImage","elements","imageContainerRef","appState","rootClassName","Svg","setSvg","svg","exportToSvg","files","styleTag","firstElementChild","_svg$firstElementChil","viewBox","getAttribute","viewBoxDimentions","split","setAttribute","tagName","remove","removeStyleFromSvg_HACK","setContent","dangerouslySetInnerHTML","__html","outerHTML","joinClasses","args","filter","Boolean","join","Button","data-test-id","dataTestId","children","disabled","small","title","PortalImpl","onClose","closeOnClickOutside","modalRef","focus","modalOverlayElement","handler","keyCode","clickOutsideHandler","contains","_modalRef$current","parentElement","window","Modal","createPortal","ExcalidrawModal","onSave","initialElements","isShown","onDelete","excalidrawRef","excaliDrawModelRef","discardModalOpen","setDiscardModalOpen","setElements","t","useTranslation","ShowDiscardDialog","_excaliDrawModelRef$c","updateScene","Excalidraw","els","initialData","isLoading","el","isDeleted","length","ExcalidrawComponent","data","isModalOpen","setModalOpen","isEditable","isSelected","setSelected","clearSelection","useLexicalNodeSelection","setIsResizing","$isNodeSelection","$getSelection","preventDefault","$isExcalidrawNode","setEditable","CLICK_COMMAND","buttonElem","shiftKey","COMMAND_PRIORITY_LOW","KEY_DELETE_COMMAND","KEY_BACKSPACE_COMMAND","deleteNode","useMemo","JSON","parse","newData","setData","stringify","nextWidth","nextHeight","setTimeout","convertExcalidrawElement","domNode","excalidrawData","$createExcalidrawNode","__data","ExcalidrawNode","span","theme","undefined","hasAttribute","conversion","priority","exportDOM","element","content","getElementByKey","getKey","innerHTML","querySelector","ImageComponent","Promise","convertImageElement","HTMLImageElement","alt","altText","src","$createImageNode","ImageNode","caption","captionsEnabled","__src","__altText","__maxWidth","__width","__height","__showCaption","__caption","createEditor","__captionsEnabled","nestedEditor","editorState","parseEditorState","isEmpty","setEditorState","img","getAltText","toJSON","getSrc","setWidthAndHeight","writable","Suspense","fallback","resizable","KeywordNode","$createKeywordNode","cursor","canInsertTextBefore","canInsertTextAfter","isTextEntity","keyword","MentionNode","mentionName","__mention","$createMentionNode","setTextContent","mentionNode","toggleDirectionless","createPollOption","uid","random","toString","replace","substr","votes","cloneOption","option","Array","from","PollOptionComponent","index","options","totalVotes","withPollNode","clientID","useCollaborationContext","checkboxRef","votesArray","checked","indexOf","e","toggleVote","setOptionText","placeholder","deleteOption","PollComponent","question","reduce","next","getTotalVotes","cb","PollNode","$isPollNode","map","addOption","convertPollElement","$createPollNode","__question","__options","forEach","self","push","splice","clonedOption","votesClone","voteIndex","elem","display","CAN_USE_DOM","useLayoutEffectImpl","useLayoutEffect","url","URL","location","href","WEBSOCKET_ID","URLSearchParams","search","get","createWebsocketProvider","id","yjsDocMap","doc","Doc","set","load","WebsocketProvider","WEBSOCKET_SLUG","connect","Context","createContext","historyState","redoStack","undoStack","useSharedHistoryContext","useContext","characterLimit","code","codeHighlight","atrule","attr","boolean","builtin","cdata","char","class","class-name","comment","constant","deleted","doctype","entity","function","important","inserted","namespace","number","operator","prolog","property","punctuation","regex","selector","string","symbol","tag","variable","hashtag","heading","h1","h2","h3","h4","h5","link","list","listitem","listitemChecked","listitemUnchecked","nested","olDepth","ul","ltr","mark","markOverlap","paragraph","quote","rtl","table","tableCell","tableCellHeader","bold","italic","strikethrough","subscript","superscript","underline","underlineStrikethrough","baseTheme","LexicalContentEditable","ContentEditable","Placeholder","positionSticky","stickyElem","rootElementRect","rectLeft","left","top","y","x","StickyComponent","color","stickyContainerRef","isDragging","offsetX","offsetY","isCollab","position","stickyContainer","resizeObserver","ResizeObserver","entries","i","entry","removeRootListener","registerRootListener","nextRootElem","prevRootElem","unobserve","observe","handleWindowResize","rootElement","pageX","pageY","classList","$isStickyNode","setPosition","button","stickContainer","add","toggleColor","LexicalNestedComposer","initialEditor","initialTheme","StickyEditorTheme","CollaborationPlugin","providerFactory","shouldBootstrap","HistoryPlugin","externalHistoryState","PlainTextPlugin","contentEditable","ErrorBoundary","LexicalErrorBoundary","StickyNode","__x","__y","__color","xOffset","yOffset","div","$setSelection","isIsolated","convertTweetElement","$createTweetNode","isTwitterScriptLoading","TweetComponent","loadingComponent","onError","onLoad","tweetID","containerRef","previousTweetIDRef","isTweetLoading","setIsTweetLoading","createTweet","twttr","widgets","error","String","script","async","onload","onerror","BlockWithAlignableContents","TweetNode","DecoratorBlockNode","__id","__format","getId","embedBlockTheme","embedBlock","base","isTopLevel","TypeaheadNode","YouTubeComponent","videoID","frameBorder","allow","allowFullScreen","YouTubeNode","$createYouTubeNode","_editor","PlaygroundNodes","HeadingNode","ListNode","ListItemNode","QuoteNode","CodeNode","TableNode","TableCellNode","TableRowNode","HashtagNode","CodeHighlightNode","AutoLinkNode","LinkNode","OverflowNode","HorizontalRuleNode","MarkNode","languageDetector","detect","callback","navigator","language","substring","init","cacheUserLanguage","i18n","i18next","ns","resources","ar","de","en","es","fr","it","ja","nl","pl","pt","ptBr","ru","ukr","zh","fallbackLng","debug","interpolation","escapeValue","err","use","hostName","hostname","setOption","name","settings","disableBeforeInput","emptyEditor","isAutocomplete","isCharLimit","isCharLimitUtf8","isRichText","measureTypingPerf","showNestedEditorTreeView","showTreeView","useModal","modalContent","setModalContent","getContent","TABLE_ROW_REG_EXP","TABLE","dependencies","export","exportChildren","$isTableNode","row","getChildren","rowOutput","$isTableRowNode","cell","$isElementNode","regExp","parentNode","_1","match","matchCells","mapToTableCells","rows","sibling","getPreviousSibling","maxCells","$isParagraphNode","getChildrenSize","getFirstChild","$isTextNode","cells","getTextContent","unshift","previousSibling","$createTableNode","tableRow","$createTableRowNode","append","createTableCell","getTableColumnsSize","selectEnd","textContent","$createTableCellNode","TableCellHeaderStates","NO_STATUS","$createParagraphNode","$createTextNode","trim","PLAYGROUND_TRANSFORMERS","$isHorizontalRuleNode","_2","isImport","line","$createHorizontalRuleNode","getNextSibling","exportFormat","$isImageNode","importRegExp","textNode","imageNode","trigger","equationNode","$isTweetNode","tweetNode","CHECK_LIST","ELEMENT_TRANSFORMERS","TEXT_FORMAT_TRANSFORMERS","TEXT_MATCH_TRANSFORMERS","getElement","getElementById","fontSize","transform","padding","background","borderRadius","SPEECH_TO_TEXT_COMMAND","createCommand","VOICE_COMMANDS","\n","_ref","selection","insertParagraph","redo","_ref2","dispatchCommand","REDO_COMMAND","undo","_ref3","UNDO_COMMAND","SUPPORT_SPEECH_RECOGNITION","timer","cleanup","isEnabled","setIsEnabled","SpeechRecognition","webkitSpeechRecognition","recognition","report","clearTimeout","removeChild","console","log","continuous","interimResults","resultItem","results","item","resultIndex","transcript","isFinal","$isRangeSelection","command","toLowerCase","insertText","start","stop","_isEnabled","COMMAND_PRIORITY_EDITOR","ActionsPlugin","setIsEditable","isSpeechToText","setIsSpeechToText","connected","setConnected","isEditorEmpty","setIsEditorEmpty","modal","showModal","registerEditableListener","editable","CONNECTED_COMMAND","registerUpdateListener","getEditorState","read","$getRoot","paragraphChildren","handleMarkdownToggle","root","$isCodeNode","getLanguage","$convertFromMarkdownString","markdown","$convertToMarkdownString","clear","$createCodeNode","importFile","exportFile","fileName","Date","toISOString","source","ShowClearDialog","TOGGLE_CONNECT_COMMAND","CLEAR_EDITOR_COMMAND","URL_MATCHER","EMAIL_MATCHER","MATCHERS","exec","LexicalAutoLinkPlugin","AutoLinkPlugin","matchers","INSERT_INLINE_COMMAND","FloatingCharacterStylesEditor","isLink","isBold","isItalic","isUnderline","isCode","isStrikethrough","isSubscript","isSuperscript","popupCharStylesEditorRef","mouseDownRef","insertLink","TOGGLE_LINK_COMMAND","updateCharacterStylesEditor","popupCharStylesEditorElem","nativeSelection","getSelection","isCollapsed","anchorNode","rect","domRange","getRangeAt","pageYOffset","pageXOffset","offsetWidth","bottom","opacity","setPopupPosition","onResize","FORMAT_TEXT_COMMAND","getSelectedNode","anchor","getNode","focusNode","isBackward","$isAtNodeEnd","CharacterStylesPopupPlugin","isText","setIsText","setIsLink","setIsBold","setIsItalic","setIsUnderline","setIsStrikethrough","setIsSubscript","setIsSuperscript","setIsCode","updatePopup","hasFormat","parent","getParent","$isLinkNode","$isCodeHighlightNode","useCharacterStylesPopup","ClickableLinkPlugin","newTab","hasMoved","prevOffsetX","prevOffsetY","onPointerUp","hasMovedDuringClick","linkDomNode","isLinkDomNode","getLinkDomNode","linkNode","maybeLinkNode","$getNearestNodeFromDOMNode","open","metaKey","ctrlKey","prevRootElement","nodeName","CodeHighlightPlugin","registerCodeHighlighting","KEYWORDS_REGEX","KeywordsPlugin","hasNodes","Error","createKeywordNode","getKeywordMatch","matchArr","startOffset","end","useLexicalTextEntity","ListMaxIndentLevelPlugin","maxDepth","INDENT_CONTENT_COMMAND","elementNodesInSelection","nodesInSelection","getNodes","Set","getParentOrThrow","n","getElementNodesInSelection","totalDepth","elementNode","$isListNode","$getListDepth","$isListItemNode","isIndentPermitted","COMMAND_PRIORITY_CRITICAL","MarkdownPlugin","MarkdownShortcutPlugin","transformers","lastTabKeyDownTimestamp","hasRegisteredKeyDownListener","TabFocusPlugin","timeStamp","FOCUS_COMMAND","clone","EditorContext","ToolbarContext","DropDown","buttonLabel","buttonAriaLabel","buttonClassName","buttonIconClassName","stopCloseOnClickSelf","dropDownRef","showDropDown","setShowDropDown","dropDown","innerWidth","handle","Divider","AlignDropdown","activeEditor","isRTL","FORMAT_ELEMENT_COMMAND","OUTDENT_CONTENT_COMMAND","TextInput","label","FileInput","accept","INSERT_IMAGE_COMMAND","ImagesPlugin","$insertNodes","$isRootOrShadowRoot","$wrapNodeInElement","INSERT_EQUATION_COMMAND","EquationsPlugin","insertNodes","INSERT_EXCALIDRAW_COMMAND","ExcalidrawPlugin","excalidrawNode","INSERT_POLL_COMMAND","PollPlugin","pollNode","$isRootNode","INSERT_TWEET_COMMAND","TwitterPlugin","getTopLevelElementOrThrow","insertAfter","paragraphNode","select","INSERT_YOUTUBE_COMMAND","YouTubePlugin","youTubeNode","KatexEquationAlterer","onConfirm","initialEquation","setInline","onCheckboxChange","TableCellResizer","targetRef","resizerRef","tableRectRef","mouseStartPosRef","mouseCurrentPos","updateMouseCurrentPos","activeCell","updateActiveCell","isSelectingGrid","updateIsSelectingGrid","draggingDirection","updateDraggingDirection","isGridSelection","DEPRECATED_$isGridSelection","resetState","onMouseMove","getCellFromTarget","tableCellNode","tableNode","$getTableNodeFromLexicalNodeOrThrow","tableElement","isHeightChanging","updateRowHeight","newHeight","$isTableCellNode","tableRowIndex","$getTableRowIndexFromTableCellNode","tableRows","setHeight","updateColumnWidth","newWidth","tableColumnIndex","$getTableColumnIndexFromTableCellNode","r","tableCells","setWidth","toggleResize","stopPropagation","heightChange","abs","widthChange","resizerStyles","styles","backgroundColor","right","tableRect","getResizers","onMouseDown","onMouseUp","TableCellResizerPlugin","TableActionMenu","_tableCellNode","setIsMenuOpen","contextRef","updateTableCellNode","selectionCounts","updateSelectionCounts","columns","registerMutationListener","nodeMutations","selectionShape","getShape","toX","fromX","toY","fromY","menuButtonElement","dropDownElement","menuButtonRect","handleClickOutside","clearTableSelection","isAttached","tableSelection","getTableSelectionFromTableElement","clearHighlight","markDirty","insertTableRowAtSelection","shouldInsertAfter","grid","$getElementGridForTableNode","$insertTableRow","insertTableColumnAtSelection","$insertTableColumn","deleteTableRowAtSelection","$removeTableRowAtIndex","deleteTableAtSelection","deleteTableColumnAtSelection","$deleteTableColumn","toggleTableRowIsHeader","toggleHeaderStyle","ROW","toggleTableColumnIsHeader","COLUMN","__headerState","TableCellActionMenuContainer","menuButtonRef","menuRootRef","isMenuOpen","setTableMenuCellNode","moveMenu","menu","tableCellNodeFromSelection","$getTableCellNodeFromLexicalNode","menuButtonDOM","tableCellNodeDOM","tableCellRect","menuRect","prevTableCellDOM","TableActionMenuPlugin","HorizontalRulePlugin","INSERT_HORIZONTAL_RULE_COMMAND","horizontalRuleNode","YOUTUBE_ID_PARSER","parseYouTubeVideoID","urlMatches","InsertImageDialog","InsertImageUriDialogBody","InsertImageUploadedDialogBody","InsertTableDialog","setRows","setColumns","INSERT_TABLE_COMMAND","InsertPollDialog","setQuestion","VALID_TWITTER_URL","InsertTweetDialog","setText","isDisabled","_text$split","_text$split$","_text$split$$split","setSrc","setAltText","reader","FileReader","result","readAsDataURL","InsertYouTubeDialog","InsertEquationDialog","onEquationConfirm","InsertDropdown","_ref9","enableTable","enableImage","enableYoutube","enableTwitter","enablePoll","enableEquations","enableExcalidraw","enableHorizontalRule","enableStickyNote","TablePlugin","TableCellActionMenuPlugin","stickyNode","IS_APPLE","test","platform","UndoButton","canUndo","RedoButton","canRedo","Select","CODE_LANGUAGE_OPTIONS","CodeLanguageDropdown","selectedElementKey","codeLanguage","onCodeLanguageSelect","setLanguage","BlockFormatDropdown","blockType","formatHeading","headingSize","$wrapNodes","$createHeadingNode","INSERT_UNORDERED_LIST_COMMAND","REMOVE_LIST_COMMAND","INSERT_ORDERED_LIST_COMMAND","INSERT_CHECK_LIST_COMMAND","$createQuoteNode","codeNode","removeText","insertRawText","supportedBlockTypes","CODE_LANGUAGE_MAP","javascript","md","plaintext","python","CapitalizedNameMentionsRegex","RegExp","PUNC","TRIGGERS","VALID_CHARS","AtSignMentionsRegex","AtSignMentionsRegexAliasRegex","mentionsCache","Map","MentionTypeaheadOption","TypeaheadOption","picture","MentionsTypeaheadMenuItem","onMouseEnter","setRefElement","basicColors","ColorPicker","rest","selfColor","setSelfColor","transformColor","saturationPosition","hsv","s","v","huePosition","h","hex","basicColor","MoveWrapper","newColor","divRef","move","_e","toHex","startsWith","ctx","getContext","fillStyle","hex2rgb","rbgArr","m","g","b","parseInt","rgb2hsv","d","rgb2hex","padStart","rgb","f","p","q","round","hsv2rgb","PREVIEW_CACHE","LinkPreviewContent","preview","cached","fetch","encodeURI","then","response","json","catch","useSuspenseRequest","domain","description","Glimmer","props","animationDelay","LinkPreview","positionEditorElement","FloatingLinkEditor","editorRef","linkUrl","setLinkUrl","isEditMode","setEditMode","lastSelection","setLastSelection","updateLinkEditor","getURL","editorElem","onKeyDown","rel","defaultFontFamilyOptions","defaultFontSizeOptions","imageCache","LazyImage","has","resolve","Image","useSuspenseImage","bgColor","applyStyleText","onBgColorSelect","background-color","hashtagsEnabled","autoLinkEnabled","emojisEnabled","actionsEnabled","listMaxIndent","locale","setActiveEditor","editorStateRef","placeholderComponent","changeLanguage","Provider","AutoFocusPlugin","ClearEditorPlugin","HashtagPlugin","SpeechToTextPlugin","RichTextPlugin","OnChangePlugin","ListPlugin","CheckListPlugin","LinkPlugin","initialEditorState","initialConfig","nodes","PlaygroundEditorTheme","LexicalComposer","I18nextProvider","fontOptions","fontFamily","onFontFamilySelect","font-family","fontSizeOptions","onFontSizeSelect","font-size","searchData","getTypeaheadValues","queryString","setQueryString","mentionString","mentionData","setResults","cachedResults","useMentionLookupService","checkForSlashTriggerMatch","useBasicTypeaheadTriggerMatch","minLength","slice","onSelectOption","selectedOption","nodeToReplace","closeMenu","$createAutoLinkNode","checkForMentionMatch","mentionMatch","minMatchLength","matchingString","leadOffset","replaceableString","checkForAtSignMentions","checkForCapitalizedNameMentions","getPossibleQueryMatch","LexicalTypeaheadMenuPlugin","onQueryChange","triggerFn","menuRenderFn","anchorElementRef","selectedIndex","selectOptionAndCleanUp","setHighlightedIndex","ReactDOM","fontColor","onFontColorSelect","defaultFontSize","defaultFontColor","defaultBgColor","defaultFontFamily","insertExists","InsertComponent","useChild","alignExists","AlignComponent","setBlockType","setSelectedElementKey","setFontSize","setFontColor","setBgColor","setFontFamily","setCanUndo","setCanRedo","setIsRTL","setCodeLanguage","updateToolbar","elementKey","elementDOM","$isParentElementRTL","parentList","$getNearestNodeOfType","getListType","$isHeadingNode","getTag","getType","$getSelectionStyleValueForProperty","_payload","newEditor","CAN_UNDO_COMMAND","CAN_REDO_COMMAND","$patchStyleText"],"mappings":"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"}